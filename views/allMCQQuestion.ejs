<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MCQ Questions Database</title>
    <style>
        :root {
            --primary-color: #4f46e5;
            --secondary-color: #2980b9;
            --easy-color: #2ecc71;
            --medium-color: #f39c12;
            --hard-color: #e74c3c;
            --background-color: #111827;
            --card-bg: #1f2937;
            --text-color: #f9fafb;
            --border-color: #374151;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: var(--background-color);
            color: var(--text-color);
            margin: 0;
            padding: 0;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        header {
            background-color: #1e293b;
            color: white;
            padding: 20px 0;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);
        }

        header .container {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .title-container {
            display: flex;
            align-items: center;
        }

        h1 {
            margin: 0;
            font-size: 28px;
        }

        .question-count {
            margin-left: 15px;
            background-color: white;
            color: var(--primary-color);
            border-radius: 50px;
            padding: 5px 12px;
            font-weight: bold;
            font-size: 16px;
        }

        /* Button styles */
        .btn-add-mcq {
            background-color: var(--secondary-color);
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            font-size: 14px;
            font-weight: 600;
            transition: background-color 0.3s;
            cursor: pointer;
        }

        .btn-add-mcq:hover {
            background-color: #1f6ba0;
        }

        .btn-delete {
            background-color: var(--hard-color);
            color: white;
            padding: 5px 10px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 12px;
            transition: background-color 0.3s;
        }

        .btn-delete:hover {
            background-color: #c0392b;
        }

        .header-actions {
            display: flex;
            gap: 15px;
            align-items: center;
        }

        .filtering-controls {
            display: flex;
            justify-content: center;
            margin: 20px 0;
            gap: 20px;
        }

        .filter-group {
            display: flex;
            flex-direction: column;
            gap: 5px;
        }

        .filter-label {
            font-weight: 600;
            font-size: 14px;
            color: var(--text-color);
        }

        .filter-select {
            padding: 8px 15px;
            border-radius: 4px;
            border: 1px solid var(--border-color);
            background-color: #374151;
            color: var(--text-color);
            min-width: 200px;
            font-size: 14px;
            cursor: pointer;
        }

        .filter-select:focus {
            outline: none;
            border-color: var(--primary-color);
            background-color: #3f4a5c;
            box-shadow: 0 0 0 2px rgba(79, 70, 229, 0.2);
        }

        .filter-select option {
            background-color: #374151;
            color: var(--text-color);
        }

        .questions-container {
            display: flex;
            flex-direction: column;
            gap: 15px;
            margin-top: 20px;
        }

        .question-item {
            background-color: var(--card-bg);
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
            transition: transform 0.2s, box-shadow 0.2s;
            width: 100%;
            display: flex;
            flex-direction: column;
        }

        .question-item:hover {
            transform: translateY(-3px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }

        .question-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }

        .question-level {
            padding: 5px 10px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 600;
            text-transform: uppercase;
        }

        .level-easy {
            background-color: var(--easy-color);
            color: white;
        }

        .level-medium {
            background-color: var(--medium-color);
            color: white;
        }

        .level-hard {
            background-color: var(--hard-color);
            color: white;
        }

        .question-content {
            font-size: 16px;
            margin-bottom: 15px;
            line-height: 1.5;
            cursor: pointer;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .question-text {
            flex-grow: 1;
        }

        .toggle-icon {
            font-size: 24px;
            transition: transform 0.3s ease;
            color: var(--primary-color);
            margin-left: 10px;
        }

        .question-expanded .toggle-icon {
            transform: rotate(180deg);
        }

        .question-footer {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 15px;
            font-size: 14px;
        }

        .classification-tag {
            background-color: #374151;
            color: #d1d5db;
            padding: 4px 12px;
            border-radius: 4px;
            font-weight: 500;
        }

        .no-questions {
            text-align: center;
            padding: 40px;
            background-color: var(--card-bg);
            border-radius: 8px;
            width: 100%;
            color: var(--text-color);
        }

        /* New styles for options */
        .question-options {
            display: none;
            margin-top: 15px;
            border-top: 1px solid var(--border-color);
            padding-top: 15px;
        }

        .question-expanded .question-options {
            display: block;
        }

        .option-item {
            margin-bottom: 10px;
            padding: 8px 12px;
            background-color: #2d3748;
            color: var(--text-color);
            border-radius: 4px;
            transition: background-color 0.2s;
        }

        .option-item:hover {
            background-color: #374151;
        }

        .created-by {
            margin-top: 15px;
            font-style: italic;
            color: #9ca3af;
            font-size: 13px;
            text-align: right;
        }

        /* Pagination styles */
        .pagination-container {
            display: flex;
            justify-content: center;
            align-items: center;
            margin-top: 30px;
            gap: 10px;
        }

        .pagination-info {
            color: var(--text-color);
            font-size: 14px;
            margin: 0 20px;
        }

        .pagination-btn {
            padding: 8px 16px;
            background-color: #374151;
            border: 1px solid var(--border-color);
            border-radius: 4px;
            color: var(--text-color);
            text-decoration: none;
            transition: all 0.3s;
            cursor: pointer;
        }

        .pagination-btn:hover:not(.disabled) {
            background-color: var(--primary-color);
            color: white;
            border-color: var(--primary-color);
        }

        .pagination-btn.active {
            background-color: var(--primary-color);
            color: white;
            border-color: var(--primary-color);
        }

        .pagination-btn.disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .page-numbers {
            display: flex;
            gap: 5px;
        }

        .actions-container {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .delete-action {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        @media (max-width: 768px) {
            .filtering-controls {
                flex-direction: column;
                align-items: stretch;
            }

            .pagination-container {
                flex-wrap: wrap;
            }

            .header-actions {
                flex-direction: column;
                gap: 10px;
            }
        }
    </style>
</head>
<body>
    <header>
        <div class="container">
            <div class="title-container">
                <h1>MCQ Questions Database</h1>
                <span class="question-count">
                    <%= typeof pagination !== 'undefined' && pagination ? pagination.totalQuestions : (mcqQuestions ? mcqQuestions.length : 0) %> Total Questions
                </span>
            </div>
            <div class="header-actions">
                <a href="/admin/mcq-questions/add" class="btn-add-mcq">
                    <svg width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                        <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z"/>
                    </svg>
                    Add MCQ Question
                </a>
                <nav>
                    <a href="/admin" style="color: white; margin-right: 15px;">Dashboard</a>
                    <a href="/" style="color: white;">Home</a>
                </nav>
            </div>
        </div>
    </header>

    <div class="container">
        <div class="filtering-controls">
            <div class="filter-group">
                <label class="filter-label" for="classification-filter">Classification</label>
                <select id="classification-filter" class="filter-select" onchange="applyFilters()">
                    <option value="">All Classifications</option>
                    <% if (typeof classifications !== 'undefined' && classifications && classifications.length > 0) { %>
                        <% classifications.forEach(cls => { %>
                            <option value="<%= cls %>" <%= filters && filters.classification === cls ? 'selected' : '' %>>
                                <%= cls %>
                            </option>
                        <% }); %>
                    <% } %>
                </select>
            </div>
            <div class="filter-group">
                <label class="filter-label" for="level-filter">Level</label>
                <select id="level-filter" class="filter-select" onchange="applyFilters()">
                    <option value="">All Levels</option>
                    <option value="easy" <%= filters && filters.level === 'easy' ? 'selected' : '' %>>Easy</option>
                    <option value="medium" <%= filters && filters.level === 'medium' ? 'selected' : '' %>>Medium</option>
                    <option value="hard" <%= filters && filters.level === 'hard' ? 'selected' : '' %>>Hard</option>
                </select>
            </div>
        </div>

        <div class="questions-container">
            <% if (mcqQuestions && mcqQuestions.length > 0) { %>
                <%
                const startIndex = typeof pagination !== 'undefined' && pagination ?
                    ((pagination.currentPage - 1) * pagination.limit) : 0;
                %>
                <% mcqQuestions.forEach((question, index) => { %>
                    <div class="question-item"
                         data-question-id="<%= question._id %>"
                         data-classification="<%= question.classification %>"
                         data-level="<%= question.level.toLowerCase() %>">
                        <div class="question-header">
                            <span>Question #<%= startIndex + index + 1 %></span>
                            <div class="delete-action">
                                <span class="question-level level-<%= question.level.toLowerCase() %>">
                                    <%= question.level %>
                                </span>
                                <button class="btn-delete" onclick="deleteQuestion('<%= question._id %>')">
                                    Delete
                                </button>
                            </div>
                        </div>
                        <div class="question-content" onclick="toggleQuestion(this)">
                            <div class="question-text"><%= question.question %></div>
                            <div class="toggle-icon">▼</div>
                        </div>
                        <div class="question-options">
                            <% if (question.options && question.options.length > 0) { %>
                                <% question.options.forEach((option, optionIndex) => { %>
                                    <div class="option-item <%= question.correctAnswer == optionIndex ? 'correct-answer' : '' %>">
                                        <%= String.fromCharCode(65 + optionIndex) %>. <%= option %>
                                        <% if (question.correctAnswer == optionIndex) { %>
                                            <span style="color: var(--easy-color); font-weight: bold;"> ✓ Correct</span>
                                        <% } %>
                                    </div>
                                <% }); %>
                            <% } else { %>
                                <div>No options available for this question.</div>
                            <% } %>

                            <div class="created-by">
                                Created by: <%= question.createdBy || 'Anonymous' %> |
                                Marks: <%= question.marks || 1 %>
                            </div>
                        </div>
                        <div class="question-footer">
                            <% if (question.classification) { %>
                                <span class="classification-tag"><%= question.classification %></span>
                            <% } %>
                        </div>
                    </div>
                <% }); %>
            <% } else { %>
                <div class="no-questions">
                    <h2>No questions found</h2>
                    <p>There are no MCQ questions available in the database.</p>
                    <a href="/admin/mcq-questions/add" class="btn-add-mcq" style="margin-top: 20px;">
                        Add Your First Question
                    </a>
                </div>
            <% } %>
        </div>

        <!-- Pagination Controls -->
        <% if (typeof pagination !== 'undefined' && pagination && pagination.totalPages > 1) { %>
            <div class="pagination-container">
                <% if (pagination.hasPrevPage) { %>
                    <a href="?page=<%= pagination.currentPage - 1 %>&classification=<%= filters.classification || '' %>&level=<%= filters.level || '' %>"
                       class="pagination-btn">← Previous</a>
                <% } else { %>
                    <span class="pagination-btn disabled">← Previous</span>
                <% } %>

                <div class="page-numbers">
                    <%
                    let startPage = Math.max(1, pagination.currentPage - 2);
                    let endPage = Math.min(pagination.totalPages, startPage + 4);
                    if (endPage - startPage < 4) {
                        startPage = Math.max(1, endPage - 4);
                    }
                    %>

                    <% if (startPage > 1) { %>
                        <a href="?page=1&classification=<%= filters.classification || '' %>&level=<%= filters.level || '' %>"
                           class="pagination-btn">1</a>
                        <% if (startPage > 2) { %>
                            <span style="padding: 0 10px;">...</span>
                        <% } %>
                    <% } %>

                    <% for (let i = startPage; i <= endPage; i++) { %>
                        <a href="?page=<%= i %>&classification=<%= filters.classification || '' %>&level=<%= filters.level || '' %>"
                           class="pagination-btn <%= pagination.currentPage === i ? 'active' : '' %>">
                            <%= i %>
                        </a>
                    <% } %>

                    <% if (endPage < pagination.totalPages) { %>
                        <% if (endPage < pagination.totalPages - 1) { %>
                            <span style="padding: 0 10px;">...</span>
                        <% } %>
                        <a href="?page=<%= pagination.totalPages %>&classification=<%= filters.classification || '' %>&level=<%= filters.level || '' %>"
                           class="pagination-btn"><%= pagination.totalPages %></a>
                    <% } %>
                </div>

                <span class="pagination-info">
                    Page <%= pagination.currentPage %> of <%= pagination.totalPages %>
                </span>

                <% if (pagination.hasNextPage) { %>
                    <a href="?page=<%= pagination.currentPage + 1 %>&classification=<%= filters.classification || '' %>&level=<%= filters.level || '' %>"
                       class="pagination-btn">Next →</a>
                <% } else { %>
                    <span class="pagination-btn disabled">Next →</span>
                <% } %>
            </div>
        <% } %>
    </div>

    <script>
        // Toggle question options visibility
        function toggleQuestion(element) {
            const questionItem = element.closest('.question-item');
            questionItem.classList.toggle('question-expanded');
        }

        // Apply filters with server-side pagination
        function applyFilters() {
            const classificationFilter = document.getElementById('classification-filter').value;
            const levelFilter = document.getElementById('level-filter').value;

            // Redirect to filtered URL
            const params = new URLSearchParams();
            if (classificationFilter) params.set('classification', classificationFilter);
            if (levelFilter) params.set('level', levelFilter);
            params.set('page', '1'); // Reset to first page when filtering

            window.location.href = '/admin/mcq-questions' + (params.toString() ? '?' + params.toString() : '');
        }

        // Delete question
        async function deleteQuestion(questionId) {
            if (!confirm('Are you sure you want to delete this question? This action cannot be undone.')) {
                return;
            }

            try {
                const response = await fetch(`/admin/mcq-questions/${questionId}/delete`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                const result = await response.json();

                if (result.success) {
                    // Remove the question from the DOM
                    const questionElement = document.querySelector(`[data-question-id="${questionId}"]`);
                    if (questionElement) {
                        questionElement.remove();
                    }

                    // Update the count
                    const remainingQuestions = document.querySelectorAll('.question-item').length;
                    if (remainingQuestions === 0) {
                        window.location.reload(); // Reload to show "no questions" message
                    } else {
                        // You might want to update the total count in the header
                        const countElement = document.querySelector('.question-count');
                        if (countElement) {
                            const currentCount = parseInt(countElement.textContent) || 0;
                            if (currentCount > 0) {
                                countElement.textContent = (currentCount - 1) + ' Total Questions';
                            }
                        }
                    }
                } else {
                    alert('Failed to delete question: ' + (result.message || 'Unknown error'));
                }
            } catch (error) {
                console.error('Error deleting question:', error);
                alert('An error occurred while deleting the question');
            }
        }
    </script>
</body>
</html>