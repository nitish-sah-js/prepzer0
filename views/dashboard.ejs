<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PrepZer0 - Student Dashboard</title>
   <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary: #4f46e5;
            --primary-hover: #4338ca;
            --primary-gradient: linear-gradient(135deg, #4f46e5, #8b5cf6);
            --dark-bg: #111827;
            --card-bg: #1f2937;
            --light-text: #f9fafb;
            --secondary-text: #9ca3af;
            --border-color: #374151;
            --row-hover: #2d3748;
            --danger: #ef4444;
            --warning: #f59e0b;
            --info: #3b82f6;
            --success: #10b981;
            --card-shadow: 0 4px 20px rgba(0, 0, 0, 0.25);
            --btn-shadow: 0 4px 12px rgba(79, 70, 229, 0.3);
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Inter', 'Segoe UI', Arial, sans-serif;
        }
        
        html, body {
            height: 100%;
        }
        
        body {
            background-color: var(--dark-bg);
            color: var(--light-text);
            background-image: 
                radial-gradient(circle at 10% 20%, rgba(79, 70, 229, 0.05) 0%, transparent 20%),
                radial-gradient(circle at 90% 80%, rgba(139, 92, 246, 0.05) 0%, transparent 20%);
            display: flex;
            flex-direction: column;
        }
        
        .main-wrapper {
            flex: 1 0 auto;
            display: flex;
            flex-direction: column;
        }
        
        .content-wrapper {
            flex: 1 0 auto;
            padding-bottom: 2rem;
        }
        
        /* Navbar styling */
        .navbar {
            background-color: rgba(31, 41, 55, 0.95) !important;
            backdrop-filter: blur(10px);
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
            border-bottom: 1px solid rgba(79, 70, 229, 0.1);
            padding: 0.75rem 1.5rem;
            position: sticky;
            top: 0;
            z-index: 1000;
        }
        
        .logo-section {
            display: flex;
            align-items: center;
        }
        
        .logo-section img {
            width: 38px;
            height: 38px;
            margin-right: 0.75rem;
            filter: drop-shadow(0 0 8px rgba(79, 70, 229, 0.5));
        }
        
        .logo-section h1 {
            font-size: 1.6rem;
            font-weight: 700;
            margin: 0;
            background: var(--primary-gradient);
            -webkit-background-clip: text;
            background-clip: text;
            -webkit-text-fill-color: transparent;
            letter-spacing: -0.5px;
        }

        /* Card styling */
        .card {
            background-color: var(--card-bg);
            border-radius: 0.75rem;
            box-shadow: var(--card-shadow);
            border: 1px solid rgba(255, 255, 255, 0.05);
            margin-bottom: 1.5rem;
            transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
            overflow: hidden;
        }
        
        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 12px 28px rgba(0, 0, 0, 0.3);
            border: 1px solid rgba(79, 70, 229, 0.1);
        }
        
        .card-body {
            background-color: var(--card-bg);
            color: var(--light-text);
            border-radius: 0.75rem;
            padding: 1.5rem;
        }
        
        .card-title {
            font-weight: 600;
            margin-bottom: 1rem;
            font-size: 1.15rem;
            display: flex;
            align-items: center;
        }
        
        .card-title i {
            margin-right: 0.5rem;
            color: var(--primary);
            opacity: 0.9;
        }

        /* Dashboard header */
        .dashboard-header {
            background: var(--card-bg);
            color: var(--light-text);
            padding: 2.5rem 0;
            margin-bottom: 2rem;
            border-radius: 0.75rem;
            text-align: center;
            position: relative;
            overflow: hidden;
            box-shadow: var(--card-shadow);
            border: 1px solid rgba(255, 255, 255, 0.05);
        }
        
        .dashboard-header::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: linear-gradient(
                135deg, 
                rgba(79, 70, 229, 0.1) 0%, 
                rgba(139, 92, 246, 0.05) 50%, 
                transparent 100%
            );
            animation: rotateBackground 10s linear infinite;
            z-index: 0;
        }
        
        @keyframes rotateBackground {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
        }
        
        .dashboard-header > * {
            position: relative;
            z-index: 1;
        }
        
        .dashboard-header h1 {
            font-weight: 700;
            margin-bottom: 0.5rem;
            font-size: 2.25rem;
            background: var(--primary-gradient);
            -webkit-background-clip: text;
            background-clip: text;
            -webkit-text-fill-color: transparent;
        }
        
        .dashboard-header p {
            color: var(--secondary-text);
            font-size: 1.1rem;
        }

        /* Card variations */
        .stats-card {
            position: relative;
            border-left: 4px solid var(--primary);
        }
        
        .stats-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(to right, rgba(79, 70, 229, 0.1), transparent);
            opacity: 0.2;
            pointer-events: none;
        }
        
        .stats-card .display-4 {
            font-weight: 700;
            font-size: 3rem;
            margin-bottom: 1rem;
            color: var(--light-text);
        }
        
        .upcoming-exam {
            border-left: 4px solid var(--success);
        }
        
        .upcoming-exam::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(to right, rgba(16, 185, 129, 0.1), transparent);
            opacity: 0.2;
            pointer-events: none;
        }
        
        .completed-exam {
            border-left: 4px solid var(--info);
        }
        
        .completed-exam::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(to right, rgba(59, 130, 246, 0.1), transparent);
            opacity: 0.2;
            pointer-events: none;
        }
        
        .missed-exam {
            border-left: 4px solid var(--warning);
        }
        
        .missed-exam::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(to right, rgba(245, 158, 11, 0.1), transparent);
            opacity: 0.2;
            pointer-events: none;
        }

        /* Navigation tabs */
        .nav-tabs {
            border-bottom: none;
            gap: 0.75rem;
            padding-bottom: 0.5rem;
        }
        
        .nav-tabs .nav-link {
            color: var(--secondary-text);
            background-color: rgba(31, 41, 55, 0.6);
            border: 1px solid rgba(255, 255, 255, 0.05);
            border-radius: 0.5rem;
            padding: 0.6rem 1.25rem;
            font-weight: 500;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .nav-tabs .nav-link:hover:not(.active) {
            background-color: rgba(31, 41, 55, 0.9);
            border-color: rgba(79, 70, 229, 0.3);
            color: var(--light-text);
        }
        
        .nav-tabs .nav-link.active {
            color: white;
            background: var(--primary-gradient);
            border: none;
            box-shadow: 0 4px 12px rgba(79, 70, 229, 0.3);
            position: relative;
        }
        
        .nav-tabs .nav-link i {
            font-size: 0.875rem;
        }

        /* Tab content */
        .tab-content {
            background-color: var(--card-bg);
            border: 1px solid rgba(255, 255, 255, 0.05);
            margin-top: 0.5rem;
            border-radius: 0.75rem;
            box-shadow: var(--card-shadow);
            overflow: hidden;
        }
        
        /* Badge styling */
        .badge {
            padding: 0.35rem 0.75rem;
            border-radius: 9999px;
            font-size: 0.75rem;
            font-weight: 600;
            display: inline-flex;
            align-items: center;
            gap: 0.25rem;
            letter-spacing: 0.025em;
        }
        
        .badge-success {
            background-color: rgba(16, 185, 129, 0.1);
            color: var(--success);
            border: 1px solid rgba(16, 185, 129, 0.2);
        }
        
        .badge-warning {
            background-color: rgba(245, 158, 11, 0.1);
            color: var(--warning);
            border: 1px solid rgba(245, 158, 11, 0.2);
        }
        
        .badge-info {
            background-color: rgba(59, 130, 246, 0.1);
            color: var(--info);
            border: 1px solid rgba(59, 130, 246, 0.2);
        }
        
        .badge-custom {
            font-size: 85%;
        }

        /* Button styling */
        .btn {
            border-radius: 0.5rem;
            font-weight: 500;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            padding: 0.5rem 1.25rem;
            transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
            gap: 0.5rem;
        }
        
        .btn-primary {
            background: var(--primary-gradient);
            border: none;
            color: white;
            box-shadow: var(--btn-shadow);
        }
        
        .btn-primary:hover {
            background: linear-gradient(135deg, #4338ca, #7c3aed);
            transform: translateY(-2px);
            box-shadow: 0 6px 15px rgba(79, 70, 229, 0.4);
        }
        
        .btn-primary:active {
            transform: translateY(0);
        }
        
        .btn-outline-secondary {
            color: var(--light-text);
            border: 1px solid var(--secondary-text);
            background: transparent;
            transition: all 0.3s ease;
        }
        
        .btn-outline-secondary:hover {
            background: rgba(156, 163, 175, 0.1);
            border-color: var(--light-text);
            color: var(--light-text);
            transform: translateY(-2px);
        }
        
        .btn-secondary {
            background-color: var(--secondary-text);
            border-color: var(--secondary-text);
        }
        
        .btn i {
            opacity: 0.9;
        }

        /* Progress bar */
        .progress {
            height: 8px;
            background-color: rgba(17, 24, 39, 0.5);
            border-radius: 10px;
            box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }
        
        .progress-bar {
            border-radius: 10px;
            background-image: linear-gradient(to right, rgba(255, 255, 255, 0.1), rgba(255, 255, 255, 0));
        }
        
        .progress-bar.bg-success {
            background-color: var(--success);
        }
        
        .progress-bar.bg-info {
            background-color: var(--info);
        }
        
        .progress-bar.bg-warning {
            background-color: var(--warning);
        }
        
        .progress-bar.bg-danger {
            background-color: var(--danger);
        }

        /* Avatar styling */
        .avatar-container {
            display: inline-block;
            position: relative;
            border: 2px solid rgba(79, 70, 229, 0.3);
            border-radius: 50%;
            padding: 2px;
        }
        
        .avatar-container img {
            border-radius: 50%;
            transition: all 0.3s ease;
        }
        
        .avatar-badge {
            position: absolute;
            bottom: 0;
            right: 0;
            background: var(--success);
            height: 12px;
            width: 12px;
            border-radius: 50%;
            border: 2px solid var(--card-bg);
            box-shadow: 0 0 0 2px rgba(16, 185, 129, 0.3);
        }

        /* Modal styling */
        .modal-content {
            background-color: var(--card-bg);
            color: var(--light-text);
            border: 1px solid rgba(255, 255, 255, 0.05);
            border-radius: 0.75rem;
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.4);
            backdrop-filter: blur(10px);
        }
        
        .modal-header {
            border-bottom: 1px solid var(--border-color);
            padding: 1.25rem 1.5rem;
        }
        
        .modal-footer {
            border-top: 1px solid var(--border-color);
            padding: 1.25rem 1.5rem;
        }
        
        .modal-body {
            padding: 1.5rem;
        }
        
        .btn-close {
            color: var(--light-text);
            filter: invert(1) grayscale(100%) brightness(200%);
            opacity: 0.7;
        }
        
        .btn-close:hover {
            opacity: 1;
        }
        
        .form-control {
            background-color: rgba(17, 24, 39, 0.8);
            border: 1px solid var(--border-color);
            color: var(--light-text);
            border-radius: 0.5rem;
            padding: 0.625rem 1rem;
            transition: all 0.3s ease;
        }
        
        .form-control:focus {
            background-color: rgba(17, 24, 39, 0.9);
            color: var(--light-text);
            border-color: var(--primary);
            box-shadow: 0 0 0 0.25rem rgba(79, 70, 229, 0.25);
        }
        
        .form-control::placeholder {
            color: var(--secondary-text);
            opacity: 0.7;
        }

        /* Timeline styling */
        .timeline {
            color: var(--light-text);
        }
        
        .timeline .badge {
            width: 36px;
            height: 36px;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 0;
        }
        
        .timeline .badge i {
            font-size: 1rem;
        }
        
        .timeline .d-flex {
            position: relative;
        }
        
        .timeline .d-flex:not(:last-child)::after {
            content: '';
            position: absolute;
            left: 18px;
            top: 36px;
            bottom: 0;
            width: 2px;
            background: rgba(255, 255, 255, 0.1);
            height: calc(100% - 12px);
        }

        /* Alert styling */
        .alert-info, .alert-success {
            background-color: rgba(45, 55, 72, 0.6);
            color: var(--light-text);
            border: 1px solid rgba(255, 255, 255, 0.05);
            border-radius: 0.5rem;
            padding: 1rem 1.25rem;
        }
        
        .alert-info {
            border-left: 4px solid var(--info);
        }
        
        .alert-success {
            border-left: 4px solid var(--success);
        }

        .text-muted {
            color: var(--secondary-text) !important;
        }

        /* Footer styling - FIXED */
        footer {
            flex-shrink: 0;
            background-color: rgba(31, 41, 55, 0.95) !important;
            color: var(--light-text);
            backdrop-filter: blur(10px);
            border-top: 1px solid rgba(79, 70, 229, 0.1);
            padding: 1.25rem 0;
            margin-top: auto;
            width: 100%;
        }

        /* Fix for video element */
        #video, #canvas {
            display: none;
        }

        /* Mobile responsive styles */
        @media (max-width: 768px) {
            .dashboard-header {
                padding: 1.5rem 1rem;
            }
            
            .dashboard-header h1 {
                font-size: 1.75rem;
            }
            
            .card-body {
                padding: 1.25rem;
            }
            
            .stats-card .display-4 {
                font-size: 2.5rem;
            }
            
            .nav-tabs {
                flex-wrap: nowrap;
                overflow-x: auto;
                padding-bottom: 0.75rem;
            }
            
            .nav-tabs .nav-link {
                white-space: nowrap;
            }
        }

        /* Page refresh animation */
        .page-refresh-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(17, 24, 39, 0.9);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 9999;
            opacity: 0;
            visibility: hidden;
            transition: opacity 0.3s ease, visibility 0.3s ease;
        }

        .page-refresh-overlay.show {
            opacity: 1;
            visibility: visible;
        }

        .refresh-spinner {
            text-align: center;
            color: var(--light-text);
        }

        .refresh-spinner i {
            font-size: 3rem;
            color: var(--primary);
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
        }
    </style>
</head>
<body>
    <!-- Page refresh overlay -->
    <div class="page-refresh-overlay" id="refreshOverlay">
        <div class="refresh-spinner">
            <i class="fas fa-sync-alt"></i>
            <p class="mt-3">Updating exam status...</p>
        </div>
    </div>

    <nav class="navbar navbar-expand-lg navbar-dark">
        <div class="container-fluid">
            <a class="navbar-brand" href="#">
                <div class="logo-section">
                    <img src="uploads/unnamed-removebg-preview.png" alt="Logo">
                    <h1>PrepZer0</h1>
                </div>
            </a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav ms-auto align-items-center">
                    <li class="nav-item active me-3">
                        <a class="nav-link d-flex align-items-center gap-2" href="#">
                            <i class="fas fa-columns"></i>
                            Dashboard
                        </a>
                    </li>
                    <li class="nav-item me-3">
                        <a class="nav-link d-flex align-items-center gap-2" href="#">
                            <i class="fas fa-chart-line"></i>
                            Performance
                        </a>
                    </li>
                    <li class="nav-item me-3">
                        <a class="nav-link position-relative" href="#" title="Notifications">
                            <i class="fas fa-bell"></i>
                            <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger" style="font-size: 0.5rem; padding: 0.15rem 0.4rem;">
                                3
                            </span>
                        </a>
                    </li>
                    <li class="nav-item dropdown" id="roots">
                        <a class="nav-link dropdown-toggle" href="#" id="navbarDropdownMenuLink" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                            <div class="avatar-container">
                                <img id="navimg" src="<%=pic%>" width="30" height="30" class="rounded-circle">
                                <span class="avatar-badge"></span>
                            </div>
                        </a>
                        <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="navbarDropdownMenuLink" style="border-radius: 0.5rem; margin-top: 0.5rem; box-shadow: 0 10px 25px rgba(0,0,0,0.2);">
                            <li><a class="dropdown-item d-flex align-items-center gap-2" href="/profile"><i class="fas fa-user"></i> Profile</a></li>
                            <li><a class="dropdown-item d-flex align-items-center gap-2" href="#"><i class="fas fa-cog"></i> Settings</a></li>
                            <li><a class="dropdown-item d-flex align-items-center gap-2" href="#"><i class="fas fa-question-circle"></i> Help</a></li>
                            <li><hr class="dropdown-divider"></li>
                            <li><a class="dropdown-item d-flex align-items-center gap-2" href="/logout"><i class="fas fa-sign-out-alt"></i> Log Out</a></li>
                        </ul>
                    </li>   
                </ul>
            </div>
        </div>
    </nav>

    <div class="container py-4">
        <div class="row">
            <div class="col-md-12">
                <div class="dashboard-header">
                    <h1>Welcome, <%= user.fname %> <%= user.lname %></h1>
                    <p class="mb-0">Department: <%= user.Department.toUpperCase() %> | Semester: <%= user.CurrentSemester || user.Semester %></p>
                </div>
            </div>
        </div>

        <div class="row mt-4">
            <div class="col-md-12">
                <ul class="nav nav-tabs" id="examTabs" role="tablist">
                    <li class="nav-item">
                        <a class="nav-link active" id="upcoming-tab" data-bs-toggle="tab" href="#upcoming" role="tab" aria-controls="upcoming" aria-selected="true">
                            <i class="fas fa-hourglass-start"></i> Upcoming Exams
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" id="completed-tab" data-bs-toggle="tab" href="#completed" role="tab" aria-controls="completed" aria-selected="false">
                            <i class="fas fa-check-circle"></i> Completed Exams
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" id="missed-tab" data-bs-toggle="tab" href="#missed" role="tab" aria-controls="missed" aria-selected="false">
                            <i class="fas fa-exclamation-circle"></i> Missed Exams
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" id="performance-tab" data-bs-toggle="tab" href="#performance" role="tab" aria-controls="performance" aria-selected="false">
                            <i class="fas fa-chart-bar"></i> Performance
                        </a>
                    </li>
                </ul>
                
                <div class="tab-content p-3 rounded-bottom" id="examTabsContent">
                    <div class="tab-pane fade show active" id="upcoming" role="tabpanel" aria-labelledby="upcoming-tab">
                        <% 
                        const currentDate = new Date();
                        let upcomingCount = 0;
                        exams.forEach(exam => { 
                            const scheduleTillDate = new Date(exam.scheduleTill);
                            // Only show exams in Upcoming if not taken AND scheduled date is in the future
                            if (!exam.alreadyGiven && scheduleTillDate > currentDate) { 
                                upcomingCount++;
                        %>
                            <div class="card mb-3 upcoming-exam">
                                <div class="card-body">
                                    <div class="row">
                                        <div class="col-md-8">
                                            <h5 class="card-title"><i class="fas fa-book me-2"></i><%= exam.name %>   </h5>
                                            <p class="card-text mb-1">
                                                <span class="badge badge-info badge-custom"><i class="fas fa-tag me-1"></i><%= exam.questionType.toUpperCase() %></span>
                                                <span class="ms-2"><i class="fas fa-clock me-1"></i> <%= exam.duration %> minutes</span>
                                            </p>
                                            
                                            <p class="card-text mb-1"><i class="fas fa-calendar-day me-1"></i> Scheduled At: <%= exam.scheduledAt.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit', timeZone: 'Asia/Kolkata'}) %></p>
                                            <p class="card-text mb-1"><i class="fas fa-calendar-check me-1"></i> Scheduled Till: <%= exam.scheduleTill.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit', timeZone: 'Asia/Kolkata'}) %></p>
                                        </div>
                                        <div class="col-md-4 text-md-end d-flex align-items-center justify-content-md-end mt-3 mt-md-0">
                                            <button class="btn btn-primary start-test-btn" data-exam-id="<%= exam._id %>" data-exam-cam="<%= exam.settings.camera %>">
                                                
                                                <i class="fas fa-play"></i> Start Test
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        <% }}); %>

                        <% if (upcomingCount === 0) { %>
                            <div class="alert alert-info">
                                <i class="fas fa-info-circle me-2"></i> No upcoming exams at the moment.
                            </div>
                        <% } %>
                    </div>
                    
                    <div class="tab-pane fade" id="completed" role="tabpanel" aria-labelledby="completed-tab">
                        <% 
                        let completedCount = 0;
                        exams.forEach(exam => { 
                            if (exam.alreadyGiven) { 
                                completedCount++;
                        %>
                            <div class="card mb-3 completed-exam">
                                <div class="card-body">
                                    <div class="row">
                                        <div class="col-md-8">
                                            <h5 class="card-title"><i class="fas fa-check-circle me-2"></i><%= exam.name %></h5>
                                            <p class="card-text mb-1">
                                                <span class="badge badge-info badge-custom"><i class="fas fa-tag me-1"></i><%= exam.questionType.toUpperCase() %></span>
                                            </p>
                                            <p class="card-text mb-1"><i class="far fa-calendar-check me-1"></i> Completed On:    <%= new Date(exam.submissionData.submittedAt).toLocaleString('en-IN', {
                                timeZone: 'Asia/Kolkata',
                                year: 'numeric',
                                month: 'short',
                                day: '2-digit',
                                hour: '2-digit',
                                minute: '2-digit',
                                hour12: true
                            }) %></p>
                                            <p class="card-text mb-1">
                                                Result: 
                                                <% if (exam.score) { %>
                                                    <span class="badge badge-success badge-custom"><i class="fas fa-trophy me-1"></i><%= exam.score %>%</span>
                                                <% } else { %>
                                                    <span class="badge badge-secondary badge-custom"><i class="fas fa-hourglass me-1"></i>Pending</span>
                                                <% } %>
                                            </p>
                                        </div>
                                        <div class="col-md-4 text-md-end d-flex align-items-center justify-content-md-end mt-3 mt-md-0">
                                            <button class="btn btn-outline-secondary">
                                                <i class="fas fa-eye"></i> View Details
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        <% }}); %>

                        <% if (completedCount === 0) { %>
                            <div class="alert alert-info">
                                <i class="fas fa-info-circle me-2"></i> No completed exams yet.
                            </div>
                        <% } %>
                    </div>
                    
                    <!-- Missed Exams Tab -->
                    <div class="tab-pane fade" id="missed" role="tabpanel" aria-labelledby="missed-tab">
                        <% 
                        const currentDateForMissed = new Date();
                        let missedCount = 0;
                        exams.forEach(exam => { 
                            const scheduleTillDate = new Date(exam.scheduleTill);
                            // Show exams in Missed if not taken AND scheduled date is in the past
                            if (!exam.alreadyGiven && scheduleTillDate < currentDateForMissed) { 
                                missedCount++;
                        %>
                            <div class="card mb-3 missed-exam">
                                <div class="card-body">
                                    <div class="row">
                                        <div class="col-md-8">
                                            <h5 class="card-title"><i class="fas fa-exclamation-circle me-2"></i><%= exam.name %></h5>
                                            <p class="card-text mb-1">
                                                <span class="badge badge-info badge-custom"><i class="fas fa-tag me-1"></i><%= exam.questionType.toUpperCase() %></span>
                                            </p>
                                            <p class="card-text mb-1"><i class="fas fa-calendar-day me-1"></i> Was Scheduled At: <%= new Date(exam.scheduledAt).toLocaleString([],{timeZone: 'Asia/Kolkata',year: 'numeric',month: 'short',day: '2-digit',hour: '2-digit',minute: '2-digit',hour12: true}) %></p>
                                            <p class="card-text mb-1"><i class="fas fa-clock me-1"></i> Deadline Passed: <%= new Date(exam.scheduleTill).toLocaleString([],{timeZone: 'Asia/Kolkata',year: 'numeric',month: 'short',day: '2-digit',hour: '2-digit',minute: '2-digit',hour12: true}) %></p>
                                            <p class="card-text mb-1">Status: <span class="badge badge-warning badge-custom"><i class="fas fa-exclamation-triangle me-1"></i>Missed</span></p>
                                        </div>
                                        <div class="col-md-4 text-md-end d-flex align-items-center justify-content-md-end mt-3 mt-md-0">
                                            <button class="btn btn-outline-secondary contact-instructor-btn" data-exam-id="<%= exam._id %>">
                                               
                                                <i class="fas fa-envelope"></i> Contact Instructor
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        <% }}); %>

                        <% if (missedCount === 0) { %>
                            <div class="alert alert-success">
                                <i class="fas fa-check-circle me-2"></i> You haven't missed any exams. Great job!
                            </div>
                        <% } %>
                    </div>
                    
                    <div class="tab-pane fade" id="performance" role="tabpanel" aria-labelledby="performance-tab">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="card mb-4">
                                    <div class="card-body">
                                        <h5 class="card-title"><i class="fas fa-book me-2"></i>Subject Performance</h5>
                                        <div class="mb-4">
                                            <div class="d-flex justify-content-between mb-1">
                                                <p class="mb-0">Data Structures</p>
                                                <p class="mb-0 fw-bold">85%</p>
                                            </div>
                                            <div class="progress mb-2">
                                                <div class="progress-bar bg-success" role="progressbar" style="width: 85%" aria-valuenow="85" aria-valuemin="0" aria-valuemax="100"></div>
                                            </div>
                                        </div>
                                        <div class="mb-4">
                                            <div class="d-flex justify-content-between mb-1">
                                                <p class="mb-0">Database Management</p>
                                                <p class="mb-0 fw-bold">75%</p>
                                            </div>
                                            <div class="progress mb-2">
                                                <div class="progress-bar bg-info" role="progressbar" style="width: 75%" aria-valuenow="75" aria-valuemin="0" aria-valuemax="100"></div>
                                            </div>
                                        </div>
                                        <div class="mb-4">
                                            <div class="d-flex justify-content-between mb-1">
                                                <p class="mb-0">Computer Networks</p>
                                                <p class="mb-0 fw-bold">65%</p>
                                            </div>
                                            <div class="progress mb-2">
                                                <div class="progress-bar bg-warning" role="progressbar" style="width: 65%" aria-valuenow="65" aria-valuemin="0" aria-valuemax="100"></div>
                                            </div>
                                        </div>
                                        <div class="mb-0">
                                            <div class="d-flex justify-content-between mb-1">
                                                <p class="mb-0">Operating Systems</p>
                                                <p class="mb-0 fw-bold">60%</p>
                                            </div>
                                            <div class="progress mb-2">
                                                <div class="progress-bar bg-danger" role="progressbar" style="width: 60%" aria-valuenow="60" aria-valuemin="0" aria-valuemax="100"></div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="card mb-4">
                                    <div class="card-body">
                                        <h5 class="card-title"><i class="fas fa-chart-line me-2"></i>Performance Trends</h5>
                                        <div class="text-center mt-4">
                                            <img src="/api/placeholder/400/250" alt="Performance Graph placeholder" class="img-fluid rounded">
                                            <p class="text-muted mt-3">Performance across last 5 exams</p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Exam Rules & Camera Permission Modal -->
    <div class="modal fade" id="examRulesModal" tabindex="-1" aria-labelledby="examRulesModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="examRulesModalLabel"><i class="fas fa-clipboard-list me-2"></i>Exam Rules & Permissions</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="p-2 mb-3 rounded" style="background-color: rgba(79, 70, 229, 0.1); border-left: 3px solid var(--primary);">
                        <p class="mb-0"><i class="fas fa-info-circle me-2"></i>Please read the rules carefully before proceeding.</p>
                    </div>
                    
                    <p class="mb-2"><strong><i class="fas fa-gavel me-2"></i>Rules for Examination:</strong></p>
                    <ul class="mb-4">
                        <li class="mb-2"><i class="fas fa-user-check me-2"></i>Ensure you are alone in the room.</li>
                        <li class="mb-2"><i class="fas fa-window-restore me-2"></i>Do not navigate away from the exam window.</li>
                        <li class="mb-2"><i class="fas fa-video me-2"></i>Keep your camera on at all times.</li>
                        <li><i class="fas fa-exclamation-triangle me-2"></i>Any suspicious activity may result in disqualification.</li>
                    </ul>
                    
                    <p class="mb-2"><strong><i class="fas fa-camera me-2"></i>Camera Access:</strong></p>
                    <p>We need to turn on your camera for proctoring. Click "Enable Camera" when prompted.</p>
                    
                    <div class="d-grid">
                        <button id="requestCamera" class="btn btn-secondary">
                            <i class="fas fa-camera me-2"></i>Enable Camera
                        </button>
                    </div>
                    
                    <div id="cameraStatus" class="mt-3 text-center"></div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" data-bs-dismiss="modal">
                        <i class="fas fa-times me-2"></i>Cancel
                    </button>
                    <button id="confirmStartTest" class="btn btn-primary" disabled>
                        <i class="fas fa-play me-2"></i>Start Test
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Contact Instructor Modal -->
    <div class="modal fade" id="contactInstructorModal" tabindex="-1" aria-labelledby="contactInstructorModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="contactInstructorModalLabel"><i class="fas fa-envelope me-2"></i>Contact Instructor</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="p-2 mb-4 rounded" style="background-color: rgba(245, 158, 11, 0.1); border-left: 3px solid var(--warning);">
                        <p class="mb-0"><i class="fas fa-exclamation-circle me-2"></i>You are contacting your instructor about a missed exam.</p>
                    </div>
                    
                    <form id="contactInstructorForm">
                        <div class="form-group mb-3">
                            <label for="subject" class="form-label"><i class="fas fa-heading me-2"></i>Subject</label>
                            <input type="text" class="form-control" id="subject" placeholder="Regarding missed exam" value="Regarding missed exam">
                        </div>
                        <div class="form-group mb-2">
                            <label for="message" class="form-label"><i class="fas fa-comment-alt me-2"></i>Message</label>
                            <textarea class="form-control" id="message" rows="5" placeholder="Explain your reason for missing the exam..."></textarea>
                            <small class="text-muted">Please provide a detailed explanation of why you were unable to take the exam.</small>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                        <i class="fas fa-times me-2"></i>Cancel
                    </button>
                    <button type="button" class="btn btn-primary" id="sendMessageBtn">
                        <i class="fas fa-paper-plane me-2"></i>Send Message
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Hidden video elements for camera -->
    <video id="video" autoplay></video>
    <canvas id="canvas"></canvas>

    <footer class="text-center py-3 mt-5">
        <div class="container">
            <div class="row align-items-center">
                <div class="col-md-4 text-md-start mb-3 mb-md-0">
                    <div class="logo-section" style="justify-content: center;">
                        <img src="uploads/unnamed-removebg-preview.png" alt="Logo" width="24" height="24">
                        <h1 style="font-size: 1.2rem;">PrepZer0</h1>
                    </div>
                </div>
                <div class="col-md-4 mb-3 mb-md-0">
                    <p class="mb-0">© 2025 PrepZer0 | Academic Assessment Platform</p>
                </div>
                <div class="col-md-4 text-md-end">
                    <a href="#" class="text-decoration-none me-3" style="color: var(--light-text);"><i class="fas fa-question-circle"></i> Help</a>
                    <a href="#" class="text-decoration-none" style="color: var(--light-text);"><i class="fas fa-shield-alt"></i> Privacy</a>
                </div>
            </div>
        </div>
    </footer>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        let selectedExamId = null;
        let examWindowRef = null;
        let checkInterval = null;

        // Reset UI state on page load
        function resetUIState() {
            // Reset all start test buttons
            document.querySelectorAll('.start-test-btn').forEach(button => {
                button.innerHTML = '<i class="fas fa-play"></i> Start Test';
                button.disabled = false;
                button.classList.remove('disabled');
            });

            // Reset modal state
            document.getElementById('requestCamera').innerHTML = '<i class="fas fa-camera me-2"></i>Enable Camera';
            document.getElementById('requestCamera').disabled = false;
            document.getElementById('requestCamera').classList.remove('d-none');
            document.getElementById('confirmStartTest').disabled = true;
            document.getElementById('cameraStatus').innerHTML = '';

            // Clear any stored exam session data
            localStorage.removeItem('currentExamId');
            sessionStorage.removeItem('examInProgress');
        }

        // Check if user returned from exam
        function checkForExamReturn() {
            const urlParams = new URLSearchParams(window.location.search);
            const examCompleted = urlParams.get('examCompleted');
            const examId = urlParams.get('examId');
            
            if (examCompleted === 'true' && examId) {
                // Show refresh overlay
                showRefreshOverlay();
                
                // Clear URL parameters
                const newUrl = window.location.pathname;
                window.history.replaceState({}, document.title, newUrl);
                
                // Refresh the page after a short delay
                setTimeout(() => {
                    window.location.reload();
                }, 1500);
            }
        }

        // Show refresh overlay
        function showRefreshOverlay() {
            const overlay = document.getElementById('refreshOverlay');
            overlay.classList.add('show');
        }

        // Hide refresh overlay
        function hideRefreshOverlay() {
            const overlay = document.getElementById('refreshOverlay');
            overlay.classList.remove('show');
        }

        // Monitor exam window
        function monitorExamWindow() {
            if (!examWindowRef || examWindowRef.closed) {
                if (checkInterval) {
                    clearInterval(checkInterval);
                    checkInterval = null;
                }
                
                // Show refresh overlay and reload page
                showRefreshOverlay();
                setTimeout(() => {
                    window.location.reload();
                }, 1000);
                
                return;
            }
        }

        // Page visibility change handler
        document.addEventListener('visibilitychange', function() {
            if (!document.hidden) {
                // Page became visible again, check if we need to refresh
                const examInProgress = sessionStorage.getItem('examInProgress');
                if (examInProgress === 'true') {
                    // User might have returned from exam, refresh the page
                    showRefreshOverlay();
                    setTimeout(() => {
                        window.location.reload();
                    }, 1000);
                }
            }
        });

        // Window focus handler
        window.addEventListener('focus', function() {
            const examInProgress = sessionStorage.getItem('examInProgress');
            if (examInProgress === 'true') {
                // Check if exam window is still open
                if (!examWindowRef || examWindowRef.closed) {
                    sessionStorage.removeItem('examInProgress');
                    showRefreshOverlay();
                    setTimeout(() => {
                        window.location.reload();
                    }, 1000);
                }
            }
        });

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            resetUIState();
            checkForExamReturn();
        });

        // Add smooth scroll behavior
        document.querySelectorAll('a[href^="#"]').forEach(anchor => {
            anchor.addEventListener('click', function (e) {
                e.preventDefault();
                document.querySelector(this.getAttribute('href')).scrollIntoView({
                    behavior: 'smooth'
                });
            });
        });

        // Card hover animation enhancement
        document.querySelectorAll('.card').forEach(card => {
            card.addEventListener('mouseenter', function() {
                this.style.transform = 'translateY(-8px)';
                this.style.boxShadow = '0 15px 30px rgba(0, 0, 0, 0.3)';
            });
            
            card.addEventListener('mouseleave', function() {
                this.style.transform = 'translateY(0)';
                this.style.boxShadow = '0 4px 20px rgba(0, 0, 0, 0.25)';
            });
        });

        // Open Modal on "Start Test" button click with animation
        document.querySelectorAll('.start-test-btn').forEach(button => {
            button.addEventListener('click', function() {
                // Prevent multiple clicks
                if (this.disabled) return;
                
                // Add a small animation to the button when clicked
                this.classList.add('animate__animated', 'animate__pulse');
                setTimeout(() => {
                    this.classList.remove('animate__animated', 'animate__pulse');
                }, 500);
                
                selectedExamId = this.getAttribute('data-exam-id'); 
                selectedExamCam = this.getAttribute('data-exam-cam');
              
                if(selectedExamCam === 'true') {
                    let myModal = new bootstrap.Modal(document.getElementById('examRulesModal'));
                myModal.show();
                } else {
                                    setTimeout(() => {
                    // Open in new tab and keep reference
                    examWindowRef = window.open(`/dashboard/start-test/${selectedExamId}`, '_blank');
                    
                    // Start monitoring the exam window
                    checkInterval = setInterval(monitorExamWindow, 1000);
                    
                    // Reset this button state after opening
                    this.innerHTML = '<i class="fas fa-play me-2"></i>Start Test';
                    this.disabled = true; // Keep disabled until refresh
                }, 500);
                }
                
            });
        });

        // Open Contact Instructor Modal
        document.querySelectorAll('.contact-instructor-btn').forEach(button => {
            button.addEventListener('click', function() {
                selectedExamId = this.getAttribute('data-exam-id');
                let contactModal = new bootstrap.Modal(document.getElementById('contactInstructorModal'));
                contactModal.show();
            });
        });

        // Handle Camera Permission Request
        document.getElementById('requestCamera').addEventListener('click', async function() {
            // Add loading state to button
            this.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Requesting access...';
            this.disabled = true;
            
            try {
                const stream = await navigator.mediaDevices.getUserMedia({ video: true });
                document.getElementById('cameraStatus').innerHTML = '<div class="alert alert-success mb-0"><i class="fas fa-check-circle me-2"></i>Camera access granted!</div>';
                document.getElementById('confirmStartTest').removeAttribute('disabled');
                this.classList.add('d-none');
                
                // Stop the stream immediately as we just needed permission
                stream.getTracks().forEach(track => track.stop());
            } catch (error) {
                document.getElementById('cameraStatus').innerHTML = '<div class="alert alert-danger mb-0"><i class="fas fa-times-circle me-2"></i>Camera access denied. You must allow it to proceed.</div>';
                this.innerHTML = '<i class="fas fa-camera me-2"></i>Try Again';
                this.disabled = false;
            }
        });

        // Start the test when confirmed
        document.getElementById('confirmStartTest').addEventListener('click', function() {
            if (selectedExamId) {
                // Add loading state
                this.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Loading...';
                this.disabled = true;
                
                // Mark exam as in progress
                sessionStorage.setItem('examInProgress', 'true');
                localStorage.setItem('currentExamId', selectedExamId);
                
                // Find and update the corresponding start test button
                const startButton = document.querySelector(`[data-exam-id="${selectedExamId}"]`);
                if (startButton) {
                    startButton.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>In Progress...';
                    startButton.disabled = true;
                }
                
                // Close modal
                const modal = bootstrap.Modal.getInstance(document.getElementById('examRulesModal'));
                modal.hide();
                
                // Redirect after a slight delay for better UX
                setTimeout(() => {
                    // Open in new tab and keep reference
                    examWindowRef = window.open(`/dashboard/start-test/${selectedExamId}`, '_blank');
                    
                    // Start monitoring the exam window
                    checkInterval = setInterval(monitorExamWindow, 1000);
                    
                    // Reset this button state after opening
                    this.innerHTML = '<i class="fas fa-play me-2"></i>Start Test';
                    this.disabled = true; // Keep disabled until refresh
                }, 500);
            }
        });

        // Send message to instructor
        document.getElementById('sendMessageBtn').addEventListener('click', function() {
            const subject = document.getElementById('subject').value;
            const message = document.getElementById('message').value;
            
            if (!message.trim()) {
                // Show validation error
                document.getElementById('message').classList.add('is-invalid');
                const invalidFeedback = document.createElement('div');
                invalidFeedback.classList.add('invalid-feedback');
                invalidFeedback.innerText = 'Please enter a message.';
                document.getElementById('message').parentNode.appendChild(invalidFeedback);
                return;
            }
            
            // Add loading state
            this.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Sending...';
            this.disabled = true;
            
            // Here you would add code to send the message to the backend
            setTimeout(() => {
                // Show success message
                const modalBody = document.querySelector('#contactInstructorModal .modal-body');
                const form = document.getElementById('contactInstructorForm');
                form.style.display = 'none';
                
                const successMessage = document.createElement('div');
                successMessage.classList.add('alert', 'alert-success', 'mb-0');
                successMessage.innerHTML = '<i class="fas fa-check-circle me-2"></i>Message sent successfully! Your instructor will get back to you soon.';
                modalBody.appendChild(successMessage);
                
                document.querySelector('#contactInstructorModal .modal-footer').innerHTML = 
                    '<button type="button" class="btn btn-primary" data-bs-dismiss="modal">' +
                    '<i class="fas fa-check me-2"></i>Close</button>';
            }, 1000);
        });

        // Modal event handlers
        document.getElementById('examRulesModal').addEventListener('hidden.bs.modal', function () {
            // Reset modal state when closed
            if (!sessionStorage.getItem('examInProgress')) {
                resetUIState();
            }
        });

        // Reset contact instructor modal on close
        document.getElementById('contactInstructorModal').addEventListener('hidden.bs.modal', function () {
            // Reset form
            document.getElementById('contactInstructorForm').style.display = 'block';
            document.getElementById('subject').value = 'Regarding missed exam';
            document.getElementById('message').value = '';
            document.getElementById('message').classList.remove('is-invalid');
            
            // Remove any invalid feedback
            const invalidFeedback = document.querySelector('.invalid-feedback');
            if (invalidFeedback) {
                invalidFeedback.remove();
            }
            
            // Reset button
            document.getElementById('sendMessageBtn').innerHTML = '<i class="fas fa-paper-plane me-2"></i>Send Message';
            document.getElementById('sendMessageBtn').disabled = false;
            
            // Reset footer
            document.querySelector('#contactInstructorModal .modal-footer').innerHTML = 
                '<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">' +
                '<i class="fas fa-times me-2"></i>Cancel</button>' +
                '<button type="button" class="btn btn-primary" id="sendMessageBtn">' +
                '<i class="fas fa-paper-plane me-2"></i>Send Message</button>';
            
            // Re-bind the send message event
            document.getElementById('sendMessageBtn').addEventListener('click', arguments.callee.sendMessage);
        });
        
        // Initialize any tooltips
        const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
        const tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl);
        });

        // Auto-refresh detection for completed exams
        setInterval(() => {
            const examInProgress = sessionStorage.getItem('examInProgress');
            if (examInProgress === 'true') {
                // Check if exam window is closed
                if (!examWindowRef || examWindowRef.closed) {
                    sessionStorage.removeItem('examInProgress');
                    localStorage.removeItem('currentExamId');
                    
                    showRefreshOverlay();
                    setTimeout(() => {
                        window.location.reload();
                    }, 1500);
                }
            }
        }, 2000);
    </script>
</body>
</html>