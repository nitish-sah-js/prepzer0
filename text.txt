const { S3Client, PutObjectCommand } = require('@aws-sdk/client-s3');
const fs = require('fs');
const path = require('path');

const s3 = new S3Client({
  region: 'us-east-1',
  credentials: {
    accessKeyId: process.env.AWS_ACCESS_KEY_ID || '',
    secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY || ''
  }
});

async function uploadProfileImage(localFilePath, filename) {
  const fileStream = fs.createReadStream(localFilePath);

  const uploadParams = {
    Bucket: 'prepzer0testbucket',
    Key: `profile/${filename}`,
    Body: fileStream,
    ContentType: 'image/jpeg', // or infer type dynamically
    
  };

  await s3.send(new PutObjectCommand(uploadParams));

  return `https://prepzer0testbucket.s3.amazonaws.com/profile/${filename}`;
}

module.exports = { uploadProfileImage };
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Create Coding Question</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <style>
    :root {
      --primary: #667eea;
      --primary-hover: #5a67d8;
      --secondary: #764ba2;
      --accent: #f093fb;
      --success: #48bb78;
      --warning: #ed8936;
      --danger: #f56565;
      --info: #4299e1;
      
      --bg-primary: #0f172a;
      --bg-secondary: #1e293b;
      --bg-tertiary: #334155;
      --bg-card: #1e293b;
      --bg-input: #334155;
      
      --text-primary: #f8fafc;
      --text-secondary: #cbd5e1;
      --text-muted: #94a3b8;
      
      --border: #475569;
      --border-light: #64748b;
      
      --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
      --shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
      --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
      
      --radius: 0.75rem;
      --radius-sm: 0.5rem;
    }
    
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    
    body {
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
      background: linear-gradient(135deg, var(--bg-primary) 0%, #1a202c 100%);
      color: var(--text-primary);
      min-height: 100vh;
      line-height: 1.6;
    }
    
    /* Header */
    .header {
      background: var(--bg-card);
      backdrop-filter: blur(10px);
      border-bottom: 1px solid var(--border);
      padding: 1.5rem 0;
      margin-bottom: 2rem;
      box-shadow: var(--shadow);
    }
    
    .header-content {
      max-width: 1400px;
      margin: 0 auto;
      padding: 0 2rem;
      display: flex;
      align-items: center;
      justify-content: space-between;
      flex-wrap: wrap;
      gap: 1rem;
    }
    
    .logo-section {
      display: flex;
      align-items: center;
      gap: 1rem;
    }
    
    .logo-section img {
      width: 40px;
      height: 40px;
      border-radius: var(--radius-sm);
    }
    
    .logo-section h1 {
      font-size: 1.75rem;
      font-weight: 700;
      background: linear-gradient(135deg, var(--primary) 0%, var(--accent) 100%);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
    }
    
    .breadcrumb {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      color: var(--text-muted);
      font-size: 0.875rem;
    }
    
    .breadcrumb a {
      color: var(--primary);
      text-decoration: none;
      transition: color 0.2s;
    }
    
    .breadcrumb a:hover {
      color: var(--primary-hover);
    }
    
    /* Main Container */
    .main-container {
      max-width: 1400px;
      margin: 0 auto;
      padding: 0 2rem 3rem;
    }
    
    /* Progress Steps */
    .progress-steps {
      display: flex;
      justify-content: center;
      margin-bottom: 3rem;
      gap: 1rem;
    }
    
    .step {
      display: flex;
      align-items: center;
      gap: 0.75rem;
      padding: 0.75rem 1.5rem;
      background: var(--bg-secondary);
      border: 1px solid var(--border);
      border-radius: var(--radius);
      transition: all 0.3s ease;
    }
    
    .step.active {
      background: linear-gradient(135deg, var(--primary) 0%, var(--secondary) 100%);
      border-color: var(--primary);
      transform: translateY(-2px);
      box-shadow: var(--shadow-lg);
    }
    
    .step.completed {
      background: var(--success);
      border-color: var(--success);
    }
    
    .step-number {
      width: 24px;
      height: 24px;
      border-radius: 50%;
      background: var(--bg-tertiary);
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 0.75rem;
      font-weight: 600;
    }
    
    .step.active .step-number,
    .step.completed .step-number {
      background: rgba(255, 255, 255, 0.2);
    }
    
    /* Cards */
    .card {
      background: var(--bg-card);
      border: 1px solid var(--border);
      border-radius: var(--radius);
      box-shadow: var(--shadow);
      margin-bottom: 2rem;
      overflow: hidden;
      transition: all 0.3s ease;
    }
    
    .card:hover {
      box-shadow: var(--shadow-lg);
      transform: translateY(-2px);
    }
    
    .card-header {
      padding: 2rem;
      background: linear-gradient(135deg, var(--bg-secondary) 0%, var(--bg-tertiary) 100%);
      border-bottom: 1px solid var(--border);
    }
    
    .card-title {
      font-size: 1.5rem;
      font-weight: 600;
      display: flex;
      align-items: center;
      gap: 0.75rem;
      margin: 0;
    }
    
    .card-title .icon {
      width: 32px;
      height: 32px;
      background: linear-gradient(135deg, var(--primary) 0%, var(--accent) 100%);
      border-radius: var(--radius-sm);
      display: flex;
      align-items: center;
      justify-content: center;
    }
    
    .card-body {
      padding: 2rem;
    }
    
    /* Form Elements */
    .form-section {
      margin-bottom: 3rem;
    }
    
    .section-header {
      display: flex;
      align-items: center;
      gap: 1rem;
      margin-bottom: 2rem;
      padding-bottom: 1rem;
      border-bottom: 2px solid var(--border);
    }
    
    .section-icon {
      width: 40px;
      height: 40px;
      background: linear-gradient(135deg, var(--primary) 0%, var(--secondary) 100%);
      border-radius: var(--radius-sm);
      display: flex;
      align-items: center;
      justify-content: center;
    }
    
    .section-title {
      font-size: 1.25rem;
      font-weight: 600;
    }
    
    .form-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 1.5rem;
      margin-bottom: 1.5rem;
    }
    
    .form-group {
      margin-bottom: 1.5rem;
    }
    
    .form-label {
      display: block;
      margin-bottom: 0.5rem;
      font-weight: 500;
      color: var(--text-primary);
      font-size: 0.875rem;
    }
    
    .required::after {
      content: " *";
      color: var(--danger);
    }
    
    .form-control {
      width: 100%;
      padding: 0.875rem 1rem;
      background: var(--bg-input);
      border: 1px solid var(--border);
      border-radius: var(--radius-sm);
      color: var(--text-primary);
      font-size: 0.875rem;
      transition: all 0.2s ease;
    }
    
    .form-control:focus {
      outline: none;
      border-color: var(--primary);
      box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
      background: var(--bg-secondary);
    }
    
    .form-control::placeholder {
      color: var(--text-muted);
    }
    
    textarea.form-control {
      min-height: 120px;
      resize: vertical;
      font-family: 'JetBrains Mono', 'Fira Code', monospace;
    }
    
    select.form-control {
      cursor: pointer;
    }
    
    /* Enhanced Select Styling */
    .enhanced-select {
      position: relative;
    }
    
    .enhanced-select select {
      appearance: none;
      background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='M6 8l4 4 4-4'/%3e%3c/svg%3e");
      background-position: right 0.5rem center;
      background-repeat: no-repeat;
      background-size: 1.5em 1.5em;
      padding-right: 2.5rem;
    }
    
    /* Buttons */
    .btn {
      display: inline-flex;
      align-items: center;
      gap: 0.5rem;
      padding: 0.875rem 1.5rem;
      border: none;
      border-radius: var(--radius-sm);
      font-weight: 500;
      font-size: 0.875rem;
      cursor: pointer;
      transition: all 0.2s ease;
      text-decoration: none;
    }
    
    .btn-primary {
      background: linear-gradient(135deg, var(--primary) 0%, var(--secondary) 100%);
      color: white;
    }
    
    .btn-primary:hover {
      transform: translateY(-2px);
      box-shadow: var(--shadow-lg);
    }
    
    .btn-secondary {
      background: var(--bg-tertiary);
      color: var(--text-primary);
      border: 1px solid var(--border);
    }
    
    .btn-secondary:hover {
      background: var(--border);
    }
    
    .btn-success {
      background: var(--success);
      color: white;
    }
    
    .btn-danger {
      background: var(--danger);
      color: white;
    }
    
    .btn-sm {
      padding: 0.5rem 1rem;
      font-size: 0.8rem;
    }
    
    /* Test Cases */
    .test-cases-container {
      margin-top: 1.5rem;
    }
    
    .test-case {
      background: var(--bg-secondary);
      border: 1px solid var(--border);
      border-radius: var(--radius);
      padding: 1.5rem;
      margin-bottom: 1.5rem;
      position: relative;
      transition: all 0.3s ease;
    }
    
    .test-case:hover {
      border-color: var(--primary);
      box-shadow: 0 0 0 1px rgba(102, 126, 234, 0.1);
    }
    
    .test-case-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 1.5rem;
    }
    
    .test-case-title {
      font-size: 1rem;
      font-weight: 600;
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }
    
    .remove-test-case {
      width: 32px;
      height: 32px;
      border-radius: 50%;
      background: var(--danger);
      color: white;
      border: none;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: all 0.2s ease;
    }
    
    .remove-test-case:hover {
      transform: scale(1.1);
      background: #e53e3e;
    }
    
    /* Starter Code Tabs */
    .starter-code-tabs {
      margin-top: 1.5rem;
    }
    
    .tab-nav {
      display: flex;
      background: var(--bg-secondary);
      border-radius: var(--radius-sm);
      padding: 0.25rem;
      margin-bottom: 1rem;
      overflow-x: auto;
    }
    
    .tab-btn {
      padding: 0.75rem 1rem;
      background: transparent;
      border: none;
      color: var(--text-muted);
      cursor: pointer;
      border-radius: var(--radius-sm);
      transition: all 0.2s ease;
      white-space: nowrap;
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }
    
    .tab-btn.active {
      background: var(--primary);
      color: white;
    }
    
    .tab-content {
      display: none;
    }
    
    .tab-content.active {
      display: block;
    }
    
    /* Info Cards */
    .info-card {
      background: linear-gradient(135deg, rgba(102, 126, 234, 0.1) 0%, rgba(118, 75, 162, 0.1) 100%);
      border: 1px solid rgba(102, 126, 234, 0.2);
      border-radius: var(--radius-sm);
      padding: 1rem;
      margin-bottom: 1rem;
    }
    
    .info-card-header {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      margin-bottom: 0.5rem;
      font-weight: 500;
    }
    
    /* Toggle Switch */
    .toggle-switch {
      display: flex;
      align-items: center;
      gap: 1rem;
      padding: 1rem;
      background: rgba(72, 187, 120, 0.1);
      border: 1px solid rgba(72, 187, 120, 0.2);
      border-radius: var(--radius-sm);
      margin-top: 1rem;
    }
    
    .switch {
      position: relative;
      width: 48px;
      height: 24px;
    }
    
    .switch input {
      opacity: 0;
      width: 0;
      height: 0;
    }
    
    .slider {
      position: absolute;
      cursor: pointer;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: var(--bg-tertiary);
      transition: 0.4s;
      border-radius: 24px;
    }
    
    .slider:before {
      position: absolute;
      content: "";
      height: 18px;
      width: 18px;
      left: 3px;
      bottom: 3px;
      background-color: white;
      transition: 0.4s;
      border-radius: 50%;
    }
    
    input:checked + .slider {
      background-color: var(--success);
    }
    
    input:checked + .slider:before {
      transform: translateX(24px);
    }
    
    /* Success Message */
    .success-alert {
      background: linear-gradient(135deg, rgba(72, 187, 120, 0.1) 0%, rgba(56, 178, 172, 0.1) 100%);
      border: 1px solid var(--success);
      border-radius: var(--radius-sm);
      padding: 1rem;
      margin-bottom: 2rem;
      display: none;
      align-items: center;
      gap: 0.75rem;
    }
    
    /* Form Actions */
    .form-actions {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding-top: 2rem;
      border-top: 1px solid var(--border);
      margin-top: 2rem;
      flex-wrap: wrap;
      gap: 1rem;
    }
    
    /* Responsive Design */
    @media (max-width: 768px) {
      .header-content,
      .main-container {
        padding-left: 1rem;
        padding-right: 1rem;
      }
      
      .progress-steps {
        flex-direction: column;
        align-items: center;
      }
      
      .form-grid {
        grid-template-columns: 1fr;
      }
      
      .form-actions {
        flex-direction: column;
        align-items: stretch;
      }
      
      .form-actions .btn {
        width: 100%;
        justify-content: center;
      }
      
      .tab-nav {
        justify-content: flex-start;
      }
    }
    
    /* Loading State */
    .loading {
      opacity: 0.6;
      pointer-events: none;
    }
    
    .spinner {
      animation: spin 1s linear infinite;
    }
    
    @keyframes spin {
      from { transform: rotate(0deg); }
      to { transform: rotate(360deg); }
    }
    
    /* Error States */
    .error {
      color: var(--danger);
      font-size: 0.8rem;
      margin-top: 0.25rem;
      display: flex;
      align-items: center;
      gap: 0.25rem;
    }
  </style>
</head>
<body>
  <!-- Header -->
  <header class="header">
    <div class="header-content">
      <div class="logo-section">
        <img src="../uploads/unnamed-removebg-preview.png" alt="PrepZer0 Logo">
        <h1>PrepZer0</h1>
      </div>
      <nav class="breadcrumb">
        <a href="/admin/dashboard">Dashboard</a>
        <i class="fas fa-chevron-right"></i>
        <a href="/admin/exams">Exams</a>
        <i class="fas fa-chevron-right"></i>
        <span>Create Coding Question</span>
      </nav>
    </div>
  </header>

  <!-- Main Container -->
  <div class="main-container">
    <!-- Progress Steps -->
    <div class="progress-steps">
      <div class="step active">
        <div class="step-number">1</div>
        <span>Basic Info</span>
      </div>
      <div class="step">
        <div class="step-number">2</div>
        <span>Problem Details</span>
      </div>
      <div class="step">
        <div class="step-number">3</div>
        <span>Test Cases</span>
      </div>
      <div class="step">
        <div class="step-number">4</div>
        <span>Review</span>
      </div>
    </div>

    <!-- Success Message -->
    <div id="successAlert" class="success-alert">
      <i class="fas fa-check-circle"></i>
      <span>Coding question created successfully!</span>
    </div>

    <!-- Main Form -->
    <form id="codingQuestionForm" action="/admin/exam/<%= examId %>/add/coding" method="POST">
      
      <!-- Step 1: Basic Information -->
      <div class="card" id="step1">
        <div class="card-header">
          <h2 class="card-title">
            <div class="icon">
              <i class="fas fa-info-circle"></i>
            </div>
            Basic Information
          </h2>
        </div>
        <div class="card-body">
          <div class="form-grid">
            <div class="form-group">
              <label for="questionTitle" class="form-label required">Question Title</label>
              <input type="text" id="questionTitle" name="questionTile" class="form-control" 
                     placeholder="e.g., Two Sum Problem" required>
            </div>
            <div class="form-group">
              <label for="maxMarks" class="form-label required">Maximum Points</label>
              <input type="number" id="maxMarks" name="maxMarks" class="form-control" 
                     min="1" max="100" placeholder="e.g., 100" required>
            </div>
          </div>
          
          <div class="form-grid">
            <div class="form-group">
              <label for="level" class="form-label required">Difficulty Level</label>
              <div class="enhanced-select">
                <select id="level" name="level" class="form-control" required>
                  <option value="">Choose difficulty level</option>
                  <option value="easy">🟢 Easy - Basic algorithms</option>
                  <option value="medium">🟡 Medium - Intermediate problem solving</option>
                  <option value="hard">🔴 Hard - Advanced algorithms</option>
                </select>
              </div>
            </div>
            <div class="form-group">
              <label for="classification" class="form-label required">Topic Category</label>
              <div class="enhanced-select">
                <select id="classification" name="classification" class="form-control" required>
                  <option value="">Select topic category</option>
                  <option value="Arrays">📊 Arrays & Lists</option>
                  <option value="Strings">📝 String Processing</option>
                  <option value="Linked Lists">🔗 Linked Lists</option>
                  <option value="Stacks">📚 Stacks & Queues</option>
                  <option value="Trees">🌳 Trees & Graphs</option>
                  <option value="Recursion">🔄 Recursion</option>
                  <option value="Dynamic Programming">⚡ Dynamic Programming</option>
                  <option value="Sorting">📈 Sorting & Searching</option>
                  <option value="Hashing">🔑 Hash Tables</option>
                  <option value="Greedy Algorithms">🎯 Greedy Algorithms</option>
                  <option value="Math">🧮 Mathematical</option>
                  <option value="SQL">🗄️ Database (SQL)</option>
                </select>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Step 2: Problem Details -->
      <div class="card" id="step2">
        <div class="card-header">
          <h2 class="card-title">
            <div class="icon">
              <i class="fas fa-file-text"></i>
            </div>
            Problem Statement
          </h2>
        </div>
        <div class="card-body">
          <div class="form-group">
            <label for="questionText" class="form-label required">Problem Description</label>
            <textarea id="questionText" name="questiontext" class="form-control" 
                      placeholder="Clearly describe the problem that needs to be solved..." required></textarea>
            <div class="info-card">
              <div class="info-card-header">
                <i class="fas fa-lightbulb"></i>
                Tip
              </div>
              <p>Write a clear, concise problem statement. Include what the function should do, but avoid implementation details.</p>
            </div>
          </div>
          
          <div class="form-grid">
            <div class="form-group">
              <label for="inputFormat" class="form-label">Input Format</label>
              <textarea id="inputFormat" name="inputFormat" class="form-control" 
                        placeholder="Describe the input format and constraints..."></textarea>
            </div>
            <div class="form-group">
              <label for="outputFormat" class="form-label">Output Format</label>
              <textarea id="outputFormat" name="outputFormat" class="form-control" 
                        placeholder="Describe the expected output format..."></textarea>
            </div>
          </div>
          
          <div class="form-group">
            <label for="constraints" class="form-label">Constraints</label>
            <textarea id="constraints" name="constraits" class="form-control" 
                      placeholder="e.g., 1 ≤ n ≤ 10^5, -10^9 ≤ arr[i] ≤ 10^9"></textarea>
          </div>
          
          <!-- Sample Example -->
          <div class="form-section">
            <div class="section-header">
              <div class="section-icon">
                <i class="fas fa-play"></i>
              </div>
              <div class="section-title">Sample Example</div>
            </div>
            
            <div class="form-grid">
              <div class="form-group">
                <label for="sampleInput" class="form-label required">Sample Input</label>
                <textarea id="sampleInput" name="sampleInput" class="form-control" 
                          placeholder="Provide a clear example input..." required></textarea>
              </div>
              <div class="form-group">
                <label for="sampleOutput" class="form-label required">Expected Output</label>
                <textarea id="sampleOutput" name="sampleOutput" class="form-control" 
                          placeholder="Show the expected output for the sample input..." required></textarea>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Step 3: Starter Code -->
      <div class="card" id="step3">
        <div class="card-header">
          <h2 class="card-title">
            <div class="icon">
              <i class="fas fa-code"></i>
            </div>
            Starter Code Templates
          </h2>
        </div>
        <div class="card-body">
          <div class="info-card">
            <div class="info-card-header">
              <i class="fas fa-info-circle"></i>
              About Starter Code
            </div>
            <p>Provide function signatures and basic structure to help students get started. Leave implementation details for them to complete.</p>
          </div>
          
          <div class="starter-code-tabs">
            <div class="tab-nav">
              <button type="button" class="tab-btn active" data-lang="cpp">
                <i class="fab fa-cuttlefish"></i> C++
              </button>
              <button type="button" class="tab-btn" data-lang="java">
                <i class="fab fa-java"></i> Java
              </button>
              <button type="button" class="tab-btn" data-lang="python">
                <i class="fab fa-python"></i> Python
              </button>
              <button type="button" class="tab-btn" data-lang="javascript">
                <i class="fab fa-js-square"></i> JavaScript
              </button>
              <button type="button" class="tab-btn" data-lang="c">
                <i class="fas fa-code"></i> C
              </button>
              <button type="button" class="tab-btn" data-lang="csharp">
                <i class="fab fa-microsoft"></i> C#
              </button>
            </div>
            
            <div class="tab-content active" data-lang="cpp">
              <div class="form-group">
                <label for="cppCode" class="form-label">C++ Starter Code</label>
                <textarea id="cppCode" name="starterCode_cpp" class="form-control" 
                          placeholder="class Solution {
public:
    // Your function signature here
    int solve(vector<int>& nums) {
        // TODO: Implement your solution
        return 0;
    }
};"></textarea>
              </div>
            </div>
            
            <div class="tab-content" data-lang="java">
              <div class="form-group">
                <label for="javaCode" class="form-label">Java Starter Code</label>
                <textarea id="javaCode" name="starterCode_java" class="form-control" 
                          placeholder="class Solution {
    public int solve(int[] nums) {
        // TODO: Implement your solution
        return 0;
    }
}"></textarea>
              </div>
            </div>
            
            <div class="tab-content" data-lang="python">
              <div class="form-group">
                <label for="pythonCode" class="form-label">Python Starter Code</label>
                <textarea id="pythonCode" name="starterCode_python" class="form-control" 
                          placeholder="class Solution:
    def solve(self, nums: List[int]) -> int:
        # TODO: Implement your solution
        pass"></textarea>
              </div>
            </div>
            
            <div class="tab-content" data-lang="javascript">
              <div class="form-group">
                <label for="jsCode" class="form-label">JavaScript Starter Code</label>
                <textarea id="jsCode" name="starterCode_javascript" class="form-control" 
                          placeholder="/**
 * @param {number[]} nums
 * @return {number}
 */
function solve(nums) {
    // TODO: Implement your solution
    return 0;
}"></textarea>
              </div>
            </div>
            
            <div class="tab-content" data-lang="c">
              <div class="form-group">
                <label for="cCode" class="form-label">C Starter Code</label>
                <textarea id="cCode" name="starterCode_c" class="form-control" 
                          placeholder="#include <stdio.h>
#include <stdlib.h>

int solve(int* nums, int numsSize) {
    // TODO: Implement your solution
    return 0;
}"></textarea>
              </div>
            </div>
            
            <div class="tab-content" data-lang="csharp">
              <div class="form-group">
                <label for="csharpCode" class="form-label">C# Starter Code</label>
                <textarea id="csharpCode" name="starterCode_csharp" class="form-control" 
                          placeholder="public class Solution {
    public int Solve(int[] nums) {
        // TODO: Implement your solution
        return 0;
    }
}"></textarea>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Step 4: Test Cases -->
      <div class="card" id="step4">
        <div class="card-header">
          <h2 class="card-title">
            <div class="icon">
              <i class="fas fa-flask"></i>
            </div>
            Test Cases
          </h2>
        </div>
        <div class="card-body">
          <div class="info-card">
            <div class="info-card-header">
              <i class="fas fa-info-circle"></i>
              Test Case Guidelines
            </div>
            <p>Create comprehensive test cases including edge cases. At least one should be visible to students as an example.</p>
          </div>
          
          <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1.5rem;">
            <h3 style="margin: 0; font-size: 1.1rem;">Test Cases</h3>
            <button type="button" id="addTestCase" class="btn btn-secondary btn-sm">
              <i class="fas fa-plus"></i>
              Add Test Case
            </button>
          </div>
          
          <div id="testCasesContainer" class="test-cases-container">
            <!-- Test cases will be added here dynamically -->
          </div>
        </div>
      </div>

      <!-- Form Actions -->
      <div class="form-actions">
        <button type="button" id="clearForm" class="btn btn-danger">
          <i class="fas fa-trash-alt"></i>
          Clear Form
        </button>
        <div style="display: flex; gap: 1rem;">
          <button type="button" id="saveAsDraft" class="btn btn-secondary">
            <i class="fas fa-save"></i>
            Save as Draft
          </button>
          <button type="submit" id="submitBtn" class="btn btn-primary">
            <i class="fas fa-paper-plane"></i>
            Create Question
          </button>
        </div>
      </div>
    </form>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Global variables
      let testCaseCount = 0;
      const form = document.getElementById('codingQuestionForm');
      const testCasesContainer = document.getElementById('testCasesContainer');
      const addTestCaseBtn = document.getElementById('addTestCase');
      const clearFormBtn = document.getElementById('clearForm');
      const submitBtn = document.getElementById('submitBtn');
      const saveAsDraftBtn = document.getElementById('saveAsDraft');
      const successAlert = document.getElementById('successAlert');

      // Initialize with one test case
      addTestCase();

      // Tab switching functionality
      function initTabs() {
        const tabBtns = document.querySelectorAll('.tab-btn');
        const tabContents = document.querySelectorAll('.tab-content');

        tabBtns.forEach(btn => {
          btn.addEventListener('click', () => {
            const targetLang = btn.getAttribute('data-lang');
            
            // Remove active class from all tabs and contents
            tabBtns.forEach(b => b.classList.remove('active'));
            tabContents.forEach(c => c.classList.remove('active'));
            
            // Add active class to clicked tab and corresponding content
            btn.classList.add('active');
            document.querySelector(`.tab-content[data-lang="${targetLang}"]`).classList.add('active');
          });
        });
      }

      // Add test case function
      function addTestCase() {
        testCaseCount++;
        
        const testCaseHTML = `
          <div class="test-case" data-id="${testCaseCount}">
            <div class="test-case-header">
              <h4 class="test-case-title">
                <i class="fas fa-vial"></i>
                Test Case ${testCaseCount}
              </h4>
              <button type="button" class="remove-test-case" onclick="removeTestCase(${testCaseCount})" title="Remove this test case">
                <i class="fas fa-times"></i>
              </button>
            </div>
            
            <div class="form-grid">
              <div class="form-group">
                <label for="testInput${testCaseCount}" class="form-label required">Input</label>
                <textarea id="testInput${testCaseCount}" name="testCases[${testCaseCount-1}][input]" 
                          class="form-control" placeholder="Enter test input data..." required></textarea>
              </div>
              <div class="form-group">
                <label for="expectedOutput${testCaseCount}" class="form-label required">Expected Output</label>
                <textarea id="expectedOutput${testCaseCount}" name="testCases[${testCaseCount-1}][expectedOutput]" 
                          class="form-control" placeholder="Enter expected output..." required></textarea>
              </div>
            </div>
            
            <div class="form-grid">
              <div class="form-group">
                <label for="timeout${testCaseCount}" class="form-label">Time Limit (seconds)</label>
                <input type="number" id="timeout${testCaseCount}" name="testCases[${testCaseCount-1}][timeout]" 
                       class="form-control" value="2" min="1" max="30" placeholder="2">
              </div>
              <div class="form-group">
                <label for="memoryLimit${testCaseCount}" class="form-label">Memory Limit (MB)</label>
                <input type="number" id="memoryLimit${testCaseCount}" name="testCases[${testCaseCount-1}][memoryLimit]" 
                       class="form-control" value="256" min="64" max="1024" placeholder="256">
              </div>
            </div>
            
            <div class="toggle-switch">
              <label class="switch">
                <input type="checkbox" id="isPublic${testCaseCount}" name="testCases[${testCaseCount-1}][isPublic]" value="true">
                <span class="slider"></span>
              </label>
              <label for="isPublic${testCaseCount}" style="cursor: pointer;">
                <i class="fas fa-eye"></i>
                Make this test case visible to students
              </label>
            </div>
          </div>
        `;
        
        testCasesContainer.insertAdjacentHTML('beforeend', testCaseHTML);
        
        // Add animation
        const newTestCase = testCasesContainer.lastElementChild;
        newTestCase.style.opacity = '0';
        newTestCase.style.transform = 'translateY(20px)';
        requestAnimationFrame(() => {
          newTestCase.style.transition = 'all 0.3s ease';
          newTestCase.style.opacity = '1';
          newTestCase.style.transform = 'translateY(0)';
        });
      }

      // Remove test case function
      window.removeTestCase = function(id) {
        const testCase = document.querySelector(`.test-case[data-id="${id}"]`);
        if (testCase && testCasesContainer.children.length > 1) {
          testCase.style.transition = 'all 0.3s ease';
          testCase.style.opacity = '0';
          testCase.style.transform = 'translateX(-100%)';
          
          setTimeout(() => {
            testCase.remove();
            updateTestCaseIndices();
          }, 300);
        } else if (testCasesContainer.children.length === 1) {
          alert('At least one test case is required.');
        }
      };

      // Update test case indices after removal
      function updateTestCaseIndices() {
        const testCases = testCasesContainer.querySelectorAll('.test-case');
        testCases.forEach((testCase, index) => {
          // Update data-id
          testCase.setAttribute('data-id', index + 1);
          
          // Update title
          const title = testCase.querySelector('.test-case-title');
          title.innerHTML = `<i class="fas fa-vial"></i> Test Case ${index + 1}`;
          
          // Update form field names
          const inputs = testCase.querySelectorAll('input, textarea');
          inputs.forEach(input => {
            const name = input.getAttribute('name');
            if (name && name.includes('testCases[')) {
              const newName = name.replace(/testCases\[\d+\]/, `testCases[${index}]`);
              input.setAttribute('name', newName);
            }
          });
          
          // Update remove button onclick
          const removeBtn = testCase.querySelector('.remove-test-case');
          removeBtn.setAttribute('onclick', `removeTestCase(${index + 1})`);
        });
        
        // Update global counter
        testCaseCount = testCases.length;
      }

      // Progress tracking
      function updateProgress() {
        const steps = document.querySelectorAll('.step');
        const form = document.getElementById('codingQuestionForm');
        const formData = new FormData(form);
        
        // Step 1: Basic Info
        const hasBasicInfo = formData.get('questionTile') && formData.get('maxMarks') && 
                            formData.get('level') && formData.get('classification');
        
        // Step 2: Problem Details  
        const hasProblemDetails = formData.get('questiontext') && formData.get('sampleInput') && 
                                 formData.get('sampleOutput');
        
        // Step 3: Test Cases
        const hasTestCases = testCasesContainer.children.length > 0;
        
        // Update step states
        steps[0].classList.toggle('completed', hasBasicInfo);
        steps[1].classList.toggle('completed', hasProblemDetails);
        steps[2].classList.toggle('completed', hasTestCases);
        
        if (hasBasicInfo && hasProblemDetails && hasTestCases) {
          steps[3].classList.add('completed');
        }
      }

      // Auto-resize textareas
      function autoResizeTextarea(textarea) {
        textarea.style.height = 'auto';
        textarea.style.height = (textarea.scrollHeight) + 'px';
      }

      // Form validation
      function validateForm() {
        const requiredFields = form.querySelectorAll('[required]');
        let isValid = true;
        
        // Remove existing error messages
        document.querySelectorAll('.error').forEach(error => error.remove());
        
        requiredFields.forEach(field => {
          if (!field.value.trim()) {
            isValid = false;
            
            const errorElement = document.createElement('div');
            errorElement.className = 'error';
            errorElement.innerHTML = '<i class="fas fa-exclamation-circle"></i> This field is required';
            field.parentNode.appendChild(errorElement);
          }
        });
        
        // Validate test cases
        if (testCasesContainer.children.length === 0) {
          isValid = false;
          const errorElement = document.createElement('div');
          errorElement.className = 'error';
          errorElement.innerHTML = '<i class="fas fa-exclamation-circle"></i> At least one test case is required';
          testCasesContainer.parentNode.appendChild(errorElement);
        }
        
        return isValid;
      }

      // Show success message
      function showSuccess(message) {
        successAlert.querySelector('span').textContent = message;
        successAlert.style.display = 'flex';
        successAlert.scrollIntoView({ behavior: 'smooth', block: 'center' });
        
        setTimeout(() => {
          successAlert.style.display = 'none';
        }, 5000);
      }

      // Event listeners
      addTestCaseBtn.addEventListener('click', addTestCase);
      
      clearFormBtn.addEventListener('click', () => {
        if (confirm('Are you sure you want to clear all form data? This action cannot be undone.')) {
          form.reset();
          testCasesContainer.innerHTML = '';
          testCaseCount = 0;
          addTestCase();
          updateProgress();
        }
      });

      saveAsDraftBtn.addEventListener('click', () => {
        // Here you could implement draft saving logic
        showSuccess('Draft saved successfully!');
      });

      form.addEventListener('submit', (e) => {
        if (!validateForm()) {
          e.preventDefault();
          const firstError = document.querySelector('.error');
          if (firstError) {
            firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
          }
          return;
        }

        // Show loading state
        submitBtn.innerHTML = '<i class="fas fa-spinner spinner"></i> Creating Question...';
        submitBtn.disabled = true;
        form.classList.add('loading');
      });

      // Real-time validation and progress updates
      form.addEventListener('input', (e) => {
        updateProgress();
        
        // Auto-resize textareas
        if (e.target.tagName === 'TEXTAREA') {
          autoResizeTextarea(e.target);
        }
        
        // Remove error messages on input
        if (e.target.hasAttribute('required')) {
          const errorMsg = e.target.parentNode.querySelector('.error');
          if (e.target.value.trim() && errorMsg) {
            errorMsg.remove();
          }
        }
      });

      // Initialize tabs
      initTabs();
      
      // Initialize textarea auto-resize
      document.querySelectorAll('textarea').forEach(autoResizeTextarea);
      
      // Initial progress update
      updateProgress();

      // Add helpful tooltips and guidance
      const difficultySelect = document.getElementById('level');
      difficultySelect.addEventListener('change', () => {
        const tooltips = {
          'easy': 'Basic problems suitable for beginners. Focus on fundamental concepts.',
          'medium': 'Intermediate problems requiring some algorithmic thinking.',
          'hard': 'Advanced problems requiring optimization and complex algorithms.'
        };
        
        if (tooltips[difficultySelect.value]) {
          console.log('💡', tooltips[difficultySelect.value]);
        }
      });

      // Keyboard shortcuts
      document.addEventListener('keydown', (e) => {
        // Ctrl/Cmd + S to save as draft
        if ((e.ctrlKey || e.metaKey) && e.key === 's') {
          e.preventDefault();
          saveAsDraftBtn.click();
        }
        
        // Ctrl/Cmd + Enter to submit
        if ((e.ctrlKey || e.metaKey) && e.key === 'Enter') {
          e.preventDefault();
          if (!form.classList.contains('loading')) {
            form.requestSubmit();
          }
        }
      });
    });
  </script>
</body>
</html>