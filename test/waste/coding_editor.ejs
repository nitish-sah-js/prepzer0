<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Coding Assessment Platform</title>
    <style>
        :root {
            --transition-speed: 0.3s;
            --border-radius: 8px;
        }
        
        /* Theme variables */
        body.light-theme {
            --bg-color: #f8f9fa;
            --text-color: #212529;
            --panel-bg: #ffffff;
            --panel-shadow: rgba(0,0,0,0.08);
            --border-color: #dee2e6;
            --tab-bg: #f1f3f5;
            --tab-active-border: #4CAF50;
            --test-case-bg: #f8f9fa;
            --test-io-bg: #f1f3f5;
            --console-bg: #f8f9fa;
            --console-text: #333;
            --header-bg: #e9ecef;
            --header-text: #212529;
            --button-primary: #4CAF50;
            --button-primary-hover: #45a049;
            --button-secondary: #0d6efd;
            --button-secondary-hover: #0b5ed7;
            --button-submit: #fd7e14;
            --button-submit-hover: #e67510;
            --test-case-border: #eaecef;
            --problem-header-bg: #f1f8e9;
        }
        
        body.dark-theme {
            --bg-color: #212529;
            --text-color: #f8f9fa;
            --panel-bg: #2b3035;
            --panel-shadow: rgba(0,0,0,0.3);
            --border-color: #495057;
            --tab-bg: #343a40;
            --tab-active-border: #6eac56;
            --test-case-bg: #343a40;
            --test-io-bg: #495057;
            --console-bg: #212529;
            --console-text: #e9ecef;
            --header-bg: #343a40;
            --header-text: #f8f9fa;
            --button-primary: #4CAF50;
            --button-primary-hover: #3d8b40;
            --button-secondary: #0d6efd;
            --button-secondary-hover: #0a58ca;
            --button-submit: #fd7e14;
            --button-submit-hover: #e67510;
            --test-case-border: #495057;
            --problem-header-bg: #2c3c2e;
        }
        
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
            line-height: 1.6;
            margin: 0;
            padding: 0;
            color: var(--text-color);
            background-color: var(--bg-color);
            transition: background-color var(--transition-speed), color var(--transition-speed);
            height: 100vh;
        }
        
        .container {
            display: flex;
            height: 100vh;
            overflow: hidden;
        }
        
        .problem-panel {
            width: 40%;
            background-color: var(--panel-bg);
            box-shadow: 2px 0 10px var(--panel-shadow);
            overflow-y: auto;
            transition: background-color var(--transition-speed);
            display: flex;
            flex-direction: column;
        }
        
        .problem-header {
            background-color: var(--problem-header-bg);
            padding: 20px;
            border-bottom: 1px solid var(--border-color);
            transition: background-color var(--transition-speed);
        }
        
        .problem-content {
            padding: 20px;
            flex-grow: 1;
            overflow-y: auto;
        }
        
        .editor-panel {
            width: 60%;
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }
        
        .editor-header {
            padding: 12px 20px;
            background-color: var(--header-bg);
            color: var(--header-text);
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-bottom: 1px solid var(--border-color);
            transition: background-color var(--transition-speed), color var(--transition-speed);
        }
        
        .editor-container {
            flex-grow: 1;
            border: 1px solid var(--border-color);
            position: relative;
            overflow: hidden;
        }
        
        #editor {
            width: 100%;
            height: 100%;
            font-size: 14px;
        }
        
        .btn {
            padding: 8px 16px;
            background-color: var(--button-primary);
            color: white;
            border: none;
            border-radius: var(--border-radius);
            cursor: pointer;
            margin-left: 10px;
            font-weight: 500;
            transition: background-color 0.2s, transform 0.1s;
        }
        
        .btn:hover {
            background-color: var(--button-primary-hover);
            transform: translateY(-1px);
        }
        
        .btn:active {
            transform: translateY(0);
        }
        
        .btn-secondary {
            background-color: var(--button-secondary);
        }
        
        .btn-secondary:hover {
            background-color: var(--button-secondary-hover);
        }
        
        .btn-submit {
            background-color: var(--button-submit);
        }
        
        .btn-submit:hover {
            background-color: var(--button-submit-hover);
        }
        
        select, .theme-toggle {
            padding: 8px 12px;
            border-radius: var(--border-radius);
            background-color: var(--panel-bg);
            color: var(--text-color);
            border: 1px solid var(--border-color);
            outline: none;
            transition: border-color 0.2s, background-color var(--transition-speed), color var(--transition-speed);
        }
        
        select:focus {
            border-color: var(--button-secondary);
        }
        
        .test-case-container {
            margin-top: 20px;
            border-top: 1px solid var(--border-color);
            padding-top: 20px;
        }
        
        .test-case {
            margin-bottom: 16px;
            padding: 16px;
            background-color: var(--test-case-bg);
            border-radius: var(--border-radius);
            border: 1px solid var(--test-case-border);
            transition: background-color var(--transition-speed);
        }
        
        .test-input, .test-output {
            font-family: 'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, monospace;
            white-space: pre-wrap;
            background-color: var(--test-io-bg);
            padding: 12px;
            border-radius: calc(var(--border-radius) - 2px);
            margin-top: 8px;
            transition: background-color var(--transition-speed);
            font-size: 14px;
            border: 1px solid var(--border-color);
        }
        
        .custom-test-area {
            width: 100%;
            padding: 12px;
            font-family: 'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, monospace;
            border: 1px solid var(--border-color);
            border-radius: var(--border-radius);
            margin-top: 10px;
            resize: vertical;
            background-color: var(--test-io-bg);
            color: var(--text-color);
            outline: none;
            transition: border-color 0.2s, background-color var(--transition-speed), color var(--transition-speed);
            font-size: 14px;
        }
        
        .custom-test-area:focus {
            border-color: var(--button-secondary);
        }
        
        .passed {
            color: var(--button-primary);
            font-weight: bold;
        }
        
        .failed {
            color: #f44336;
            font-weight: bold;
        }
        
        h2 {
            margin-bottom: 16px;
            color: var(--text-color);
            font-weight: 600;
        }
        
        h3 {
            margin: 20px 0 10px;
            font-weight: 500;
            color: var(--text-color);
        }
        
        h4 {
            font-weight: 500;
            margin-bottom: 8px;
            color: var(--text-color);
        }
        
        p {
            margin-bottom: 12px;
        }
        
        .tab-container {
            display: flex;
            background-color: var(--tab-bg);
            border-bottom: 1px solid var(--border-color);
            transition: background-color var(--transition-speed);
        }
        
        .tab {
            padding: 12px 20px;
            cursor: pointer;
            color: var(--text-color);
            font-weight: 500;
            border-bottom: 2px solid transparent;
            transition: background-color 0.2s, border-color 0.2s, color var(--transition-speed);
            display: flex;
            align-items: center;
            justify-content: space-between;
        }
        
        .tab:hover {
            background-color: rgba(0,0,0,0.05);
        }
        
        .tab.active {
            background-color: var(--panel-bg);
            border-bottom: 2px solid var(--tab-active-border);
            position: relative;
        }
        
        .tab-content {
            display: none;
            padding: 20px;
            max-height: 0;
            overflow: hidden;
            background-color: var(--panel-bg);
            transition: max-height 0.3s ease-out, padding 0.3s ease-out;
            overflow-y: auto;
        }
        
        .tab-content.active {
            display: block;
            max-height: 250px;
            padding: 20px;
        }
        
        .collapse-icon {
            margin-left: 8px;
            font-size: 12px;
        }
        
        .console-container {
            background-color: var(--console-bg);
            color: var(--console-text);
            padding: 15px;
            border-radius: var(--border-radius);
            overflow-y: auto;
            font-family: 'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, monospace;
            height: 100%;
            border: 1px solid var(--border-color);
            font-size: 14px;
            transition: background-color var(--transition-speed), color var(--transition-speed);
        }
        
        .controls-group {
            display: flex;
            align-items: center;
        }
        
        .theme-toggle {
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            margin-right: 15px;
            transition: background-color var(--transition-speed), color var(--transition-speed);
        }
        
        .theme-toggle:hover {
            border-color: var(--button-secondary);
        }
        
        .theme-icon {
            margin-right: 5px;
            font-size: 16px;
        }
        
        .language-selector {
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .custom-test-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 12px;
        }
        
        .run-custom-btn {
            padding: 6px 12px;
            background-color: var(--button-secondary);
            color: white;
            border: none;
            border-radius: var(--border-radius);
            cursor: pointer;
            font-weight: 500;
            transition: background-color 0.2s, transform 0.1s;
        }
        
        .run-custom-btn:hover {
            background-color: var(--button-secondary-hover);
            transform: translateY(-1px);
        }
        
        .run-custom-btn:active {
            transform: translateY(0);
        }
        
        /* Responsive design for smaller screens */
        @media (max-width: 1024px) {
            .container {
                flex-direction: column;
            }
            
            .problem-panel, .editor-panel {
                width: 100%;
                height: 50vh;
            }
            
            .editor-container {
                height: 30vh;
            }
            
            .tab-content.active {
                max-height: 200px;
            }
            
            .tab-container {
                position: sticky;
                top: 0;
                z-index: 10;
                background-color: var(--tab-bg);
            }
        }
        
        /* Loading spinner */
        .loading {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 2px solid rgba(255,255,255,.3);
            border-radius: 50%;
            border-top-color: #fff;
            animation: spin 1s ease-in-out infinite;
            margin-right: 8px;
        }
        
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
    </style>
</head>
<body class="light-theme">
    <div class="container">
        <div class="problem-panel">
            
<div class="problem-header">
    <h2>Problem: <%= exam.codingQuestions[0].questionTile %></h2>
    <p><%= exam.codingQuestions[0].questiontext %></p>
</div>

<div class="problem-content">
    <h3>Input Format</h3>
    <p><%= exam.codingQuestions[0].inputFormat %></p>
    
    <h3>Output Format</h3>
    <p><%= exam.codingQuestions[0].outputFormat %></p>
    
    <h3>Constraints</h3>
    <p><%= exam.codingQuestions[0].constraits %></p>
    
    <h3>Sample Input</h3>
    <div class="test-input"><%= exam.codingQuestions[0].sampleInput %></div>
    
    <h3>Sample Output</h3>
    <div class="test-output"><%= exam.codingQuestions[0].sampleOutput %></div>
    
    <div class="test-case-container">
        <h3>Test Cases</h3>
        <% exam.codingQuestions[0].testCases.filter(tc => tc.isPublic).forEach((testCase, index) => { %>
            <div class="test-case">
                <h4>Test Case <%= index + 1 %></h4>
                <p><strong>Input:</strong></p>
                <div class="test-input"><%= testCase.input %></div>
                <p><strong>Expected Output:</strong></p>
                <div class="test-output"><%= testCase.expectedOutput %></div>
            </div>
        <% }); %>
    </div>
</div>
        </div>
        <div class="editor-panel">
            <div class="editor-header">
                <div class="controls-group">
                    <div class="theme-toggle" onclick="toggleTheme()">
                        <span class="theme-icon">🌙</span>
                        <span class="theme-text">Dark</span>
                    </div>
                    <div class="language-selector">
                        <label for="language">Language:</label>
                        <select id="language" onchange="changeLanguage()">
                            <option value="python" selected>Python</option>
                            <option value="java">Java</option>
                            <option value="javascript">JavaScript</option>
                            <option value="c">C</option>
                            <option value="cpp">C++</option>
                            <option value="csharp">C#</option>
                        </select>
                    </div>
                </div>
                <div>
                    <button class="btn btn-secondary" onclick="runCustomTest()">Run Custom Test</button>
                    <button class="btn" onclick="runAllTests()">Run All Tests</button>
                    <button class="btn btn-submit" onclick="submitSolution()">Submit</button>
                </div>
            </div>
            <div class="editor-container">
                <div id="editor"></div>
            </div>
            <div class="tab-container">
                <div class="tab" data-tab="custom-test">
                    Custom Test
                    <span class="collapse-icon">▼</span>
                </div>
                <div class="tab" data-tab="results">
                    Test Results
                    <span class="collapse-icon">▼</span>
                </div>
            </div>
            
            <div id="custom-test" class="tab-content">
                <div class="custom-test-header">
                    <h4>Custom Test Input:</h4>
                    <button class="run-custom-btn" onclick="runCustomTest()">Run Test</button>
                </div>
                <textarea class="custom-test-area" id="custom-input" rows="5" placeholder="Enter your test input here...">3
5</textarea>
                <h4>Custom Test Output:</h4>
                <div class="console-container" id="custom-output">
                    // Custom test output will appear here
                </div>
            </div>
            <div id="results" class="tab-content">
                <div class="console-container" id="test-results">
                    // Test results will appear here
                </div>
            </div>
        </div>
    </div>
    
    <script src="https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.36.1/min/vs/loader.min.js"></script>
    <script>
        // Default code templates
        const templates = {
            python: ``,
            java: ``,
            javascript: ``,
            c: ``,
            cpp:``,
            csharp: ``
        };

        // Test cases
        const testCases = [
            {
                input: "3\n5",
                expectedOutput: "8"
            },
            {
                input: "-10\n10",
                expectedOutput: "0"
            },
            {
                input: "100\n-50",
                expectedOutput: "50"
            }
        ];

        // Judge0 API URL
        const JUDGE0_API_URL = 'http://172.16.6.47:2358';

        // Judge0 language IDs
        const LANGUAGE_IDS = {
            'python': 71,    // Python 3
            'java': 62,      // Java
            'javascript': 63, // Node.js
            'c': 50,         // C (GCC)
            'cpp': 54,       // C++ (GCC)
            'csharp': 51     // C#
        };

        let editor;
        let currentTheme = 'light-theme';
        let monaco;

        // Initialize Monaco editor
        require.config({ paths: { 'vs': 'https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.36.1/min/vs' }});
        
        // Wait for DOM to be fully loaded
        document.addEventListener('DOMContentLoaded', function() {
            initializeTabs();
        });
        
        // Initialize editor when monaco is loaded
        require(['vs/editor/editor.main'], function() {
            monaco = window.monaco;
            
            // Create editor instance
            editor = monaco.editor.create(document.getElementById('editor'), {
                value: templates.python,
                language: 'python',
                theme: 'vs',
                automaticLayout: true,
                minimap: { enabled: true },
                scrollBeyondLastLine: false,
                fontSize: 14,
                tabSize: 4,
                insertSpaces: true,
                fontFamily: 'Consolas, "Courier New", monospace',
                scrollbar: {
                    useShadows: false,
                    verticalHasArrows: true,
                    horizontalHasArrows: true,
                    vertical: 'visible',
                    horizontal: 'visible',
                    verticalScrollbarSize: 12,
                    horizontalScrollbarSize: 12
                }
            });
            
            // Set up window resize handler
            window.addEventListener('resize', function() {
                if (editor) {
                    editor.layout();
                }
            });
        });

        // Toggle between light and dark theme
        function toggleTheme() {
            const body = document.body;
            
            if (currentTheme === 'light-theme') {
                body.classList.remove('light-theme');
                body.classList.add('dark-theme');
                currentTheme = 'dark-theme';
                if (monaco) {
                    monaco.editor.setTheme('vs-dark');
                }
                document.querySelector('.theme-text').textContent = 'Light';
                document.querySelector('.theme-icon').textContent = '☀️';
            } else {
                body.classList.remove('dark-theme');
                body.classList.add('light-theme');
                currentTheme = 'light-theme';
                if (monaco) {
                    monaco.editor.setTheme('vs');
                }
                document.querySelector('.theme-text').textContent = 'Dark';
                document.querySelector('.theme-icon').textContent = '🌙';
            }
        }

        // Change language
        function changeLanguage() {
            const language = document.getElementById("language").value;
            if (editor && monaco) {
                monaco.editor.setModelLanguage(editor.getModel(), language === 'cpp' ? 'cpp' : language);
                editor.setValue(templates[language]);
            }
        }

        // Initialize tabs
        function initializeTabs() {
            const tabs = document.querySelectorAll('.tab');
            
            // By default no tab is active and all are collapsed
            tabs.forEach(tab => {
                tab.addEventListener('click', function() {
                    const tabName = this.getAttribute('data-tab');
                    const tabContent = document.getElementById(tabName);
                    
                    // If tab is already active, toggle its collapsed state
                    if (this.classList.contains('active')) {
                        this.classList.remove('active');
                        tabContent.classList.remove('active');
                        this.querySelector('.collapse-icon').textContent = '▼';
                    } else {
                        // Close any open tab
                        tabs.forEach(t => {
                            t.classList.remove('active');
                            t.querySelector('.collapse-icon').textContent = '▼';
                        });
                        
                        document.querySelectorAll('.tab-content').forEach(content => {
                            content.classList.remove('active');
                        });
                        
                        // Open the clicked tab
                        this.classList.add('active');
                        tabContent.classList.add('active');
                        this.querySelector('.collapse-icon').textContent = '▲';
                    }
                });
            });
        }
        
        // Open tab (can be used programmatically)
        function openTab(tabName) {
            const tab = document.querySelector(`.tab[data-tab="${tabName}"]`);
            
            if (tab) {
                // Close any open tabs
                document.querySelectorAll('.tab').forEach(t => {
                    t.classList.remove('active');
                    t.querySelector('.collapse-icon').textContent = '▼';
                });
                
                document.querySelectorAll('.tab-content').forEach(content => {
                    content.classList.remove('active');
                });
                
                // Open the requested tab
                tab.classList.add('active');
                document.getElementById(tabName).classList.add('active');
                tab.querySelector('.collapse-icon').textContent = '▲';
            }
        }

        // Run code with custom input
        async function runCustomTest() {
            if (!editor) return;
            
            // Get code, language, and input
            const code = editor.getValue();
            const language = document.getElementById("language").value;
            const input = document.getElementById("custom-input").value;
            
            // Make sure the custom test tab is open
            openTab('custom-test');
            
            // Show loading indicator
            document.getElementById("custom-output").innerHTML = "<div class='loading'></div> Running...";
            
            try {
                // Execute code using Judge0
                const result = await executeCode(code, language, input);
                
                // Display result
                document.getElementById("custom-output").innerText = result.output || 'No output';
            } catch (error) {
                // Display error
                document.getElementById("custom-output").innerText = `Error: ${error.message}`;
            }
        }

        // Run all test cases
        async function runAllTests() {
            if (!editor) return;
            
            // Get code and language
            const code = editor.getValue();
            const language = document.getElementById("language").value;
            
            // Make sure the results tab is open
            openTab('results');
            
            // Show loading indicator
            document.getElementById("test-results").innerHTML = "<div class='loading'></div> Running tests...";
            
            let allPassed = true;
            let results = "";
            
            // Run each test case
            for (let i = 0; i < testCases.length; i++) {
                try {
                    results += `Running Test Case ${i+1}:\n`;
                    
                    // Execute code using Judge0
                    const result = await executeCode(code, language, testCases[i].input);
                    
                    // Compare expected and actual output
                    const expected = testCases[i].expectedOutput.trim();
                    const actual = result.output.trim();
                    
                    if (actual === expected) {
                        results += `✅ Test Case ${i+1} Passed\n\n`;
                    } else {
                        allPassed = false;
                        results += `❌ Test Case ${i+1} Failed\n`;
                        results += `Expected: ${expected}\n`;
                        results += `Got: ${actual}\n\n`;
                    }
                } catch (error) {
                    allPassed = false;
                    results += `❌ Test Case ${i+1} Error: ${error.message}\n\n`;
                }
            }
            
            // Display final results
            if (allPassed) {
                results += "🎉 All test cases passed!";
            } else {
                results += "❌ Some test cases failed. Please review your code.";
            }
            
            document.getElementById("test-results").innerText = results;
        }

        // Submit solution
        async function submitSolution() {
            if (!editor) return;
            
            // Get the code and language
            const code = editor.getValue();
            const language = document.getElementById("language").value;
            
            // Show a loading message
            const previousText = document.getElementById("test-results").innerText;
            document.getElementById("test-results").innerHTML = "<div class='loading'></div> Validating solution...";
            openTab('results');
            
            try {
                // Run all test cases first to validate
                let allPassed = true;
                let results = "Validating solution:\n\n";
                
                for (let i = 0; i < testCases.length; i++) {
                    try {
                        results += `Running Test Case ${i+1}... `;
                        // Execute code using Judge0
                        const result = await executeCode(code, language, testCases[i].input);
                        
                        // Compare expected and actual output
                        const expected = testCases[i].expectedOutput.trim();
                        const actual = result.output.trim();
                        
                        if (actual === expected) {
                            results += `✅ Passed\n`;
                        } else {
                            allPassed = false;
                            results += `❌ Failed\n`;
                        }
                    } catch (error) {
                        allPassed = false;
                        results += `❌ Error: ${error.message}\n`;
                    }
                }
                
                document.getElementById("test-results").innerText = results;
                
                // Simulate submission to a backend server
                if (allPassed) {
                    // In a real application, you would submit to a backend here
                    // e.g., fetch('/api/submissions', { method: 'POST', body: JSON.stringify({...}) })
                    
                    // Wait a moment to simulate server processing
                    await new Promise(resolve => setTimeout(resolve, 1000));
                    
                    document.getElementById("test-results").innerText = results + "\n\n🎉 Solution submitted successfully! All tests passed.";
                    
                    // Show success alert
                    alert("Solution submitted successfully!");
                } else {
                    document.getElementById("test-results").innerText = results + "\n\n❌ Cannot submit solution. Please fix the failing tests first.";
                }
            } catch (error) {
                document.getElementById("test-results").innerText = `Error during submission: ${error.message}\n\nPrevious results:\n${previousText}`;
            }
        }

        // Execute code using Judge0 API
        async function executeCode(code, language, input) {
            try {
                // Create submission
                const createResponse = await fetch(`${JUDGE0_API_URL}/submissions`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        source_code: code,
                        language_id: LANGUAGE_IDS[language],
                        stdin: input
                    })
                });
                
                if (!createResponse.ok) {
                    throw new Error(`Failed to create submission: ${createResponse.status} ${createResponse.statusText}`);
                }
                
                const submission = await createResponse.json();
                const token = submission.token;
                
                if (!token) {
                    throw new Error('No token received from Judge0 API');
                }
                
                // Poll for result
                let result;
                let retries = 0;
                const maxRetries = 10;
                
                do {
                    // Wait before checking status
                    await new Promise(resolve => setTimeout(resolve, 1000));
                    
                    const statusResponse = await fetch(`${JUDGE0_API_URL}/submissions/${token}`);
                    
                    if (!statusResponse.ok) {
                        throw new Error(`Failed to get submission status: ${statusResponse.status} ${statusResponse.statusText}`);
                    }
                    
                    result = await statusResponse.json();
                    retries++;
                    
                    // If still processing after max retries, return error
                    if (retries >= maxRetries && result.status.id <= 2) {
                        throw new Error('Execution timed out. Please try again.');
                    }
                } while (result.status.id <= 2); // 1: In Queue, 2: Processing
                
                // Process result based on status
                if (result.status.id === 3) { // Accepted
                    return {
                        status: 'success',
                        output: result.stdout || ''
                    };
                } else if (result.status.id === 4) { // Wrong Answer
                    return {
                        status: 'wrong_answer',
                        output: result.stdout || ''
                    };
                } else if (result.status.id === 5) { // Time Limit Exceeded
                    throw new Error('Time limit exceeded');
                } else if (result.status.id === 6) { // Compilation Error
                    throw new Error(`Compilation error: ${result.compile_output}`);
                } else if (result.status.id === 7 || result.status.id === 14) { // Runtime Error
                    throw new Error(`Runtime error: ${result.stderr || 'Unknown error'}`);
                } else if (result.status.id === 13) { // Internal Error
                    throw new Error('Judge0 internal error');
                } else {
                    // Other error
                    throw new Error(`Execution failed: ${result.status.description}`);
                }
            } catch (error) {
                console.error('Error executing code:', error);
                throw error;
            }
        }
    </script>
</body>
</html>