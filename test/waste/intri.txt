
//     // Integrity monitoring variables
// let tabChangeCount = 0;
// let mouseOutCount = 0;
// let fullscreenExitCount = 0;
// let copyAttemptCount = 0;
// let pasteAttemptCount = 0;
// let focusChangeCount = 0;
// let refreshViolationCount = 0;
// let isFullscreenActive = false;
// let totalViolations = 0;
// let lastTabFocusTime = 0;
// const TAB_FOCUS_COOLDOWN = 1000;
// const MAX_ALLOWED_REFRESHES = 2; 
// let resizeAttempts = 0;
// let lastResizeTime = 0;
// const RESIZE_COOLDOWN = 500; 
// const MAX_RESIZE_ATTEMPTS = 2;

// // Add refreshViolationCount to the updateUI function
// function updateUI() {
//     if (localStorage.getItem('examStarted')=="true"){
//     document.getElementById('tabChangeCount').textContent = tabChangeCount;
//     document.getElementById('mouseOutCount').textContent = mouseOutCount;
//     document.getElementById('fullscreenExitCount').textContent = fullscreenExitCount;
//     document.getElementById('copyAttemptCount').textContent = copyAttemptCount;
//     document.getElementById('pasteAttemptCount').textContent = pasteAttemptCount;
//     document.getElementById('focusChangeCount').textContent = focusChangeCount;
//     document.getElementById('refreshViolationCount').textContent = refreshViolationCount; // Add this line
//     document.getElementById('totalViolations').textContent = totalViolations;
//     }
// }
// function showViolationModal() {
//     // Create modal container
//     const modalOverlay = document.createElement('div');
//     modalOverlay.style.position = 'fixed';
//     modalOverlay.style.top = '0';
//     modalOverlay.style.left = '0';
//     modalOverlay.style.width = '100%';
//     modalOverlay.style.height = '100%';
//     modalOverlay.style.backgroundColor = 'rgba(0, 0, 0, 0.7)';
//     modalOverlay.style.display = 'flex';
//     modalOverlay.style.justifyContent = 'center';
//     modalOverlay.style.alignItems = 'center';
//     modalOverlay.style.zIndex = '10000';
    
//     // Create modal content
//     const modalContent = document.createElement('div');
//     modalContent.style.backgroundColor = '#fff';
//     modalContent.style.padding = '25px';
//     modalContent.style.borderRadius = '10px';
//     modalContent.style.maxWidth = '500px';
//     modalContent.style.width = '80%';
//     modalContent.style.boxShadow = '0 5px 15px rgba(0, 0, 0, 0.3)';
//     modalContent.style.textAlign = 'center';
    
//     // Add warning icon
//     const warningIcon = document.createElement('div');
//     warningIcon.innerHTML = '⚠️';
//     warningIcon.style.fontSize = '4rem';
//     warningIcon.style.marginBottom = '15px';
//     modalContent.appendChild(warningIcon);
    
//     // Add title
//     const title = document.createElement('h2');
//     title.textContent = 'Critical Violation Alert';
//     title.style.color = '#d9534f';
//     title.style.marginBottom = '15px';
//     modalContent.appendChild(title);
    
//     // Add message
//     const message = document.createElement('p');
//     message.textContent = `You have committed 3 or more integrity violations. Your exam will be automatically submitted.`;
//     message.style.marginBottom = '20px';
//     message.style.fontSize = '1.1rem';
//     modalContent.appendChild(message);
    
//     // Add violations list
//     const violationsList = document.createElement('div');
//     violationsList.style.textAlign = 'left';
//     violationsList.style.marginBottom = '20px';
//     violationsList.style.padding = '10px';
//     violationsList.style.backgroundColor = '#f8d7da';
//     violationsList.style.borderRadius = '5px';
    
//     let violationsHTML = '<strong>Violations detected:</strong><ul style="margin-top: 10px;">';
    
//     // Add each violation type with count
//     if (tabChangeCount > 0) violationsHTML += `<li>Tab changes: ${tabChangeCount}</li>`;
//     if (mouseOutCount > 0) violationsHTML += `<li>Mouse left window: ${mouseOutCount}</li>`;
//     if (fullscreenExitCount > 0) violationsHTML += `<li>Fullscreen exits: ${fullscreenExitCount}</li>`;
//     if (copyAttemptCount > 0) violationsHTML += `<li>Copy attempts: ${copyAttemptCount}</li>`;
//     if (pasteAttemptCount > 0) violationsHTML += `<li>Paste attempts: ${pasteAttemptCount}</li>`;
//     if (focusChangeCount > 0) violationsHTML += `<li>Focus changes: ${focusChangeCount}</li>`;
//     if (refreshViolationCount > 0) violationsHTML += `<li>Page refreshes: ${refreshViolationCount}</li>`;
    
//     violationsHTML += '</ul>';
//     violationsList.innerHTML = violationsHTML;
//     modalContent.appendChild(violationsList);
    
//     // Add countdown text
//     const countdown = document.createElement('p');
//     countdown.textContent = 'Submitting exam in 5 seconds...';
//     countdown.style.fontWeight = 'bold';
//     modalContent.appendChild(countdown);
    
//     modalOverlay.appendChild(modalContent);
//     document.body.appendChild(modalOverlay);
    
//     // Start countdown
//     let seconds = 5;
//     const countdownInterval = setInterval(() => {
//         seconds--;
//         countdown.textContent = `Submitting exam in ${seconds} second${seconds !== 1 ? 's' : ''}...`;
        
//         if (seconds <= 0) {
//             clearInterval(countdownInterval);
//         }
//     }, 1000);
    
//     return modalOverlay;
// }
// function showNotification(message, type = 'warning') {
//     // Create notification container if it doesn't exist
//     let notificationContainer = document.getElementById('notificationContainer');
//     if (!notificationContainer) {
//         notificationContainer = document.createElement('div');
//         notificationContainer.id = 'notificationContainer';
//         notificationContainer.style.position = 'fixed';
//         notificationContainer.style.top = '10px';
//         notificationContainer.style.right = '10px';
//         notificationContainer.style.zIndex = '9999';
//         document.body.appendChild(notificationContainer);
//     }
    
//     // Create notification element
//     const notification = document.createElement('div');
//     notification.className = `notification ${type}`;
//     notification.style.backgroundColor = type === 'warning' ? '#fff3cd' : '#f8d7da';
//     notification.style.color = type === 'warning' ? '#856404' : '#721c24';
//     notification.style.padding = '10px 15px';
//     notification.style.marginBottom = '10px';
//     notification.style.borderRadius = '4px';
//     notification.style.boxShadow = '0 2px 5px rgba(0,0,0,0.2)';
//     notification.style.width = '300px';
//     notification.style.animation = 'fadeIn 0.3s ease-out';
//     notification.innerHTML = message;
    
//     // Add to container
//     notificationContainer.appendChild(notification);
    
//     // Auto-remove after 5 seconds
//     setTimeout(() => {
//         notification.style.animation = 'fadeOut 0.3s ease-in';
//         setTimeout(() => {
//             if (notification.parentNode) {
//                 notification.parentNode.removeChild(notification);
//             }
//         }, 300);
//     }, 8000);
    
//     return notification;
// }

// window.addEventListener('resize', () => {
//     if (localStorage.getItem('examStarted') == "true") {
//         const currentTime = Date.now();
//         // Check if we're within the cooldown period
//         if (currentTime - lastResizeTime < RESIZE_COOLDOWN) {
//             // Count this as another attempt within the same period
//             resizeAttempts++;
            
//             // Check if max attempts exceeded
//             if (resizeAttempts >= MAX_RESIZE_ATTEMPTS) {
//                 // Only show notification and count as violation if not due to Mac-specific events
//                 // like Mission Control or fullscreen transitions
//                 if (Math.abs(window.innerHeight - window.screen.height) > 100) {
//                     showNotification(`DevTools detected! Your exam is being monitored.`, 'error');
                    
//                     // Show the violation modal and submit exam after delay
//                     const modalOverlay = showViolationModal();
//                     setTimeout(() => {
//                         submitExam("resize_violations");
//                     }, 5000);
//                 }
//             }
//         } else {
//             // First resize attempt in a new period
//             resizeAttempts = 1;
//             if(resizeAttempts > 1) {
//                 showNotification(`Window resize detected. This is being monitored.`);
//             }
//         }
        
//         // Update the timestamp
//         lastResizeTime = currentTime;
        
//         // Check if total violations are too high
//         checkAndSubmitTest();
//     }
// });



// document.addEventListener('contextmenu', event => event.preventDefault());

// const style = document.createElement('style');
// style.textContent = `
//     @keyframes fadeIn {
//         from { opacity: 0; transform: translateY(-20px); }
//         to { opacity: 1; transform: translateY(0); }
//     }
//     @keyframes fadeOut {
//         from { opacity: 1; transform: translateY(0); }
//         to { opacity: 0; transform: translateY(-20px); }
//     }
// `;
// document.head.appendChild(style);
// // Create a function to handle refresh detection
// function handleRefreshDetection() {
//     // Check if there's a saved refresh count
//     let refreshCount = parseInt(localStorage.getItem('examRefreshCount') || '0');
//     if(localStorage.getItem('examStarted') == "true"){
//         refreshCount++;
//         localStorage.setItem('examRefreshCount', refreshCount.toString());
//     }
   
    
//     // Count this as a violation if it's not the first load
//     if (refreshCount > 1) {
//         refreshViolationCount = refreshCount - 1; // Don't count the initial load
//         totalViolations += 1; // Increment total violations by 1 for this refresh
        
//         // Send refresh event to server for logging
//         sendIntegrityUpdate("pageRefresh");
//         updateStatus("Page refresh detected");
//         updateUI();
        
//         // Check if exceeded maximum allowed refreshes
//         if (refreshCount > MAX_ALLOWED_REFRESHES) {
//             showNotification(`Maximum page refreshes (${MAX_ALLOWED_REFRESHES}) exceeded. Your exam is being submitted.`, 'error');
//             submitExam("excessive_refreshes");
//             return false;
//         }
//     }
    
//     return true;
// }

// // Modify the DOMContentLoaded event handler
// document.addEventListener('DOMContentLoaded', function() {
//     // Check if exam has started
//     const examStarted = localStorage.getItem('examStarted');
//     function sendActivityPing() {
        
//         fetch('/dashboard/see-active', {
//             method: 'POST',
//             headers: {
//                 'Content-Type': 'application/json',
//             },
//             body: JSON.stringify({
//                 examId: "<%= exam._id %>",  // Use the template variable
//                 userId: "<%= user._id %>",  // Use the template variable
//                 timestamp: new Date().toISOString()
//             })
//         })
//         .then(response => {
//             if (!response.ok) {
//                 console.error('Failed to send activity ping');
                
//             }else{
                
//             }
//         })
//         .catch(error => {
           
           
//         });
//     }
    
//     // Send first ping immediately
//     sendActivityPing();
//     const pingInterval = setInterval(sendActivityPing, 20000);

//     if (examStarted === 'true') {
//         // Add refresh violation elements to the integrity panel
//         const integrityCols = document.querySelectorAll('#examin .col-md-6');
//         if (integrityCols.length > 1) {
//             const refreshViolationItem = document.createElement('div');
//             refreshViolationItem.className = 'integrity-item';
//             refreshViolationItem.innerHTML = '<strong>Refresh Violations:</strong> <span id="refreshViolationCount" class="badge badge-secondary">0</span>';
//             integrityCols[1].appendChild(refreshViolationItem);
//         }
        
//         // Handle refresh detection
//         if (!handleRefreshDetection()) {
//             return; // Stop if refresh limit exceeded
//         }
        
//         // Continue with normal exam loading
//         document.getElementById("startExamBtn").style.display = "none";
//         document.getElementById("examContent").style.display = "block";
//         document.getElementById("examin").style.display = "block"; // Make sure the integrity panel is visible
        
//         if (initializeExamTimer()) {
//             loadExamState();
//             enterFullscreen();
//             preventBackButton();
//             startWebcamCapture();
//         } else {
//             // If initialization failed, clear localStorage
//             localStorage.removeItem('examStarted');
//             localStorage.removeItem('examEndTime');
//             localStorage.removeItem('examMcqAnswers');
//             localStorage.removeItem('examCodingAnswers');
//             localStorage.removeItem('examRefreshCount');
//         }
//     } else {
//         // Add refresh violation element to the integrity panel for when exam starts
//         const integrityCols = document.querySelectorAll('#examin .col-md-6');
//         if (integrityCols.length > 1) {
//             const refreshViolationItem = document.createElement('div');
//             refreshViolationItem.className = 'integrity-item';
//             refreshViolationItem.innerHTML = '<strong>Refresh Violations:</strong> <span id="refreshViolationCount" class="badge badge-secondary">0</span>';
//             integrityCols[1].appendChild(refreshViolationItem);
//         }
        
//         // Reset refresh count when exam starts
//         document.getElementById("startExamBtn").addEventListener("click", function() {
//             enterFullscreen()
//             localStorage.setItem('examRefreshCount', '0');
//             // Rest of your existing start exam code...
//         });
//     }
    
//     // Rest of your existing DOMContentLoaded code...
// }); 

// // Exam navigation variables

// let maxAllowedRefreshes = 2; // Set your desired threshold
// // Prevent F5 (refresh) and F11 (fullscreen toggle) keyboard shortcuts
// document.addEventListener('keydown', function(e) {
//  if (
//     e.key === 'F12' ||
//     (e.ctrlKey && e.shiftKey && (e.key === 'I' || e.key === 'J')) ||
//     (e.ctrlKey && e.key === 'U')
//   ) {
//     e.preventDefault();
//     console.log("Blocked key:", e.key);
//   }
//   if (e.key === 'Escape') {
//     e.preventDefault(); // Stops the default action (if any)
//     e.stopPropagation(); // Prevents the event from bubbling up
//     console.log('Escape key disabled.');
//   }
//        if (e.key === 'F5' || e.keyCode === 116 || 
//             ((e.metaKey || e.ctrlKey) && e.key === 'r')) {
//             e.preventDefault();
//             e.stopPropagation();
//             showNotification("Page refresh is not allowed during the exam.");
//             return false;
//         }
        
//         // F11 key or Command+Shift+F (Mac fullscreen)
//         if (e.key === 'F11' || e.keyCode === 122 || 
//             (e.metaKey && e.shiftKey && e.key === 'f')) {
//             e.preventDefault();
//             e.stopPropagation();
//             showNotification("Exiting fullscreen is not allowed during the exam.");
//             enterFullscreen(); // Force back to fullscreen
//             return false;
//         }
        
//         // Command+W (Mac window close)
//         if ((e.metaKey && e.key === 'w') || (e.key === 'F4' && e.altKey)) {
//             e.preventDefault();
//             e.stopPropagation();
//             showNotification("Closing the window is not allowed during the exam.");
//             return false;
//         }
//   // Prevent Ctrl+R (refresh)
//   if ((e.ctrlKey || e.metaKey) && (e.key === 'r' || e.keyCode === 82)) {
//     e.preventDefault();
//     e.stopPropagation();
//     showNotification("Page refresh is not allowed during the exam.");
//     return false;
//   }
// });
// // Add this to the DOMContentLoaded event listener

// // Send integrity updates to server
// function sendIntegrityUpdate(eventType) {
//     if (localStorage.getItem('examStarted')=="true"){
//         const data = {
//         examId: "<%= exam._id %>", 
//         userId: "<%= user._id %>", 
//         eventType: eventType
//     };

//     fetch('/update-integrity', {
//         method: 'POST',
//         headers: {
//             'Content-Type': 'application/json'
//         },
//         body: JSON.stringify(data)
//     })
//     .then(response => response.json())
//     .then(data => console.log('Integrity event logged:', data))
//     .catch(error => console.error('Error sending integrity update:', error));
//     }

// }

// // Update UI elements for integrity monitoring

// // Update status message
// function updateStatus(message) {
//     if (localStorage.getItem('examStarted')=="true"){
//     document.getElementById('lastEvent').textContent = message;
//     }
// }

// // Handle tab change events
// function handleTabChange() {
//     if (localStorage.getItem('examStarted')=="true"){
//     if (document.hidden) {
//         // Only count tab change if it's not immediately after a focus change
//         const currentTime = Date.now();
//         if (currentTime - lastTabFocusTime > TAB_FOCUS_COOLDOWN) {
//             tabChangeCount++;
//             totalViolations++;
//             sendIntegrityUpdate("tabChanges");
//             updateStatus("Tab change detected");
//             updateUI();
//             checkAndSubmitTest();
//         }
//     }
// }
// }

// // Handle mouse leaving the window
// function handleMouseOut(event) {
//     if (localStorage.getItem('examStarted')=="true"){
//     if (event.clientX < 0 || event.clientX > window.innerWidth - 1 || event.clientY < 0 || event.clientY > window.innerHeight - 1) {
//         mouseOutCount++;
//         totalViolations++;
//         sendIntegrityUpdate("mouseOuts");
//         updateStatus("Mouse left workspace");
//         showNotification("Mouse Going Out is not allowed");
//         updateUI();
//         checkAndSubmitTest();
//     }
// }
// }

// // Handle window focus changes
// function handleFocusChange(event) {
//     if (localStorage.getItem('examStarted')=="true"){
//     if (event.type === 'blur') {
//         // Only count focus change if it's not immediately after a tab change
//         const currentTime = Date.now();
//         if (currentTime - lastTabFocusTime > TAB_FOCUS_COOLDOWN) {
//             focusChangeCount++;
//             lastTabFocusTime = currentTime;
            
//             // Check if this is coming from a tab change or standalone focus change
//             if (!document.hidden) {
//                 // If document is not hidden, this is a standalone focus change
//                 totalViolations++;
//                 sendIntegrityUpdate("focusChanges");
//                 updateStatus("Focus change detected");
//                 updateUI();
//                 checkAndSubmitTest();
//             }
//         }
//     }
// }
// }

// function enterFullscreen() {
//     const elem = document.documentElement;
    
//     // Don't attempt to enter fullscreen if already in fullscreen mode
//     if (document.fullscreenElement || document.webkitFullscreenElement || 
//         document.mozFullScreenElement || document.msFullscreenElement) {
//         return;
//     }
    
//     try {
//         if (elem.requestFullscreen) {
//             elem.requestFullscreen();
//         } else if (elem.webkitRequestFullscreen) { // Safari
//             elem.webkitRequestFullscreen();
//         } else if (elem.mozRequestFullScreen) { // Firefox
//             elem.mozRequestFullScreen();
//         } else if (elem.msRequestFullscreen) { // IE/Edge
//             elem.msRequestFullscreen();
//         }
//     } catch (error) {
//         console.error("Fullscreen error:", error);
//         showNotification("Fullscreen mode failed. Please try again.");
//     }
// }
// // Update the fullscreenchange event listener to handle all browser prefixes
// document.addEventListener('fullscreenchange', handleFullscreenChange);
// document.addEventListener('webkitfullscreenchange', handleFullscreenChange); // Safari
// document.addEventListener('mozfullscreenchange', handleFullscreenChange); // Firefox
// document.addEventListener('MSFullscreenChange', handleFullscreenChange); // IE/Edge
// document.addEventListener('visibilitychange', handleTabChange);
// window.addEventListener('blur', handleFocusChange);
// window.addEventListener('focus', handleFocusChange);
// document.addEventListener('copy', (e) => {
//     e.preventDefault();
//     copyAttemptCount++;
//     sendIntegrityUpdate("copyAttempts");
//     updateStatus("Copy attempt detected");
//     updateUI();
// });

// document.addEventListener('paste', (e) => {
//     e.preventDefault();
//     pasteAttemptCount++;
//     sendIntegrityUpdate("pasteAttempts");
//     updateStatus("Paste attempt detected");
//     updateUI();
// });

// function handleFullscreenChange() {

//     if (!document.fullscreenElement && !document.webkitFullscreenElement && 
//         !document.mozFullScreenElement && !document.msFullscreenElement) {
//         fullscreenExitCount++;
//         totalViolations++;
//         showNotification("Exiting fullscreen is not allowed during the exam.");
        
//         // Give a short delay before forcing back to fullscreen (helps with Mac transition)
//         setTimeout(enterFullscreen, 500);
        
//         sendIntegrityUpdate("fullscreenExits");
//         updateStatus("Fullscreen exited");
//         updateUI();
//         checkAndSubmitTest();
//     } else {
//         if (!isFullscreenActive) {
//             document.addEventListener('mouseout', handleMouseOut);
//             isFullscreenActive = true;
//             setTimeout(() => {
//                 const btn = document.getElementById('myButton');
//                 if (btn) btn.click();
//             }, 2000);
//         }
//         updateStatus("Fullscreen entered");
//     }
// }

// function startWebcamCapture() {
//     const canvas = document.getElementById('canvas');
//     const context = canvas.getContext('2d');
    
//     // Check if media devices API is supported
//     if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
//         console.error("MediaDevices API not supported");
//         showNotification("Your browser doesn't support webcam capture. Please use a modern browser.", 'error');
//         return;
//     }

//     navigator.mediaDevices.getUserMedia({ 
//         video: { 
//             width: { ideal: 320 },
//             height: { ideal: 240 },
//             facingMode: "user"
//         } 
//     })
//     .then((stream) => {
//         const video = document.createElement('video');
//         video.srcObject = stream;
//         video.play();
        
//         // Wait for video to be ready
//         video.onloadedmetadata = () => {
//             // Set up snapshot interval
//             setInterval(() => {
//                 try {
//                     context.drawImage(video, 0, 0, canvas.width, canvas.height);
                    
//                     canvas.toBlob((blob) => {
//                         if (!blob) return;
                        
//                         const formData = new FormData();
//                         formData.append('image', blob, `capture-${Date.now()}.png`);
//                         formData.append('userId', "<%= user._id %>");
//                         formData.append('examId', "<%= exam._id %>");
                        
//                         fetch('/save-image', { 
//                             method: 'POST',
//                             body: formData,
//                         })
//                         .then(response => response.json())
//                         .then(data => console.log('Image saved:', data))
//                         .catch(error => console.error('Error saving image:', error));
//                     }, 'image/png');
//                 } catch (err) {
//                     console.error("Error capturing webcam frame:", err);
//                 }
//             }, 5000);
//         };
//     })
//     .catch((error) => {
//         console.error("Error accessing webcam:", error);
//         showNotification("Unable to access the webcam. Please ensure your camera is connected and you've allowed permission.", 'error');
//     });
// }
// function preventBackButton() {
//     window.history.pushState(null, "", window.location.href);
//     window.onpopstate = function() {
//         window.history.pushState(null, "", window.location.href);
//     };
// }











<script src="/js/test.js">
    
</script>
<script >
let currentQuestionType = "mcq";
let currentQuestionIndex = 0;
let examTimerInterval = null;

// Variables for timer functionality
let endTime = null;
let examDuration = parseInt("<%= exam.duration %>") * 60 * 1000; // Convert minutes to milliseconds
let scheduledAt = new Date("<%=exam.scheduledAt %>").getTime();
let scheduleTill = new Date("<%= exam.scheduleTill %>").getTime();
let timeRemaining = examDuration;

// Question tracking
let answeredQuestions = {
    mcq: Array(<%= exam.mcqQuestions.length %>).fill(false),
    coding: Array(<%= exam.codingQuestions.length %>).fill(false)
};
// intrigrity code is here that i have not given but its here
</script>
<script src="/js/intr.js">

</script><script>

// Navigation functions
function showQuestion(type, index) {
    // Hide all question cards
    document.querySelectorAll('.question-card').forEach(card => {
        card.classList.remove('active');
    });
    
    // Show the selected question card
    document.getElementById(`${type}-question-${index}`).classList.add('active');
    
    // Update navigation sidebar
    document.querySelectorAll('.question-nav-item').forEach(item => {
        item.classList.remove('active');
    });
    
    // Find and activate the correct nav item
    document.querySelectorAll('.question-nav-item').forEach(item => {
        if (item.getAttribute('data-question-type') === type && 
            parseInt(item.getAttribute('data-question-index')) === index) {
            item.classList.add('active');
        }
    });
    
    // Update current question tracking
    currentQuestionType = type;
    currentQuestionIndex = index;
}

function nextQuestion() {
    if (currentQuestionType === "mcq" && currentQuestionIndex < <%= exam.mcqQuestions.length - 1 %>) {
        // Go to next MCQ
        showQuestion("mcq", currentQuestionIndex + 1);
    } else if (currentQuestionType === "mcq" && currentQuestionIndex === <%= exam.mcqQuestions.length - 1 %>) {
        // Switch from MCQ to coding if available
        if (<%= exam.codingQuestions.length %> > 0) {
            showQuestion("coding", 0);
        }
    } else if (currentQuestionType === "coding" && currentQuestionIndex < <%= exam.codingQuestions.length - 1 %>) {
        // Go to next coding question
        showQuestion("coding", currentQuestionIndex + 1);
    }
}

function prevQuestion() {
    if (currentQuestionType === "coding" && currentQuestionIndex > 0) {
        // Go to previous coding question
        showQuestion("coding", currentQuestionIndex - 1);
    } else if (currentQuestionType === "coding" && currentQuestionIndex === 0) {
        // Switch from coding to last MCQ
        showQuestion("mcq", <%= exam.mcqQuestions.length - 1 %>);
    } else if (currentQuestionType === "mcq" && currentQuestionIndex > 0) {
        // Go to previous MCQ
        showQuestion("mcq", currentQuestionIndex - 1);
    }
}

function updateAnsweredStatus() {
    // Count MCQ answers
    document.querySelectorAll('input[type="radio"]:checked').forEach(radio => {
        const questionId = radio.name.split('-')[1];
        const mcqIndex = Array.from(document.querySelectorAll('.question-card')).findIndex(
            card => card.querySelector(`input[name="mcq-${questionId}"]`)
        );
        
        if (mcqIndex !== -1) {
            answeredQuestions.mcq[mcqIndex] = true;
            
            // Update nav item
            document.querySelectorAll('.question-nav-item').forEach(item => {
                if (item.getAttribute('data-question-type') === 'mcq' && 
                    parseInt(item.getAttribute('data-question-index')) === mcqIndex) {
                    item.classList.add('answered');
                }
            });
        }
    });
    
    // Count coding answers
    document.querySelectorAll('textarea').forEach((textarea, index) => {
        if (textarea.value.trim() !== '') {
            answeredQuestions.coding[index] = true;
            
            // Update nav item
            document.querySelectorAll('.question-nav-item').forEach(item => {
                if (item.getAttribute('data-question-type') === 'coding' && 
                    parseInt(item.getAttribute('data-question-index')) === index) {
                    item.classList.add('answered');
                }
            });
        }
    });
    
    // Update review modal
    updateReviewModal();
    
    // Save answers state to localStorage
    saveExamState();
}

function updateReviewModal() {
    const answeredCount = answeredQuestions.mcq.filter(Boolean).length + 
                         answeredQuestions.coding.filter(Boolean).length;
    
    document.getElementById('answeredCount').textContent = answeredCount;
    
    // Update MCQ status in review modal
    answeredQuestions.mcq.forEach((isAnswered, index) => {
        const listItem = document.querySelector(`.review-list li[data-question-type="mcq"][data-question-index="${index}"]`);
        const statusBadge = listItem.querySelector('.status-badge');
        
        if (isAnswered) {
            statusBadge.textContent = "Answered";
            statusBadge.classList.remove('badge-secondary');
            statusBadge.classList.add('badge-success');
        } else {
            statusBadge.textContent = "Not answered";
            statusBadge.classList.remove('badge-success');
            statusBadge.classList.add('badge-secondary');
        }
    });
    
    // Update coding status in review modal
    answeredQuestions.coding.forEach((isAnswered, index) => {
        const listItem = document.querySelector(`.review-list li[data-question-type="coding"][data-question-index="${index}"]`);
        const statusBadge = listItem.querySelector('.status-badge');
        
        if (isAnswered) {
            statusBadge.textContent = "Answered";
            statusBadge.classList.remove('badge-secondary');
            statusBadge.classList.add('badge-success');
        } else {
            statusBadge.textContent = "Not answered";
            statusBadge.classList.remove('badge-success');
            statusBadge.classList.add('badge-secondary');
        }
    });
}

// Save exam state to localStorage (for page refresh handling)
function saveExamState() {
    // Save answers
    const mcqAnswers = {};
    document.querySelectorAll('input[type="radio"]:checked').forEach(radio => {
        mcqAnswers[radio.name] = radio.value;
    });
    
    const codingAnswers = {};
    document.querySelectorAll('textarea').forEach(textarea => {
        codingAnswers[textarea.name] = textarea.value;
    });
    
    localStorage.setItem('examMcqAnswers', JSON.stringify(mcqAnswers));
    localStorage.setItem('examCodingAnswers', JSON.stringify(codingAnswers));
}

// Load exam state from localStorage (after page refresh)
function loadExamState() {
    // Load MCQ answers
    try {
        const mcqAnswers = JSON.parse(localStorage.getItem('examMcqAnswers')) || {};
        Object.entries(mcqAnswers).forEach(([name, value]) => {
            const radioInput = document.querySelector(`input[name="${name}"][value="${value}"]`);
            if (radioInput) {
                radioInput.checked = true;
                radioInput.closest('.option-label').classList.add('selected');
            }
        });
        
        // Load coding answers
        const codingAnswers = JSON.parse(localStorage.getItem('examCodingAnswers')) || {};
        Object.entries(codingAnswers).forEach(([name, value]) => {
            const textarea = document.querySelector(`textarea[name="${name}"]`);
            if (textarea) {
                textarea.value = value;
            }
        });
        
        updateAnsweredStatus();
    } catch (e) {
        console.error("Error loading saved exam state:", e);
    }
}
// Handle page refresh or close attempt
window.addEventListener('beforeunload', function(e) {
    if (localStorage.getItem('examStarted')=="true"){
        clearInterval(pingInterval);
        
        // Send final ping with status=inactive
        fetch('/dashboard/see-active', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                examId: "<%= exam._id %>",
                userId: "<%= user._id %>",
                timestamp: new Date().toISOString(),
                status: 'inactive' // Optional: indicate user is leaving
            }),
            // Use keepalive to ensure the request completes even when page is unloading
            keepalive: true
        });
    if (localStorage.getItem('examSubmitting') === 'true') {
        return;
    }
    // Only set the returnValue to show a generic browser warning
    if (examTimerInterval) {
        // This triggers the browser's "Leave site?" dialog with a generic message
        e.preventDefault();
        e.returnValue = '';
        // Flag that we're about to refresh
        sessionStorage.setItem('attemptedRefresh', 'true');
        // Save current state
        saveExamState();   
        return '';
    }}
});
// Set up event listeners

// Question navigation event listeners
document.addEventListener('DOMContentLoaded', function() {
    // Check if already started

    const examStarted = localStorage.getItem('examStarted');
    if (examStarted === 'true') {
        document.getElementById("startExamBtn").style.display = "none";

        document.getElementById("examin").style.display = "none";
        document.getElementById("examContent").style.display = "block";
        
        // Initialize exam timer and load previous state
        if (initializeExamTimer()) {
            loadExamState();
            enterFullscreen();
            preventBackButton();
            startWebcamCapture();
        } else {
            // If initialization failed, clear localStorage
            localStorage.removeItem('examStarted');
            localStorage.removeItem('examEndTime');
            localStorage.removeItem('examMcqAnswers');
            localStorage.removeItem('examCodingAnswers');
        }
    }

    // Next question buttons
    document.querySelectorAll('.next-question-btn').forEach(button => {
        button.addEventListener('click', function() {
            nextQuestion();
        });
    });
    
    // Previous question buttons
    document.querySelectorAll('.prev-question-btn').forEach(button => {
        button.addEventListener('click', function() {
            prevQuestion();
        });
    });
    
    // Question nav sidebar items
    document.querySelectorAll('.question-nav-item').forEach(item => {
        item.addEventListener('click', function(e) {
            e.preventDefault();
            const type = this.getAttribute('data-question-type');
            const index = parseInt(this.getAttribute('data-question-index'));
            showQuestion(type, index);
        });
    });
    
    // MCQ option selection
    document.querySelectorAll('.option-label').forEach(label => {
        label.addEventListener('click', function() {
            // Clear selected state for all options in the same question
            const questionCard = this.closest('.question-card');
            questionCard.querySelectorAll('.option-label').forEach(opt => {
                opt.classList.remove('selected');
            });
            
            // Apply selected state to this option
            this.classList.add('selected');
            
            // Update answered status
            updateAnsweredStatus();
        });
    });
    
    
    // Coding textarea input
    document.querySelectorAll('.coding-textarea').forEach(textarea => {
        textarea.addEventListener('input', function() {
            updateAnsweredStatus();
        });
    });
    
    // Review button
    document.getElementById('reviewBtn').addEventListener('click', function() {
        updateAnsweredStatus();
        $('#reviewModal').modal('show');
    });
    
    // Submit from review modal
    document.getElementById('submitFromReview').addEventListener('click', function() {
        $('#reviewModal').modal('hide');
        submitExam("manual");
    });
    // Submit test button
    document.getElementById('submitTestBtn').addEventListener('click', function() {
        submitExam("manual");
    });
    // Review modal question navigation
    document.querySelectorAll('.review-list li').forEach(item => {
        item.addEventListener('click', function() {
            const type = this.getAttribute('data-question-type');
            const index = parseInt(this.getAttribute('data-question-index'));
            $('#reviewModal').modal('hide');
            showQuestion(type, index);
        });
    });
});
document.getElementById("startExamBtn").addEventListener("click", function() {
    // Store exam started state
    localStorage.setItem('examStarted', 'true');
    
    enterFullscreen();
    document.getElementById("examin").style.display = "none";
    document.getElementById("examContent").style.display = "block"; 
    this.style.display = "none";
    
    if (initializeExamTimer()) {
        preventBackButton();
        startWebcamCapture();
    } else {
        // Revert if initialization failed
        document.getElementById("startExamBtn").style.display = "block";
        document.getElementById("startScreen").style.display = "none";
        document.getElementById("startScreen").hidden = true;
        document.getElementById("examContent").style.display = "none";
        localStorage.removeItem('examStarted');
    }
});

window.onload = () => {
    preventBackButton();
    updateScreenConfiguration();
    // Handle if the page is loaded after exam end time
    const savedEndTime = localStorage.getItem('examEndTime');
};
</script> 