<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
    <style>
        /* Base Styles */
        :root {
            --primary: #4361ee;
            --primary-light: #e8ecfd;
            --primary-dark: #3344c7;
            --secondary: #2b2d42;
            --success: #2dc653;
            --danger: #ef476f;
            --warning: #ffd166;
            --info: #00b4d8;
            --light: #f8f9fa;
            --dark: #212529;
            --gray: #8d99ae;
            --white: #ffffff;
            --shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
            --border-radius: 12px;
            --card-shadow: 0 8px 24px rgba(149, 157, 165, 0.15);
        }

        body {
            font-family: 'Poppins', sans-serif;
            background-color: #f5f7fb;
            color: var(--secondary);
            overflow-x: hidden;
            position: relative;
            min-height: 100vh;
        }

        /* Hidden Elements */
        video, canvas {
            display: none;
        }

        /* Container Styles */
        .custom-container {
            max-width: 1440px;
            margin: 0 auto;
            padding: 2rem;
        }

        /* Header Styles */
   
        /* Start Button */
        .start-button {
            text-align: center;
            margin: 3rem 0;
        }

        .btn-start {
            background: var(--primary);
            color: var(--white);
            padding: 1rem 3rem;
            font-size: 1.25rem;
            font-weight: 600;
            border-radius: 50px;
            border: none;
            box-shadow: 0 6px 15px rgba(67, 97, 238, 0.3);
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .btn-start:hover {
            background: var(--primary-dark);
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(67, 97, 238, 0.4);
        }

        .btn-start:active {
            transform: translateY(0);
            box-shadow: 0 4px 10px rgba(67, 97, 238, 0.3);
        }

        .btn-start:before {
            content: "";
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
            transition: 0.5s;
        }

        .btn-start:hover:before {
            left: 100%;
        }

        /* Timer Styles */
        .exam-timer {
            background: var(--secondary);
            color: var(--white);
            padding: 1.25rem;
            border-radius: var(--border-radius);
            text-align: center;
            margin-bottom: 1.5rem;
            font-size: 1.25rem;
            font-weight: 600;
            box-shadow: var(--shadow);
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .exam-timer i {
            margin-right: 0.75rem;
            color: var(--warning);
        }

        /* Sidebar Styles */
        .sidebar-container {
            position: sticky;
            top: 1.5rem;
        }

        .question-sidebar {
            background-color: var(--white);
            border-radius: var(--border-radius);
            box-shadow: var(--card-shadow);
            padding: 1.5rem;
            height: calc(100vh - 200px);
            overflow-y: auto;
            scrollbar-width: thin;
            scrollbar-color: var(--gray) var(--light);
        }

        .question-sidebar::-webkit-scrollbar {
            width: 6px;
        }

        .question-sidebar::-webkit-scrollbar-track {
            background: var(--light);
            border-radius: 10px;
        }

        .question-sidebar::-webkit-scrollbar-thumb {
            background-color: var(--gray);
            border-radius: 10px;
        }

        .sidebar-header {
            display: flex;
            align-items: center;
            margin-bottom: 1.5rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid rgba(0, 0, 0, 0.05);
        }

        .sidebar-header i {
            margin-right: 0.75rem;
            color: var(--primary);
            font-size: 1.25rem;
        }

        .sidebar-header h4 {
            margin-bottom: 0;
            font-weight: 600;
            font-size: 1.25rem;
        }

        .question-nav-item {
            display: flex;
            align-items: center;
            justify-content: flex-start;
            padding: 1rem;
            margin: 0.5rem 0;
            border-radius: 10px;
            cursor: pointer;
            transition: all 0.2s;
            color: var(--secondary);
            text-decoration: none;
            font-weight: 500;
            border: 1px solid transparent;
        }

        .question-nav-item:hover {
            background-color: var(--primary-light);
            text-decoration: none;
            color: var(--primary);
        }

        .question-nav-item.active {
            background-color: var(--primary);
            color: var(--white);
            box-shadow: 0 4px 10px rgba(67, 97, 238, 0.25);
        }

        .question-nav-item.answered {
            border-left: 4px solid var(--success);
            background-color: rgba(45, 198, 83, 0.08);
        }

        .question-indicator {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            background-color: var(--light);
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 1rem;
            font-size: 0.875rem;
            font-weight: 600;
            transition: all 0.2s;
        }

        .question-nav-item.active .question-indicator {
            background-color: var(--white);
            color: var(--primary);
        }

        .question-nav-item.answered .question-indicator {
            background-color: var(--success);
            color: var(--white);
        }

        .question-type {
            font-size: 0.75rem;
            opacity: 0.8;
            margin-top: 0.25rem;
        }

        /* Question Card Styles */
        .question-card {
            background-color: var(--white);
            border-radius: var(--border-radius);
            box-shadow: var(--card-shadow);
            padding: 2rem;
            margin-bottom: 2rem;
            min-height: calc(100vh - 250px);
            display: none;
            animation: fadeIn 0.3s ease;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .question-card.active {
            display: block;
        }

        .question-status {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 1.5rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid rgba(0, 0, 0, 0.05);
        }

        .question-number {
            font-size: 1rem;
            font-weight: 500;
            color: var(--gray);
        }

        .question-type-badge {
            padding: 0.5rem 1rem;
            border-radius: 50px;
            font-size: 0.75rem;
            font-weight: 600;
            display: inline-flex;
            align-items: center;
        }

        .question-type-badge i {
            margin-right: 0.5rem;
        }

        .mcq-badge {
            background-color: rgba(0, 180, 216, 0.15);
            color: var(--info);
        }

        .coding-badge {
            background-color: rgba(255, 209, 102, 0.15);
            color: #ff9800;
        }

        .question-text {
            font-size: 1.25rem;
            line-height: 1.6;
            margin-bottom: 2rem;
            font-weight: 500;
            color: var(--secondary);
        }

        /* Option Styles */
        .options {
            margin-top: 1.5rem;
        }

        .option-label {
            display: block;
            position: relative;
            padding: 1.25rem 1.5rem;
            margin: 1rem 0;
            background-color: var(--light);
            border-radius: var(--border-radius);
            transition: all 0.2s;
            font-size: 1rem;
            cursor: pointer;
            border-left: 4px solid transparent;
        }

        .option-label:hover {
            background-color: rgba(141, 153, 174, 0.1);
            transform: translateX(5px);
        }

        .option-label.selected {
            background-color: var(--primary-light);
            border-left: 4px solid var(--primary);
            box-shadow: 0 3px 10px rgba(67, 97, 238, 0.1);
        }

        .option-label input[type="radio"] {
            margin-right: 0.75rem;
            transform: scale(1.2);
            cursor: pointer;
        }

        /* Navigation Button Styles */
        .navigation-buttons {
            display: flex;
            justify-content: space-between;
            margin-top: 2rem;
        }

        .btn-nav {
            padding: 0.75rem 1.5rem;
            font-weight: 500;
            border-radius: 8px;
            transition: all 0.2s;
            display: flex;
            align-items: center;
        }

        .btn-prev {
            background-color: var(--light);
            color: var(--secondary);
            border: 1px solid rgba(0, 0, 0, 0.1);
        }

        .btn-prev:hover {
            background-color: var(--secondary);
            color: var(--white);
            border-color: var(--secondary);
        }

        .btn-prev i {
            margin-right: 0.5rem;
        }

        .btn-next {
            background-color: var(--primary);
            color: var(--white);
            border: none;
        }

        .btn-next:hover {
            background-color: var(--primary-dark);
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(67, 97, 238, 0.3);
        }

        .btn-next i {
            margin-left: 0.5rem;
        }

        /* Submit Button Styles */
        .submit-area {
            margin-top: 2rem;
            text-align: center;
            display: flex;
            justify-content: center;
        }

        .btn-review {
            padding: 0.75rem 2rem;
            font-size: 1rem;
            font-weight: 600;
            background-color: var(--info);
            color: var(--white);
            border: none;
            border-radius: 8px;
            margin-right: 1rem;
            display: flex;
            align-items: center;
            transition: all 0.2s;
        }

        .btn-review:hover {
            background-color: #0097b5;
            transform: translateY(-2px);
            box-shadow: 0 4px 10px rgba(0, 180, 216, 0.3);
        }

        .btn-review i {
            margin-right: 0.5rem;
        }

        .btn-submit {
            padding: 0.75rem 2.5rem;
            font-size: 1rem;
            font-weight: 600;
            background-color: var(--success);
            color: var(--white);
            border: none;
            border-radius: 8px;
            display: flex;
            align-items: center;
            transition: all 0.2s;
        }

        .btn-submit:hover {
            background-color: #26a645;
            transform: translateY(-2px);
            box-shadow: 0 4px 10px rgba(45, 198, 83, 0.3);
        }

        .btn-submit i {
            margin-right: 0.5rem;
        }

        /* Integrity Panel Styles */
        .integrity-panel {
            background-color: var(--white);
            border-radius: var(--border-radius);
            box-shadow: var(--card-shadow);
            padding: 2rem;
            margin: 2rem 0;
        }

        .integrity-panel h4 {
            display: flex;
            align-items: center;
            margin-bottom: 1.5rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid rgba(0, 0, 0, 0.05);
            font-weight: 600;
        }

        .integrity-item {
            padding: 0.75rem 0;
            border-bottom: 1px solid rgba(0, 0, 0, 0.05);
            font-size: 1rem;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .integrity-item:last-child {
            border-bottom: none;
        }

        .integrity-item strong {
            display: flex;
            align-items: center;
        }

        .integrity-item .badge {
            padding: 0.5rem 1rem;
            border-radius: 50px;
            font-weight: 500;
        }

        .total-violations {
            background-color: rgba(239, 71, 111, 0.1);
            border-radius: var(--border-radius);
            padding: 1rem 1.5rem;
            margin: 1.5rem 0;
            color: var(--danger);
            font-weight: 600;
            font-size: 1.1rem;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        /* Modal Styles */
        .modal-content {
            border: none;
            border-radius: var(--border-radius);
            box-shadow: var(--shadow);
        }

        .modal-header {
            background-color: var(--primary);
            color: var(--white);
            border-radius: var(--border-radius) var(--border-radius) 0 0;
            padding: 1.25rem 1.5rem;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        @keyframes fadeOut {
            from { opacity: 1; transform: translateY(0); }
            to { opacity: 0; transform: translateY(-20px); }
        }

        #notificationContainer {
            position: fixed;
            top: 10px;
            right: 10px;
            z-index: 9999;
        }

        .notification {
            padding: 10px 15px;
            margin-bottom: 10px;
            border-radius: 4px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
            width: 300px;
            animation: fadeIn 0.3s ease-out;
        }

        /* Footer Styles */
        .footer {
            text-align: center;
            padding: 2rem 0;
            color: var(--gray);
            border-top: 1px solid rgba(0, 0, 0, 0.05);
            margin-top: 3rem;
        }

        /* Responsive Styles */
        @media (max-width: 768px) {
            .custom-container {
                padding: 1rem;
            }
            
            .integrity-panel {
                padding: 1.5rem;
            }
            
            .btn-start {
                padding: 0.85rem 2rem;
                font-size: 1.1rem;
            }

            .question-sidebar {
                height: auto;
                max-height: 300px;
                margin-bottom: 1.5rem;
            }
            
            .navigation-buttons {
                flex-direction: column;
            }
            
            .btn-nav {
                margin-bottom: 1rem;
            }
            
            .submit-area {
                flex-direction: column;
            }
            
            .btn-review {
                margin-right: 0;
                margin-bottom: 1rem;
                width: 100%;
                justify-content: center;
            }
            
            .btn-submit {
                width: 100%;
                justify-content: center;
            }
        }
    </style>
    <title>Online Exam Portal</title>
</head>
<body>
    <div class="container">



        <!-- Start Button Area (initial view) -->
        <div id="startButtonArea" class="start-button">
            <button id="startExamBtn" class="btn-start">Start Exam</button>
        </div>

        <!-- Exam Content Area (hidden initially) -->

        <div id="examContent" style="display: none;">
            <form id="examForm" action="/dashboard/submit-test" method="POST">
                <input type="hidden" name="examId" value="<%= exam._id %>">
                <input type="hidden" name="userId" value="<%= user._id %>">

                
                <div class="row">
               
                    <div class="col-md-3 col-lg-2">
                        <div class="exam-timer" id="examTimer">
                            Time: <span id="timeDisplay">00:00:00</span>
                        </div>
                        <div class="question-sidebar">
                            <h4 class="mb-4">Questions</h4>
                            <div id="questionNavList">
                                <% let totalQuestions = exam.codingQuestions.length; %>
                             
                                <% for(let i = 0; i < exam.codingQuestions.length; i++) { %>
                                    <a href="#" class="question-nav-item" data-question-index="<%= i %>" data-question-type="coding">
                                        <div class="question-indicator"><%= i + 1 %></div>
                                        <div>Coding <%= i + 1 %></div>
                                    </a>
                                <% } %>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Right content area for questions -->
                    <div class="col-md-9 col-lg-10">
      

                        <!-- Coding Questions -->
                        <% exam.codingQuestions.forEach((question, index) => { %>
                            <div class="question-card" id="coding-question-<%= index %>">
                                <div class="question-status">
                                    <div>
                                        <span class="question-type-badge coding-badge">Coding</span>
                                    </div>
                                    <div>
                                        Question <%= index + 1 + exam.mcqQuestions.length %> of <%= totalQuestions %>
                                    </div>
                                </div>
                               
























                                
    <style>
        /* Component Styles */
        .coding-assessment {
            --transition-speed: 0.3s;
            --border-radius: 8px;
            --bg-color: #f8f9fa;
            --text-color: #212529;
            --panel-bg: #ffffff;
            --panel-shadow: rgba(0,0,0,0.08);
            --border-color: #dee2e6;
            --tab-bg: #f1f3f5;
            --tab-active-border: #4CAF50;
            --test-case-bg: #f8f9fa;
            --test-io-bg: #f1f3f5;
            --console-bg: #f8f9fa;
            --console-text: #333;
            --header-bg: #e9ecef;
            --header-text: #212529;
            --button-primary: #4CAF50;
            --button-primary-hover: #45a049;
            --button-secondary: #0d6efd;
            --button-secondary-hover: #0b5ed7;
            --button-submit: #fd7e14;
            --button-submit-hover: #e67510;
            --test-case-border: #eaecef;
            --problem-header-bg: #f1f8e9;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
            line-height: 1.6;
            color: var(--text-color);
            background-color: var(--bg-color);
            transition: background-color var(--transition-speed), color var(--transition-speed);
            min-height: 600px;
            display: flex;
            flex-direction: column;
            border: 1px solid var(--border-color);
            border-radius: var(--border-radius);
            overflow: hidden;
            box-shadow: 0 2px 10px var(--panel-shadow);
            height: 100vh; /* Full viewport height */
            max-height: 800px; /* Set a reasonable max height */
        }

        
        
        /* Dark theme styles */
        .coding-assessment.dark-theme {
            --bg-color: #212529;
            --text-color: #f8f9fa;
            --panel-bg: #2b3035;
            --panel-shadow: rgba(0,0,0,0.3);
            --border-color: #495057;
            --tab-bg: #343a40;
            --tab-active-border: #6eac56;
            --test-case-bg: #343a40;
            --test-io-bg: #495057;
            --console-bg: #212529;
            --console-text: #e9ecef;
            --header-bg: #343a40;
            --header-text: #f8f9fa;
            --button-primary: #4CAF50;
            --button-primary-hover: #3d8b40;
            --button-secondary: #0d6efd;
            --button-secondary-hover: #0a58ca;
            --button-submit: #fd7e14;
            --button-submit-hover: #e67510;
            --test-case-border: #495057;
            --problem-header-bg: #2c3c2e;
        }
        
        .coding-assessment * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }
        
        .coding-container {
            display: flex;
            flex: 1;
            overflow: hidden;
            height: 100%; /* Full height of parent */
        }
        
        .problem-panel {
            width: 40%;
            background-color: var(--panel-bg);
            box-shadow: 2px 0 10px var(--panel-shadow);
            transition: background-color var(--transition-speed);
            display: flex;
            flex-direction: column;
            height: 100%; /* Full height */
            overflow: hidden; /* Hide overflow */
        }
        
        .problem-header {
            background-color: var(--problem-header-bg);
            padding: 20px;
            border-bottom: 1px solid var(--border-color);
            transition: background-color var(--transition-speed);
            flex-shrink: 0; /* Prevent shrinking */
        }
        
        .problem-content {
            padding: 20px;
            overflow-y: auto; /* Make this section scrollable */
            flex-grow: 1; /* Take remaining space */
        }
        
        .editor-panel {
            width: 60%;
            display: flex;
            flex-direction: column;
            overflow: hidden;
            height: 100%; /* Full height */
        }
        
        .editor-header {
            padding: 12px 20px;
            background-color: var(--header-bg);
            color: var(--header-text);
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-bottom: 1px solid var(--border-color);
            transition: background-color var(--transition-speed), color var(--transition-speed);
            flex-shrink: 0; /* Prevent shrinking */
        }
        
        .editor-container {
            flex-grow: 1; /* Take remaining space */
            position: relative;
            overflow: hidden;
            min-height: 300px; /* Ensure minimum height */
        }
        
        .ca-editor {
            width: 100%;
            height: 100%;
            font-size: 14px;
        }
        
        .tab-controls-container {
            display: flex;
            flex-direction: column;
            flex-shrink: 0; /* Prevent this area from shrinking */
            max-height: 300px; /* Set maximum height */
            overflow: hidden; /* Hide overflow */
        }
        
        .ca-btn {
            padding: 8px 16px;
            background-color: var(--button-primary);
            color: white;
            border: none;
            border-radius: var(--border-radius);
            cursor: pointer;
            margin-left: 10px;
            font-weight: 500;
            transition: background-color 0.2s, transform 0.1s;
        }
        
        .ca-btn:hover {
            background-color: var(--button-primary-hover);
            transform: translateY(-1px);
        }
        
        .ca-btn:active {
            transform: translateY(0);
        }
        
        .ca-btn-secondary {
            background-color: var(--button-secondary);
        }
        
        .ca-btn-secondary:hover {
            background-color: var(--button-secondary-hover);
        }
        
        .ca-btn-submit {
            background-color: var(--button-submit);
        }
        
        .ca-btn-submit:hover {
            background-color: var(--button-submit-hover);
        }
        
        .ca-select, .theme-toggle {
            padding: 8px 12px;
            border-radius: var(--border-radius);
            background-color: var(--panel-bg);
            color: var(--text-color);
            border: 1px solid var(--border-color);
            outline: none;
            transition: border-color 0.2s, background-color var(--transition-speed), color var(--transition-speed);
        }
        
        .ca-select:focus {
            border-color: var(--button-secondary);
        }
        
        .test-case-container {
            margin-top: 20px;
            border-top: 1px solid var(--border-color);
            padding-top: 20px;
        }
        
        .test-case {
            margin-bottom: 16px;
            padding: 16px;
            background-color: var(--test-case-bg);
            border-radius: var(--border-radius);
            border: 1px solid var(--test-case-border);
            transition: background-color var(--transition-speed);
        }
        
        .test-input, .test-output {
            font-family: 'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, monospace;
            white-space: pre-wrap;
            background-color: var(--test-io-bg);
            padding: 12px;
            border-radius: calc(var(--border-radius) - 2px);
            margin-top: 8px;
            transition: background-color var(--transition-speed);
            font-size: 14px;
            border: 1px solid var(--border-color);
        }
        
        .custom-test-area {
            width: 100%;
            padding: 12px;
            font-family: 'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, monospace;
            border: 1px solid var(--border-color);
            border-radius: var(--border-radius);
            margin-top: 10px;
            resize: vertical;
            background-color: var(--test-io-bg);
            color: var(--text-color);
            outline: none;
            transition: border-color 0.2s, background-color var(--transition-speed), color var(--transition-speed);
            font-size: 14px;
        }
        
        .custom-test-area:focus {
            border-color: var(--button-secondary);
        }
        
        .passed {
            color: var(--button-primary);
            font-weight: bold;
        }
        
        .failed {
            color: #f44336;
            font-weight: bold;
        }
        
        .ca-h2 {
            margin-bottom: 16px;
            color: var(--text-color);
            font-weight: 600;
            font-size: 1.5rem;
        }
        
        .ca-h3 {
            margin: 20px 0 10px;
            font-weight: 500;
            color: var(--text-color);
            font-size: 1.25rem;
        }
        
        .ca-h4 {
            font-weight: 500;
            margin-bottom: 8px;
            color: var(--text-color);
            font-size: 1.1rem;
        }
        
        .ca-p {
            margin-bottom: 12px;
        }
        
        .tab-container {
            display: flex;
            background-color: var(--tab-bg);
            border-bottom: 1px solid var(--border-color);
            transition: background-color var(--transition-speed);
            flex-shrink: 0; /* Prevent shrinking */
            position: sticky;
            top: 0;
            z-index: 1;
        }
        
        .tab {
            padding: 12px 20px;
            cursor: pointer;
            color: var(--text-color);
            font-weight: 500;
            border-bottom: 2px solid transparent;
            transition: background-color 0.2s, border-color 0.2s, color var(--transition-speed);
            display: flex;
            align-items: center;
            justify-content: space-between;
        }
        
        .tab:hover {
            background-color: rgba(0,0,0,0.05);
        }
        
        .tab.active {
            background-color: var(--panel-bg);
            border-bottom: 2px solid var(--tab-active-border);
            position: relative;
        }
        
        .tab-content {
            display: none;
            padding: 20px;
            max-height: 0;
            overflow: hidden;
            background-color: var(--panel-bg);
            transition: max-height 0.3s ease-out, padding 0.3s ease-out;
            overflow-y: auto;
        }
        
        .tab-content.active {
            display: block;
            max-height: 250px; /* Set a reasonable height */
            padding: 20px;
            flex: 1; /* Take remaining space */
            overflow-y: auto; /* Make scrollable */
        }
        
        .collapse-icon {
            margin-left: 8px;
            font-size: 12px;
        }
        
        .console-container {
            background-color: var(--console-bg);
            color: var(--console-text);
            padding: 15px;
            border-radius: var(--border-radius);
            overflow-y: auto;
            font-family: 'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, monospace;
            height: 100%;
            border: 1px solid var(--border-color);
            font-size: 14px;
            transition: background-color var(--transition-speed), color var(--transition-speed);
            min-height: 100px; /* Minimum height */
        }
        
        .controls-group {
            display: flex;
            align-items: center;
        }
        
        .theme-toggle {
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            margin-right: 15px;
            transition: background-color var(--transition-speed), color var(--transition-speed);
        }
        
        .theme-toggle:hover {
            border-color: var(--button-secondary);
        }
        
        .theme-icon {
            margin-right: 5px;
            font-size: 16px;
        }
        
        .language-selector {
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .custom-test-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 12px;
        }
        
        .run-custom-btn {
            padding: 6px 12px;
            background-color: var(--button-secondary);
            color: white;
            border: none;
            border-radius: var(--border-radius);
            cursor: pointer;
            font-weight: 500;
            transition: background-color 0.2s, transform 0.1s;
        }
        
        .run-custom-btn:hover {
            background-color: var(--button-secondary-hover);
            transform: translateY(-1px);
        }
        
        .run-custom-btn:active {
            transform: translateY(0);
        }
        
        /* Loading spinner */
        .loading {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 2px solid rgba(255,255,255,.3);
            border-radius: 50%;
            border-top-color: #fff;
            animation: spin 1s ease-in-out infinite;
            margin-right: 8px;
        }
        
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
        
        /* Responsive design for smaller screens */
        @media (max-width: 1024px) {
            .coding-container {
                flex-direction: column;
            }
            
            .problem-panel, .editor-panel {
                width: 100%;
                height: auto;
            }
            
            .problem-panel {
                max-height: 50vh; /* Limit height on small screens */
                overflow-y: auto;
            }
            
            .editor-container {
                height: 300px; /* Fixed height on small screens */
            }
            
            .tab-content.active {
                max-height: 200px;
            }
            
            .tab-container {
                position: sticky;
                top: 0;
                z-index: 10;
                background-color: var(--tab-bg);
            }
            
            .coding-assessment {
                height: auto;
                max-height: none;
            }
        }
    </style>

    <!-- Example usage of the component -->
    <div id="assessment-1" class="coding-assessment">
        <!-- Content will be loaded via JavaScript -->
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.36.1/min/vs/loader.min.js"></script>
    <script>
        /**
         * Coding Assessment Component
         * A reusable component for coding assessments with customizable questions and tests
         */
        class CodingAssessment {
            constructor(options) {
                this.el = document.getElementById(options.elementId);
                if (!this.el) {
                    console.error(`Element with ID ${options.elementId} not found`);
                    return;
                }
                
                this.apiUrl = options.apiUrl || 'http://172.16.6.47:2358'; // Judge0 API URL
                this.problem = options.problem || {
                    title: "Example Problem",
                    description: "Write a function that solves a problem.",
                    inputFormat: "The input format description.",
                    outputFormat: "The output format description.",
                    constraints: "Any constraints on input or output.",
                    sampleInput: "Sample input",
                    sampleOutput: "Sample output"
                };
                
                // Default test cases if none provided
                this.testCases = options.testCases || [
                    {
                        input: "3\n5",
                        expectedOutput: "8"
                    }
                ];
                
                // Default code templates
                this.templates = options.templates || {
                    python: `def solve_problem():\n    # Write your code here\n    pass\n\n# Read input\n\n# Call your function\n\n# Output result\n`,
                    java: `public class Main {\n    public static void main(String[] args) {\n        // Write your code here\n    }\n}`,
                    javascript: `function solveFunction() {\n    // Write your code here\n}\n\n// Read input\n\n// Call your function\n\n// Output result\n`
                };
                
                // Language IDs for Judge0
                this.languageIds = options.languageIds || {
                    'python': 71,    // Python 3
                    'java': 62,      // Java
                    'javascript': 63, // Node.js
                    'c': 50,         // C (GCC)
                    'cpp': 54,       // C++ (GCC)
                    'csharp': 51     // C#
                };
                
                this.currentTheme = 'light-theme';
                this.editor = null;
                this.monaco = null;
                
                // Initialize the component
                this.render();
                this.initMonacoEditor();
            }
            
            /**
             * Render the HTML structure of the component
             */
            render() {
                this.el.innerHTML = `
                    <div class="coding-container">
                        <div class="problem-panel">
                            <div class="problem-header">
                                <h2 class="ca-h2">Problem: ${this.problem.title}</h2>
                                <p class="ca-p">${this.problem.description}</p>
                            </div>
                            
                            <div class="problem-content">
                                <h3 class="ca-h3">Input Format</h3>
                                <p class="ca-p">${this.problem.inputFormat}</p>
                                
                                <h3 class="ca-h3">Output Format</h3>
                                <p class="ca-p">${this.problem.outputFormat}</p>
                                
                                <h3 class="ca-h3">Constraints</h3>
                                <p class="ca-p">${this.problem.constraints}</p>
                                
                                <h3 class="ca-h3">Sample Input</h3>
                                <div class="test-input">${this.problem.sampleInput}</div>
                                
                                <h3 class="ca-h3">Sample Output</h3>
                                <div class="test-output">${this.problem.sampleOutput}</div>
                                
                                <div class="test-case-container">
                                    <h3 class="ca-h3">Test Cases</h3>
                                    ${this.renderTestCases()}
                                </div>
                            </div>
                        </div>
                        <div class="editor-panel">
                            <div class="editor-header">
                                <div class="controls-group">
                                    <div class="theme-toggle">
                                        <span class="theme-icon">🌙</span>
                                        <span class="theme-text">Dark</span>
                                    </div>
                                    <div class="language-selector">
                                        <label for="language-${this.el.id}">Language:</label>
                                        <select id="language-${this.el.id}" class="ca-select">
                                            <option value="python" selected>Python</option>
                                            <option value="java">Java</option>
                                            <option value="javascript">JavaScript</option>
                                            <option value="c">C</option>
                                            <option value="cpp">C++</option>
                                            <option value="csharp">C#</option>
                                        </select>
                                    </div>
                                </div>
                                <div>
                                   <div>
    <button type="button" class="ca-btn ca-btn-secondary" id="run-custom-${this.el.id}">Run Custom Test</button>
    <button type="button" class="ca-btn" id="run-all-${this.el.id}">Run All Tests</button>
    <button type="button" class="ca-btn ca-btn-submit" id="submit-${this.el.id}">Submit</button>
</div>
                                </div>
                            </div>
                            <div class="editor-container">
                                <div id="editor-${this.el.id}" class="ca-editor"></div>
                            </div>
                            <div class="tab-controls-container">
                                <div class="tab-container">
                                    <div class="tab" data-tab="custom-test-${this.el.id}">
                                        Custom Test
                                        <span class="collapse-icon">▼</span>
                                    </div>
                                    <div class="tab" data-tab="results-${this.el.id}">
                                        Test Results
                                        <span class="collapse-icon">▼</span>
                                    </div>
                                </div>
                                
                                <div id="custom-test-${this.el.id}" class="tab-content">
<div class="custom-test-header">
    <h4 class="ca-h4">Custom Test Input:</h4>
    <button type="button" class="run-custom-btn" id="run-custom-tab-${this.el.id}">Run Test</button>
</div>
                                    <textarea class="custom-test-area" id="custom-input-${this.el.id}" rows="5" placeholder="Enter your test input here...">${this.problem.sampleInput}</textarea>
                                    <h4 class="ca-h4">Custom Test Output:</h4>
                                    <div class="console-container" id="custom-output-${this.el.id}">
                                        // Custom test output will appear here
                                    </div>
                                </div>
                                <div id="results-${this.el.id}" class="tab-content">
                                    <div class="console-container" id="test-results-${this.el.id}">
                                        // Test results will appear here
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
                
                // Set up event listeners
                this.setupEventListeners();
            }
            
            /**
             * Render the test cases
             */
            renderTestCases() {
                return this.testCases.map((testCase, index) => `
                    <div class="test-case">
                        <h4 class="ca-h4">Test Case ${index + 1}</h4>
                        <p class="ca-p"><strong>Input:</strong></p>
                        <div class="test-input">${testCase.input}</div>
                        <p class="ca-p"><strong>Expected Output:</strong></p>
                        <div class="test-output">${testCase.expectedOutput}</div>
                    </div>
                `).join('');
            }
            
            /**
             * Initialize the Monaco Editor
             */
            initMonacoEditor() {
                require.config({ paths: { 'vs': 'https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.36.1/min/vs' }});
                
                require(['vs/editor/editor.main'], () => {
                    this.monaco = window.monaco;
                    
                    // Get selected language
                    const languageSelect = document.getElementById(`language-${this.el.id}`);
                    const initialLanguage = languageSelect.value;
                    
                    // Create editor instance
                    this.editor = this.monaco.editor.create(document.getElementById(`editor-${this.el.id}`), {
                        value: this.templates[initialLanguage],
                        language: initialLanguage,
                        theme: 'vs',
                        automaticLayout: true,
                        minimap: { enabled: true },
                        scrollBeyondLastLine: false,
                        fontSize: 14,
                        tabSize: 4,
                        insertSpaces: true,
                        fontFamily: 'Consolas, "Courier New", monospace',
                        scrollbar: {
                            useShadows: false,
                            verticalHasArrows: true,
                            horizontalHasArrows: true,
                            vertical: 'visible',
                            horizontal: 'visible',
                            verticalScrollbarSize: 12,
                            horizontalScrollbarSize: 12
                        }
                    });
                    
                    // Set up language change handler
                    languageSelect.addEventListener('change', () => this.changeLanguage());
                    
                    // Set up window resize handler
                    window.addEventListener('resize', () => {
                        if (this.editor) {
                            this.editor.layout();
                        }
                    });
                });
            }
            
            /**
             * Set up event listeners for the component
             */
            setupEventListeners() {
                // Theme toggle
                const themeToggle = this.el.querySelector('.theme-toggle');
                themeToggle.addEventListener('click', () => this.toggleTheme());
                
                // Tab functionality
                const tabs = this.el.querySelectorAll('.tab');
                tabs.forEach(tab => {
                    tab.addEventListener('click', () => {
                        const tabName = tab.getAttribute('data-tab');
                        this.toggleTab(tabName, tab);
                    });
                });
                
                // Button handlers
                document.getElementById(`run-custom-${this.el.id}`).addEventListener('click', () => this.runCustomTest());
                document.getElementById(`run-custom-tab-${this.el.id}`).addEventListener('click', () => this.runCustomTest());
                document.getElementById(`run-all-${this.el.id}`).addEventListener('click', () => this.runAllTests());
                document.getElementById(`submit-${this.el.id}`).addEventListener('click', () => this.submitSolution());
            }
            
            /**
             * Toggle between light and dark theme
             */
            toggleTheme() {
                if (this.currentTheme === 'light-theme') {
                    this.el.classList.remove('light-theme');
                    this.el.classList.add('dark-theme');
                    this.currentTheme = 'dark-theme';
                    if (this.monaco) {
                        this.monaco.editor.setTheme('vs-dark');
                    }
                    this.el.querySelector('.theme-text').textContent = 'Light';
                    this.el.querySelector('.theme-icon').textContent = '☀️';
                } else {
                    this.el.classList.remove('dark-theme');
                    this.el.classList.add('light-theme');
                    this.currentTheme = 'light-theme';
                    if (this.monaco) {
                        this.monaco.editor.setTheme('vs');
                    }
                    this.el.querySelector('.theme-text').textContent = 'Dark';
                    this.el.querySelector('.theme-icon').textContent = '🌙';
                }
            }
            
            /**
             * Change the programming language
             */
            changeLanguage() {
                const language = document.getElementById(`language-${this.el.id}`).value;
                if (this.editor && this.monaco) {
                    this.monaco.editor.setModelLanguage(this.editor.getModel(), language === 'cpp' ? 'cpp' : language);
                    this.editor.setValue(this.templates[language]);
                }
            }
            
            /**
             * Toggle a tab's visibility
             */
            toggleTab(tabName, tabElement) {
                const tabContent = document.getElementById(tabName);
                
                // If tab is already active, toggle its collapsed state
                if (tabElement.classList.contains('active')) {
                    tabElement.classList.remove('active');
                    tabContent.classList.remove('active');
                    tabElement.querySelector('.collapse-icon').textContent = '▼';
                } else {
                    // Close any open tabs
                    this.el.querySelectorAll('.tab').forEach(t => {
                        t.classList.remove('active');
                        t.querySelector('.collapse-icon').textContent = '▼';
                    });
                    
                    this.el.querySelectorAll('.tab-content').forEach(content => {
                        content.classList.remove('active');
                    });
                    
                    // Open the clicked tab
                    tabElement.classList.add('active');
                    tabContent.classList.add('active');
                    tabElement.querySelector('.collapse-icon').textContent = '▲';
                    
                    // Scroll tab into view if needed (mobile)
                    if (window.innerWidth <= 1024) {
                        tabElement.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
                    }
                }
            }
            
            /**
             * Open a tab programmatically
             */
            openTab(tabName) {
                const tab = this.el.querySelector(`.tab[data-tab="${tabName}"]`);
                
                if (tab) {
                    this.toggleTab(tabName, tab);
                    
                    // Scroll tab into view if needed (mobile)
                    if (window.innerWidth <= 1024) {
                        tab.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
                    }
                }
            }
            
            /**
             * Run a test with custom input
             */
            async runCustomTest() {
                if (!this.editor) return;
                
                // Get code, language, and input
                const code = this.editor.getValue();
                const language = document.getElementById(`language-${this.el.id}`).value;
                const input = document.getElementById(`custom-input-${this.el.id}`).value;
              
                // Make sure the custom test tab is open
                this.openTab(`custom-test-${this.el.id}`);
                
                // Show loading indicator
                document.getElementById(`custom-output-${this.el.id}`).innerHTML = "<div class='loading'></div> Running...";
                
                try {
                    // Execute code using Judge0
                    const result = await this.executeCode(code, language, input);
                    
                    // Display result
                    document.getElementById(`custom-output-${this.el.id}`).innerText = result.output || 'No output';
                } catch (error) {
                    // Display error
                    document.getElementById(`custom-output-${this.el.id}`).innerText = `Error: ${error.message}`;
                }
            }
            
            /**
             * Run all test cases
             */
            async runAllTests() {
                if (!this.editor) return;
                
                // Get code and language
                const code = this.editor.getValue();
                const language = document.getElementById(`language-${this.el.id}`).value;
                
                // Make sure the results tab is open
                this.openTab(`results-${this.el.id}`);
                
                // Show loading indicator
                document.getElementById(`test-results-${this.el.id}`).innerHTML = "<div class='loading'></div> Running tests...";
                
                let allPassed = true;
                let results = "";
                
                // Run each test case
                for (let i = 0; i < this.testCases.length; i++) {
                    try {
                        results += `Running Test Case ${i+1}:\n`;
                        
                        // Execute code using Judge0
                        const result = await this.executeCode(code, language, this.testCases[i].input);
                        
                        // Compare expected and actual output
                        const expected = this.testCases[i].expectedOutput.trim();
                        const actual = result.output.trim();
                        
                        if (actual === expected) {
                            results += `✅ Test Case ${i+1} Passed\n\n`;
                        } else {
                            allPassed = false;
                            results += `❌ Test Case ${i+1} Failed\n`;
                            results += `Expected: ${expected}\n`;
                            results += `Got: ${actual}\n\n`;
                        }
                    } catch (error) {
                        allPassed = false;
                        results += `❌ Test Case ${i+1} Error: ${error.message}\n\n`;
                    }
                }
                
                // Display final results
                if (allPassed) {
                    results += "🎉 All test cases passed!";
                } else {
                    results += "❌ Some test cases failed. Please review your code.";
                }
                
                document.getElementById(`test-results-${this.el.id}`).innerText = results;
            }
            
            /**
             * Submit solution
             */
            async submitSolution() {
                if (!this.editor) return;
                
                // Get the code and language
                const code = this.editor.getValue();
                const language = document.getElementById(`language-${this.el.id}`).value;
                
                // Show a loading message
                const previousText = document.getElementById(`test-results-${this.el.id}`).innerText;
                document.getElementById(`test-results-${this.el.id}`).innerHTML = "<div class='loading'></div> Validating solution...";
                this.openTab(`results-${this.el.id}`);
                
                try {
                    // Run all test cases first to validate
                    let allPassed = true;
                    let results = "Validating solution:\n\n";
                    
                    for (let i = 0; i < this.testCases.length; i++) {
                        try {
                            results += `Running Test Case ${i+1}... `;
                            // Execute code using Judge0
                            const result = await this.executeCode(code, language, this.testCases[i].input);
                            
                            // Compare expected and actual output
                            const expected = this.testCases[i].expectedOutput.trim();
                            const actual = result.output.trim();
                            
                            if (actual === expected) {
                                results += `✅ Passed\n`;
                            } else {
                                allPassed = false;
                                results += `❌ Failed\n`;
                            }
                        } catch (error) {
                            allPassed = false;
                            results += `❌ Error: ${error.message}\n`;
                        }
                    }
                    
                    document.getElementById(`test-results-${this.el.id}`).innerText = results;
                    
                    // Simulate submission to a backend server
                    if (allPassed) {
                        // In a real application, you would submit to a backend here
                        // e.g., fetch('/api/submissions', { method: 'POST', body: JSON.stringify({...}) })
                        
                        // Wait a moment to simulate server processing
                        await new Promise(resolve => setTimeout(resolve, 1000));
                        
                        document.getElementById(`test-results-${this.el.id}`).innerText = results + "\n\n🎉 Solution submitted successfully! All tests passed.";
                        
                        // Fire a custom event that parent applications can listen for
                        const submissionEvent = new CustomEvent('submissionComplete', {
                            detail: {
                                componentId: this.el.id,
                                success: true,
                                code: code,
                                language: language
                            }
                        });
                        this.el.dispatchEvent(submissionEvent);
                        
                        // Show success alert
                        alert("Solution submitted successfully!");
                    } else {
                        document.getElementById(`test-results-${this.el.id}`).innerText = results + "\n\n❌ Cannot submit solution. Please fix the failing tests first.";
                    }
                } catch (error) {
                    document.getElementById(`test-results-${this.el.id}`).innerText = `Error during submission: ${error.message}\n\nPrevious results:\n${previousText}`;
                }
            }
            /**
             * Execute code using Judge0 API
             */
            async executeCode(code, language, input) {
                try {
                    // Create submission
                    const createResponse = await fetch(`${this.apiUrl}/submissions`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            source_code: code,
                            language_id: this.languageIds[language],
                            stdin: input
                        })
                    });
                    
                    if (!createResponse.ok) {
                        throw new Error(`Failed to create submission: ${createResponse.status} ${createResponse.statusText}`);
                    }
                    
                    const submission = await createResponse.json();
                    const token = submission.token;
                    
                    if (!token) {
                        throw new Error('No token received from Judge0 API');
                    }
                    
                    // Poll for result
                    let result;
                    let retries = 0;
                    const maxRetries = 10;
                    
                    do {
                        // Wait before checking status
                        await new Promise(resolve => setTimeout(resolve, 1000));
                        
                        const statusResponse = await fetch(`${this.apiUrl}/submissions/${token}`);
                        
                        if (!statusResponse.ok) {
                            throw new Error(`Failed to get submission status: ${statusResponse.status} ${statusResponse.statusText}`);
                        }
                        
                        result = await statusResponse.json();
                        retries++;
                        
                        // If still processing after max retries, return error
                        if (retries >= maxRetries && result.status.id <= 2) {
                            throw new Error('Execution timed out. Please try again.');
                        }
                    } while (result.status.id <= 2); // 1: In Queue, 2: Processing
                    
                    // Process result based on status
                    if (result.status.id === 3) { // Accepted
                        return {
                            status: 'success',
                            output: result.stdout || ''
                        };
                    } else if (result.status.id === 4) { // Wrong Answer
                        return {
                            status: 'wrong_answer',
                            output: result.stdout || ''
                        };
                    } else if (result.status.id === 5) { // Time Limit Exceeded
                        throw new Error('Time limit exceeded');
                    } else if (result.status.id === 6) { // Compilation Error
                        throw new Error(`Compilation error: ${result.compile_output}`);
                    } else if (result.status.id === 7 || result.status.id === 14) { // Runtime Error
                        throw new Error(`Runtime error: ${result.stderr || 'Unknown error'}`);
                    } else if (result.status.id === 13) { // Internal Error
                        throw new Error('Judge0 internal error');
                    } else {
                        // Other error
                        throw new Error(`Execution failed: ${result.status.description}`);
                    }
                } catch (error) {
                    console.error('Error executing code:', error);
                    throw error;
                }
            }
        }

        // Example usage - this demonstrates how to set up the component with a custom problem
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize the coding assessment component
                const assessment = new CodingAssessment({
        elementId: 'assessment-1',
        apiUrl: 'http://172.16.6.47:2358', // Replace with your Judge0 API URL
        problem: {
            title: "<%= question.question %>", // Use EJS variable
            description: "<%= question.description %>", // Use EJS variable
            inputFormat: "<%= question.inputFormat %>",
            outputFormat: "<%= question.outputFormat %>",
            constraints: "<%= question.constraints %>",
            sampleInput: "<%= question.sampleInput %>",
            sampleOutput: "<%= question.sampleOutput %>"
        },
        testCases: JSON.parse('<%- JSON.stringify(question.testCases) %>'), // Parse JSON from EJS
        templates: {
            python: ``,
            java: ``,
            javascript: ``,
            c: ``,
            cpp: ``,
            csharp: ``
        }
    });
    
    // Listen for submission events
    document.getElementById('assessment-1').addEventListener('submissionComplete', function(event) {
        console.log('Submission completed:', event.detail);
        // Set hidden field value for form submission
        document.getElementById('coding-answer-<%= index %>').value = JSON.stringify(event.detail);
    });
            
            // Listen for submission events
         
        });
        
        // Function to create multiple coding assessments programmatically
        function createMultipleAssessments(assessmentConfigs) {
            // First, create the container elements
            const container = document.createElement('div');
            container.className = 'assessments-container';
            document.body.appendChild(container);
            
            // Create each assessment
            assessmentConfigs.forEach((config, index) => {
                // Create the element
                const assessmentEl = document.createElement('div');
                assessmentEl.id = `assessment-${index+1}`;
                assessmentEl.className = 'coding-assessment';
                container.appendChild(assessmentEl);
                
                // Initialize the component
                new CodingAssessment({
                    elementId: assessmentEl.id,
                    ...config
                });
            });
        }
        
        // Example of how to use the component in a loop for multiple questions
        /*
        createMultipleAssessments([
            {
                problem: {
                    title: "Problem 1: Sum of Two Numbers",
                    description: "Write a function that returns the sum of two integers.",
                    // ... other properties
                },
                testCases: [
                    // ... test cases for problem 1
                ]
            },
            {
                problem: {
                    title: "Problem 2: Find Maximum",
                    description: "Write a function that finds the maximum value in an array.",
                    // ... other properties
                },
                testCases: [
                    // ... test cases for problem 2
                ]
            }
            // Add more problems as needed
        ]);
        */
    </script>








































































                                <div class="navigation-buttons">
                                    <button type="button" class="btn btn-outline-secondary prev-question-btn">Previous</button>
                                    <button type="button" class="btn btn-primary next-question-btn" id="" <%= index === exam.codingQuestions.length - 1 ? 'disabled' : '' %>>Next</button>
                                </div>
                                
                            </div>
                        <% }); %>
                        

                        <div class="submit-btn">
                            <button type="button" id="reviewBtn" class="btn btn-info btn-lg px-4 mr-2">Review Answers</button>
                            <button type="submit" id="submitTestBtn" class="btn btn-success btn-lg px-5">Submit Test</button>
                        </div>
                    </div>
                </div>
            </form>
        </div>

        <!-- Review Modal -->
        <div class="modal fade" id="reviewModal" tabindex="-1" role="dialog" aria-labelledby="reviewModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-lg" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="reviewModalLabel">Review Your Answers</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div class="review-summary mb-4">
                            <div class="alert alert-info">
                                <strong>Summary:</strong> <span id="answeredCount">0</span> of <span id="totalQuestionsCount"><%= totalQuestions %></span> questions answered
                            </div>
                        </div>
                        <div class="review-list">
                          
                            
                            <h6 class="mb-3">Coding Questions:</h6>
                            <ul class="list-group">
                                <% exam.codingQuestions.forEach((question, index) => { %>
                                    <li class="list-group-item d-flex justify-content-between align-items-center" data-question-type="coding" data-question-index="<%= index %>">
                                        <div>Q<%= index + 1 + exam.mcqQuestions.length %>: <%= question.question %>...</div>
                                        <span class="badge badge-secondary status-badge">Not answered</span>
                                    </li>
                                <% }); %>
                            </ul>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                        <button type="button" class="btn btn-success" id="submitFromReview">Submit Test</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Integrity Monitoring Panel -->
        <div id="integrityPanel" class="integrity-panel">
            <h4>Exam Integrity Monitor</h4>
            <div class="row">
                <div class="col-md-6">
                    <div class="integrity-item">
                        <strong>Tab Changes Detected:</strong> 
                        <span id="tabChangeCount" class="badge badge-secondary">0</span>
                    </div>
                    <div class="integrity-item">
                        <strong>Mouse Left Workspace:</strong> 
                        <span id="mouseOutCount" class="badge badge-secondary">0</span>
                    </div>
                    <div class="integrity-item">
                        <strong>Fullscreen Exit Attempts:</strong> 
                        <span id="fullscreenExitCount" class="badge badge-secondary">0</span>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="integrity-item">
                        <strong>Copy Attempts:</strong> 
                        <span id="copyAttemptCount" class="badge badge-secondary">0</span>
                    </div>
                    <div class="integrity-item">
                        <strong>Paste Attempts:</strong> 
                        <span id="pasteAttemptCount" class="badge badge-secondary">0</span>
                    </div>
                    <div class="integrity-item">
                        <strong>Focus Changes Detected:</strong> 
                        <span id="focusChangeCount" class="badge badge-secondary">0</span>
                    </div>
                    <div class="integrity-item">
                        <strong>Refresh Violations:</strong> 
                        <span id="refreshViolationCount" class="badge badge-secondary">0</span>
                    </div>
                </div>
            </div>
            <div class="integrity-item mt-3 total-violations">
                <strong>Total Integrity Violations:</strong> 
                <span id="totalViolations" class="badge badge-danger">0</span>
            </div>
            <div class="integrity-item">
                <strong>Last Event:</strong> 
                <span id="lastEvent" class="badge badge-info">N/A</span>
            </div>
            <div class="integrity-item">
                <strong>Screen Configuration:</strong> 
                <span id="screenConfig" class="badge badge-info">Checking...</span>
            </div>
        </div>

        <footer class="footer">
            <p>© 2025 Academic Assessment Platform</p>
        </footer>
    </div>

    <!-- Hidden Canvas for Webcam Capture -->
    <canvas id="canvas" width="320" height="240"></canvas>

    <!-- Required Scripts -->
    <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.12.9/dist/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>





    
    <script>
        // Global Variables
        let examDuration = parseInt("<%= exam.duration %>") * 60 * 1000;
let scheduledAt = new Date("<%= exam.scheduledAt %>").getTime();
let scheduleTill = new Date("<%= exam.scheduleTill %>").getTime();
        let examTimerInterval = null;
        let endTime = null;
        let timeRemaining = examDuration;
        let pingInterval = null;

        // Exam navigation variables
        let currentQuestionType = "mcq";
        let currentQuestionIndex = 0;

        // Question tracking
        let answeredQuestions = {
            mcq: Array(3).fill(false),
            coding: Array(2).fill(false)
        };

        // Integrity Monitoring Variables
        let tabChangeCount = 0;
        let mouseOutCount = 0;
        let fullscreenExitCount = 0;
        let copyAttemptCount = 0;
        let pasteAttemptCount = 0;
        let focusChangeCount = 0;
        let refreshViolationCount = 0;
        let isFullscreenActive = false;
        let totalViolations = 0;
        let lastTabFocusTime = 0;
        const TAB_FOCUS_COOLDOWN = 1000;
        const MAX_ALLOWED_REFRESHES = 2;
        let resizeAttempts = 0;
        let lastResizeTime = 0;
        const RESIZE_COOLDOWN = 500;
        const MAX_RESIZE_ATTEMPTS = 2;

        // Disable keyboard shortcuts
        document.addEventListener('keydown', function(e) {
            if (localStorage.getItem('examStarted') === "true") {
                // Prevent dev tools and refresh
                if (e.key === 'F12' || 
                    (e.ctrlKey && e.shiftKey && (e.key === 'I' || e.key === 'J')) || 
                    (e.ctrlKey && e.key === 'U') ||
                    e.key === 'Escape' ||
                    e.key === 'F5' || 
                    ((e.metaKey || e.ctrlKey) && e.key === 'r') ||
                    e.key === 'F11' || 
                    (e.metaKey && e.shiftKey && e.key === 'f') ||
                    (e.metaKey && e.key === 'w') || 
                    (e.key === 'F4' && e.altKey)) {
                        
                    e.preventDefault();
                    e.stopPropagation();
                    showNotification("This action is not allowed during the exam.");
                    return false;
                }
            }
        });

        // Prevent right-click context menu
        document.addEventListener('contextmenu', event => event.preventDefault());

        // Initialize exam timer
        function initializeExamTimer() {
            // Check if there's a saved timer state
            const savedEndTime = localStorage.getItem('examEndTime');
            
            if (savedEndTime) {
                // Resume timer if already started
                endTime = parseInt(savedEndTime);
                
                // Check if the saved end time is in the past
                if (Date.now() > endTime) {
                    // Clear the saved time and start fresh
                    localStorage.removeItem('examEndTime');
                    endTime = Date.now() + examDuration;
                    localStorage.setItem('examEndTime', endTime);
                }
            } else {
                // Set end time based on exam duration
                endTime = Date.now() + examDuration;
                localStorage.setItem('examEndTime', endTime);
            }
            
            // Start the timer interval
            examTimerInterval = setInterval(updateExamTimer, 1000);
            return true;
        }

        // Update the timer display
        function updateExamTimer() {
            const currentTime = Date.now();
            timeRemaining = endTime - currentTime;
            
            if (timeRemaining <= 0) {
                // Time's up!
                clearInterval(examTimerInterval);
                document.getElementById('timeDisplay').textContent = "00:00:00";
                showNotification("Time's up! Your exam is being submitted.", 'error');
                submitExam("timeout");
                return;
            }

            // Convert remaining time to hours, minutes, seconds
            const hours = Math.floor(timeRemaining / (1000 * 60 * 60));
            const minutes = Math.floor((timeRemaining % (1000 * 60 * 60)) / (1000 * 60));
            const seconds = Math.floor((timeRemaining % (1000 * 60)) / 1000);
            
            // Format time as HH:MM:SS
            const formattedTime = 
                (hours < 10 ? "0" + hours : hours) + ":" +
                (minutes < 10 ? "0" + minutes : minutes) + ":" +
                (seconds < 10 ? "0" + seconds : seconds);
                
            document.getElementById('timeDisplay').textContent = formattedTime;
            
            // Create warning if less than 5 minutes remaining
            if (timeRemaining < 5 * 60 * 1000 && timeRemaining > 4.9 * 60 * 1000) {
                showNotification("Warning: Less than 5 minutes remaining!");
            }
        }

        // Notification system
        function showNotification(message, type = 'warning') {
            // Create notification container if it doesn't exist
            let notificationContainer = document.getElementById('notificationContainer');
            if (!notificationContainer) {
                notificationContainer = document.createElement('div');
                notificationContainer.id = 'notificationContainer';
                notificationContainer.style.position = 'fixed';
                notificationContainer.style.top = '10px';
                notificationContainer.style.right = '10px';
                notificationContainer.style.zIndex = '9999';
                document.body.appendChild(notificationContainer);
            }
            
            // Create notification element
            const notification = document.createElement('div');
            notification.className = `notification ${type}`;
            notification.style.backgroundColor = type === 'warning' ? '#fff3cd' : '#f8d7da';
            notification.style.color = type === 'warning' ? '#856404' : '#721c24';
            notification.style.padding = '10px 15px';
            notification.style.marginBottom = '10px';
            notification.style.borderRadius = '4px';
            notification.style.boxShadow = '0 2px 5px rgba(0,0,0,0.2)';
            notification.style.width = '300px';
            notification.style.animation = 'fadeIn 0.3s ease-out';
            notification.innerHTML = message;
            
            // Add to container
            notificationContainer.appendChild(notification);
            
            // Auto-remove after 5 seconds
            setTimeout(() => {
                notification.style.animation = 'fadeOut 0.3s ease-in';
                setTimeout(() => {
                    if (notification.parentNode) {
                        notification.parentNode.removeChild(notification);
                    }
                }, 300);
            }, 5000);
            
            return notification;
        }

        // Violations modal
        function showViolationModal() {
            // Create modal container
            const modalOverlay = document.createElement('div');
            modalOverlay.style.position = 'fixed';
            modalOverlay.style.top = '0';
            modalOverlay.style.left = '0';
            modalOverlay.style.width = '100%';
            modalOverlay.style.height = '100%';
            modalOverlay.style.backgroundColor = 'rgba(0, 0, 0, 0.7)';
            modalOverlay.style.display = 'flex';
            modalOverlay.style.justifyContent = 'center';
            modalOverlay.style.alignItems = 'center';
            modalOverlay.style.zIndex = '10000';
            
            // Create modal content
            const modalContent = document.createElement('div');
            modalContent.style.backgroundColor = '#fff';
            modalContent.style.padding = '25px';
            modalContent.style.borderRadius = '10px';
            modalContent.style.maxWidth = '500px';
            modalContent.style.width = '80%';
            modalContent.style.boxShadow = '0 5px 15px rgba(0, 0, 0, 0.3)';
            modalContent.style.textAlign = 'center';
            
            // Add warning icon
            const warningIcon = document.createElement('div');
            warningIcon.innerHTML = '⚠️';
            warningIcon.style.fontSize = '4rem';
            warningIcon.style.marginBottom = '15px';
            modalContent.appendChild(warningIcon);
            
            // Add title
            const title = document.createElement('h2');
            title.textContent = 'Critical Violation Alert';
            title.style.color = '#d9534f';
            title.style.marginBottom = '15px';
            modalContent.appendChild(title);
            
            // Add message
            const message = document.createElement('p');
            message.textContent = `You have committed 3 or more integrity violations. Your exam will be automatically submitted.`;
            message.style.marginBottom = '20px';
            message.style.fontSize = '1.1rem';
            modalContent.appendChild(message);
            
            // Add violations list
            const violationsList = document.createElement('div');
            violationsList.style.textAlign = 'left';
            violationsList.style.marginBottom = '20px';
            violationsList.style.padding = '10px';
            violationsList.style.backgroundColor = '#f8d7da';
            violationsList.style.borderRadius = '5px';
            
            let violationsHTML = '<strong>Violations detected:</strong><ul style="margin-top: 10px;">';
            
            // Add each violation type with count
            if (tabChangeCount > 0) violationsHTML += `<li>Tab changes: ${tabChangeCount}</li>`;
            if (mouseOutCount > 0) violationsHTML += `<li>Mouse left window: ${mouseOutCount}</li>`;
            if (fullscreenExitCount > 0) violationsHTML += `<li>Fullscreen exits: ${fullscreenExitCount}</li>`;
            if (copyAttemptCount > 0) violationsHTML += `<li>Copy attempts: ${copyAttemptCount}</li>`;
            if (pasteAttemptCount > 0) violationsHTML += `<li>Paste attempts: ${pasteAttemptCount}</li>`;
            if (focusChangeCount > 0) violationsHTML += `<li>Focus changes: ${focusChangeCount}</li>`;
            if (refreshViolationCount > 0) violationsHTML += `<li>Page refreshes: ${refreshViolationCount}</li>`;
            
            violationsHTML += '</ul>';
            violationsList.innerHTML = violationsHTML;
            modalContent.appendChild(violationsList);
            
            // Add countdown text
            const countdown = document.createElement('p');
            countdown.textContent = 'Submitting exam in 5 seconds...';
            countdown.style.fontWeight = 'bold';
            modalContent.appendChild(countdown);
            
            modalOverlay.appendChild(modalContent);
            document.body.appendChild(modalOverlay);
            
            // Start countdown
            let seconds = 5;
            const countdownInterval = setInterval(() => {
                seconds--;
                countdown.textContent = `Submitting exam in ${seconds} second${seconds !== 1 ? 's' : ''}...`;
                
                if (seconds <= 0) {
                    clearInterval(countdownInterval);
                }
            }, 1000);
            
            return modalOverlay;
        }

        // Update UI with current integrity values
        function updateUI() {
            if (localStorage.getItem('examStarted') == "true") {
                document.getElementById('tabChangeCount').textContent = tabChangeCount;
                document.getElementById('mouseOutCount').textContent = mouseOutCount;
                document.getElementById('fullscreenExitCount').textContent = fullscreenExitCount;
                document.getElementById('copyAttemptCount').textContent = copyAttemptCount;
                document.getElementById('pasteAttemptCount').textContent = pasteAttemptCount;
                document.getElementById('focusChangeCount').textContent = focusChangeCount;
                document.getElementById('refreshViolationCount').textContent = refreshViolationCount;
                document.getElementById('totalViolations').textContent = totalViolations;
            }
        }
        function sendIntegrityUpdate(eventType) {
    if (localStorage.getItem('examStarted')=="true"){
        const data = {
        examId: document.querySelector('input[name="examId"]').value, 
        userId:document.querySelector('input[name="userId"]').value, 
        eventType: eventType
    };

    fetch('/update-integrity', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
    })
    .then(response => response.json())
    .then(data => console.log('Integrity event logged:', data))
    .catch(error => console.error('Error sending integrity update:', error));
    }

}
        

        // Update status message
        function updateStatus(message) {
            if (localStorage.getItem('examStarted') == "true") {
                document.getElementById('lastEvent').textContent = message;
            }
        }

        // Handle tab change events
        function handleTabChange() {
            if (localStorage.getItem('examStarted') == "true") {
                if (document.hidden) {
                    // Only count tab change if it's not immediately after a focus change
                    const currentTime = Date.now();
                    if (currentTime - lastTabFocusTime > TAB_FOCUS_COOLDOWN) {
                        tabChangeCount++;
                        totalViolations++;
                        sendIntegrityUpdate("tabChanges");
                        updateStatus("Tab change detected");
                        updateUI();
                        checkAndSubmitTest();
                    }
                }
            }
        }

        // Handle mouse leaving the window
        function handleMouseOut(event) {
            if (localStorage.getItem('examStarted') == "true") {
                if (event.clientX < 0 || event.clientX > window.innerWidth - 1 || event.clientY < 0 || event.clientY > window.innerHeight - 1) {
                    mouseOutCount++;
                    totalViolations++;
                    sendIntegrityUpdate("mouseOuts");
                    updateStatus("Mouse left workspace");
                    showNotification("Mouse Going Out is not allowed");
                    updateUI();
                    checkAndSubmitTest();
                }
            }
        }

        // Handle window focus changes
        function handleFocusChange(event) {
            if (localStorage.getItem('examStarted') == "true") {
                if (event.type === 'blur') {
                    // Only count focus change if it's not immediately after a tab change
                    const currentTime = Date.now();
                    if (currentTime - lastTabFocusTime > TAB_FOCUS_COOLDOWN) {
                        focusChangeCount++;
                        lastTabFocusTime = currentTime;
                        
                        // Check if this is coming from a tab change or standalone focus change
                        if (!document.hidden) {
                            // If document is not hidden, this is a standalone focus change
                            totalViolations++;
                            sendIntegrityUpdate("focusChanges");
                            updateStatus("Focus change detected");
                            updateUI();
                            checkAndSubmitTest();
                        }
                    }
                }
            }
        }

        // Enter fullscreen mode
        function enterFullscreen() {
            const elem = document.documentElement;
            
            // Don't attempt to enter fullscreen if already in fullscreen mode
            if (document.fullscreenElement || document.webkitFullscreenElement || 
                document.mozFullScreenElement || document.msFullscreenElement) {
                return;
            }
            
            try {
                if (elem.requestFullscreen) {
                    elem.requestFullscreen();
                } else if (elem.webkitRequestFullscreen) { // Safari
                    elem.webkitRequestFullscreen();
                } else if (elem.mozRequestFullScreen) { // Firefox
                    elem.mozRequestFullScreen();
                } else if (elem.msRequestFullscreen) { // IE/Edge
                    elem.msRequestFullscreen();
                }
            } catch (error) {
                console.error("Fullscreen error:", error);
                showNotification("Fullscreen mode failed. Please try again.");
            }
        }

        // Handle fullscreen change events
        function handleFullscreenChange() {
            if (!document.fullscreenElement && !document.webkitFullscreenElement && 
                !document.mozFullScreenElement && !document.msFullscreenElement) {
                fullscreenExitCount++;
                totalViolations++;
                showNotification("Exiting fullscreen is not allowed during the exam.");
                
                // Give a short delay before forcing back to fullscreen (helps with Mac transition)
                setTimeout(enterFullscreen, 500);
                
                sendIntegrityUpdate("fullscreenExits");
                updateStatus("Fullscreen exited");
                updateUI();
                checkAndSubmitTest();
            } else {
                if (!isFullscreenActive) {
                    document.addEventListener('mouseout', handleMouseOut);
                    isFullscreenActive = true;
                }
                updateStatus("Fullscreen entered");
            }
        }

        // Start webcam capture
function startWebcamCapture() {
    const canvas = document.getElementById('canvas');
    const context = canvas.getContext('2d');
    
    // Check if media devices API is supported
    if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
        console.error("MediaDevices API not supported");
        showNotification("Your browser doesn't support webcam capture. Please use a modern browser.", 'error');
        return;
    }

    navigator.mediaDevices.getUserMedia({ 
        video: { 
            width: { ideal: 320 },
            height: { ideal: 240 },
            facingMode: "user"
        } 
    })
    .then((stream) => {
        const video = document.createElement('video');
        video.srcObject = stream;
        video.play();
        
        // Wait for video to be ready
        video.onloadedmetadata = () => {
            // Set up snapshot interval
            setInterval(() => {
                try {
                    context.drawImage(video, 0, 0, canvas.width, canvas.height);
                    
                    canvas.toBlob((blob) => {
                        if (!blob) return;
                        
                        const formData = new FormData();
                        formData.append('image', blob, `capture-${Date.now()}.png`);
                        formData.append('userId',document.querySelector('input[name="userId"]').value);
                        formData.append('examId', document.querySelector('input[name="examId"]').value);
                        
                        fetch('/save-image', { 
                            method: 'POST',
                            body: formData,
                        })
                        .then(response => response.json())
                        .then(data => console.log('Image saved:', data))
                        .catch(error => console.error('Error saving image:', error));
                    }, 'image/png');
                } catch (err) {
                    console.error("Error capturing webcam frame:", err);
                }
            }, 5000);
        };
    })
    .catch((error) => {
        console.error("Error accessing webcam:", error);
        showNotification("Unable to access the webcam. Please ensure your camera is connected and you've allowed permission.", 'error');
    });
}

        // Send activity ping to server
      function sendActivityPing() {
        
        fetch('/dashboard/see-active', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                examId: document.querySelector('input[name="examId"]').value,  // Use the template variable
                userId: document.querySelector('input[name="userId"]').value,  // Use the template variable
                timestamp: new Date().toISOString()
            })
        })
        .then(response => {
            if (!response.ok) {
                console.error('Failed to send activity ping');
                
            }else{
                
            }
        })
        .catch(error => {
           
           
        });
    }
    

        // Prevent back button
        function preventBackButton() {
            window.history.pushState(null, "", window.location.href);
            window.onpopstate = function() {
                window.history.pushState(null, "", window.location.href);
            };
        }

        // Handle refresh detection
        function handleRefreshDetection() {
            // Check if there's a saved refresh count
            let refreshCount = parseInt(localStorage.getItem('examRefreshCount') || '0');
            if (localStorage.getItem('examStarted') == "true") {
                refreshCount++;
                localStorage.setItem('examRefreshCount', refreshCount.toString());
            }
            
            // Count this as a violation if it's not the first load
            if (refreshCount > 1) {
                refreshViolationCount = refreshCount - 1; // Don't count the initial load
                totalViolations += 1; // Increment total violations by 1 for this refresh
                
                // Send refresh event to server for logging
                sendIntegrityUpdate("pageRefresh");
                updateStatus("Page refresh detected");
                updateUI();
                
                // Check if exceeded maximum allowed refreshes
                if (refreshCount > MAX_ALLOWED_REFRESHES) {
                    showNotification(`Maximum page refreshes (${MAX_ALLOWED_REFRESHES}) exceeded. Your exam is being submitted.`, 'error');
                    submitExam("excessive_refreshes");
                    return false;
                }
            }
            
            return true;
        }

        // Check and auto-submit test if violations are too high
        function checkAndSubmitTest() {
            if (localStorage.getItem('examStarted') == "true") {
                if (totalViolations >= 3) {
                    updateStatus("Auto-submitting test due to integrity violations");
                    const modalOverlay = showViolationModal();
                    
                    // Set timeout to submit after 5 seconds
                    setTimeout(() => {
                        submitExam("integrity_violations");
                    }, 5000);
                }
            }
        }

        // Submit exam with reason
        function submitExam(reason = "normal") {
            // Set a flag to prevent refresh detection during submission
            localStorage.setItem('examSubmitting', 'true');
            
            clearInterval(examTimerInterval);
            console.log(`Submitting exam: ${reason}`);
            
            // Clear all localStorage items
            localStorage.removeItem('examStarted');
            localStorage.removeItem('examEndTime');
            localStorage.removeItem('examRefreshCount');
            localStorage.removeItem('examMcqAnswers');
            localStorage.removeItem('examCodingAnswers');
            
            // In a real implementation, this would submit the form to the server
            // For this demo, we'll just redirect back to the start
            
            setTimeout(() => {
                document.getElementById("examContent").style.display = "none";
                document.getElementById("startButtonArea").style.display = "block";
                document.getElementById("integrityPanel").style.display = "block";
                showNotification("Exam submitted successfully!", "success");
            }, 1000);
                document.getElementById('examForm').submit();
    
    // Use a small timeout before redirect to allow form submission to complete
    setTimeout(() => {
        window.location.href = '/dashboard';
    }, 1000);
        }

        // Update screen configuration
        function updateScreenConfiguration() {
            // Get the screen configuration element
            const screenConfigElement = document.getElementById('screenConfig');
            
            // If the element doesn't exist, return
            if (!screenConfigElement) {
                console.error('Screen configuration element not found');
                return;
            }
            
            // Set a loading message
            screenConfigElement.textContent = 'Detecting screen configuration...';
            
            // Setup timeout to handle case where configuration can't be detected
            const timeout = setTimeout(() => {
                screenConfigElement.textContent = 'Screen configuration unavailable';
            }, 2000);
            
            // Get and display the screen configuration
            try {
                // Get window dimensions
                const width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
                const height = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;
                
                // Get screen dimensions
                const screenWidth = window.screen.width;
                const screenHeight = window.screen.height;
                
                // Get device pixel ratio for detecting high-DPI displays
                const pixelRatio = window.devicePixelRatio || 1;
                
                // Get color depth
                const colorDepth = window.screen.colorDepth;
                
                // Clear the timeout since we got the data
                clearTimeout(timeout);
                
                // Format and display the configuration
                const configText = `${width}x${height} (Window), ${screenWidth}x${screenHeight} (Screen), ${pixelRatio}x (Pixel Ratio), ${colorDepth}-bit color`;
                screenConfigElement.textContent = configText;
                
                return {
                    window: { width, height },
                    screen: { width: screenWidth, height: screenHeight },
                    pixelRatio,
                    colorDepth
                };
            } catch (error) {
                // Clear the timeout and show error
                clearTimeout(timeout);
                console.error('Error detecting screen configuration:', error);
                screenConfigElement.textContent = 'Error detecting screen configuration';
            }
        }

        // Navigation functions
        function showQuestion(type, index) {
            // Hide all question cards
            document.querySelectorAll('.question-card').forEach(card => {
                card.classList.remove('active');
            });
            
            // Show the selected question card
            const targetQuestion = document.getElementById(`${type}-question-${index}`);
            if (targetQuestion) {
                targetQuestion.classList.add('active');
            } else {
                console.error(`Question card ${type}-question-${index} not found`);
                // Show a placeholder message
                const existingPlaceholder = document.getElementById('question-placeholder');
                if (!existingPlaceholder) {
                    const placeholder = document.createElement('div');
                    placeholder.id = 'question-placeholder';
                    placeholder.className = 'question-card active';
                    placeholder.innerHTML = `
                        <div class="question-status">
                            <div>
                                <span class="question-type-badge ${type === 'mcq' ? 'mcq-badge' : 'coding-badge'}">
                                    ${type === 'mcq' ? 'Multiple Choice' : 'Coding'}
                                </span>
                            </div>
                            <div>
                                Question ${index + 1} of 5
                            </div>
                        </div>
                        <h4 class="question-text">This is a placeholder for ${type.toUpperCase()} question ${index + 1}.</h4>
                        <div class="navigation-buttons">
                            <button type="button" class="btn btn-outline-secondary prev-question-btn">Previous</button>
                            <button type="button" class="btn btn-primary next-question-btn">Next</button>
                        </div>
                    `;
                    document.querySelector('.col-md-9').appendChild(placeholder);
                    
                    // Add event listeners to the new buttons
                    placeholder.querySelector('.prev-question-btn').addEventListener('click', prevQuestion);
                    placeholder.querySelector('.next-question-btn').addEventListener('click', nextQuestion);
                }
            }
            
            // Update navigation sidebar
            document.querySelectorAll('.question-nav-item').forEach(item => {
                item.classList.remove('active');
                if (item.getAttribute('data-question-type') === type && 
                    parseInt(item.getAttribute('data-question-index')) === index) {
                    item.classList.add('active');
                }
            });
            
            // Update current question tracking
            currentQuestionType = type;
            currentQuestionIndex = index;
        }

        function nextQuestion() {
            if (currentQuestionType === "mcq" && currentQuestionIndex < 2) {
                // Go to next MCQ
                showQuestion("mcq", currentQuestionIndex + 1);
            } else if (currentQuestionType === "mcq" && currentQuestionIndex === 2) {
                // Switch from MCQ to coding
                showQuestion("coding", 0);
            } else if (currentQuestionType === "coding" && currentQuestionIndex < 1) {
                // Go to next coding question
                showQuestion("coding", currentQuestionIndex + 1);
            }
        }

        function prevQuestion() {
            if (currentQuestionType === "coding" && currentQuestionIndex > 0) {
                // Go to previous coding question
                showQuestion("coding", currentQuestionIndex - 1);
            } else if (currentQuestionType === "coding" && currentQuestionIndex === 0) {
                // Switch from coding to last MCQ
                showQuestion("mcq", 2);
            } else if (currentQuestionType === "mcq" && currentQuestionIndex > 0) {
                // Go to previous MCQ
                showQuestion("mcq", currentQuestionIndex - 1);
            }
        }

        function updateAnsweredStatus() {
            // Count MCQ answers
            document.querySelectorAll('input[type="radio"]:checked').forEach(radio => {
                const questionName = radio.name;
                const mcqIndex = parseInt(questionName.replace('mcq-q', '')) - 1;
                
                if (mcqIndex >= 0 && mcqIndex < answeredQuestions.mcq.length) {
                    answeredQuestions.mcq[mcqIndex] = true;
                    
                    // Update nav item
                    document.querySelectorAll('.question-nav-item').forEach(item => {
                        if (item.getAttribute('data-question-type') === 'mcq' && 
                            parseInt(item.getAttribute('data-question-index')) === mcqIndex) {
                            item.classList.add('answered');
                        }
                    });
                }
            });
            
            // Count coding answers (no actual textarea in this demo)
            
            // Update review modal
            updateReviewModal();
            
            // Save answers state to localStorage
            saveExamState();
        }

        function updateReviewModal() {
            const answeredCount = answeredQuestions.mcq.filter(Boolean).length + 
                                answeredQuestions.coding.filter(Boolean).length;
            
            document.getElementById('answeredCount').textContent = answeredCount;
            
            // Update MCQ status in review modal
            answeredQuestions.mcq.forEach((isAnswered, index) => {
                const listItems = document.querySelectorAll(`.review-list li[data-question-type="mcq"][data-question-index="${index}"]`);
                
                listItems.forEach(listItem => {
                    const statusBadge = listItem.querySelector('.status-badge');
                    
                    if (isAnswered) {
                        statusBadge.textContent = "Answered";
                        statusBadge.classList.remove('badge-secondary');
                        statusBadge.classList.add('badge-success');
                    } else {
                        statusBadge.textContent = "Not answered";
                        statusBadge.classList.remove('badge-success');
                        statusBadge.classList.add('badge-secondary');
                    }
                });
            });
            
            // Update coding status in review modal
            answeredQuestions.coding.forEach((isAnswered, index) => {
                const listItems = document.querySelectorAll(`.review-list li[data-question-type="coding"][data-question-index="${index}"]`);
                
                listItems.forEach(listItem => {
                    const statusBadge = listItem.querySelector('.status-badge');
                    
                    if (isAnswered) {
                        statusBadge.textContent = "Answered";
                        statusBadge.classList.remove('badge-secondary');
                        statusBadge.classList.add('badge-success');
                    } else {
                        statusBadge.textContent = "Not answered";
                        statusBadge.classList.remove('badge-success');
                        statusBadge.classList.add('badge-secondary');
                    }
                });
            });
        }

        // Save exam state to localStorage (for page refresh handling)
        function saveExamState() {
            // Save answers
            const mcqAnswers = {};
            document.querySelectorAll('input[type="radio"]:checked').forEach(radio => {
                mcqAnswers[radio.name] = radio.value;
            });
            
            localStorage.setItem('examMcqAnswers', JSON.stringify(mcqAnswers));
        }

        // Load exam state from localStorage (after page refresh)
        function loadExamState() {
            // Load MCQ answers
            try {
                const mcqAnswers = JSON.parse(localStorage.getItem('examMcqAnswers')) || {};
                Object.entries(mcqAnswers).forEach(([name, value]) => {
                    const radioInput = document.querySelector(`input[name="${name}"][value="${value}"]`);
                    if (radioInput) {
                        radioInput.checked = true;
                        radioInput.closest('.option-label').classList.add('selected');
                    }
                });
                
                updateAnsweredStatus();
            } catch (e) {
                console.error("Error loading saved exam state:", e);
            }
        }

        // Event Listeners
        document.addEventListener('DOMContentLoaded', function() {
            // Update screen configuration
            updateScreenConfiguration();
            
            // Check if exam has started
            const examStarted = localStorage.getItem('examStarted');
            
            if (examStarted === 'true') {
                // Handle refresh detection
                if (!handleRefreshDetection()) {
                    return; // Stop if refresh limit exceeded
                }
                
                // Continue with normal exam loading
                document.getElementById("startButtonArea").style.display = "none";
                document.getElementById("examContent").style.display = "block";
                
                if (initializeExamTimer()) {
                    loadExamState();
                    enterFullscreen();
                    preventBackButton();
                    startWebcamCapture();
                    
                    // Start sending activity pings
                    pingInterval = setInterval(sendActivityPing, 20000); // Every 20 seconds
                    sendActivityPing(); // Send initial ping
                } else {
                    // If initialization failed, clear localStorage
                    localStorage.removeItem('examStarted');
                    localStorage.removeItem('examEndTime');
                    localStorage.removeItem('examRefreshCount');
                }
            } else {
                // Reset refresh count when exam starts
                document.getElementById("startExamBtn").addEventListener("click", function() {
                    // Store exam started state
                    localStorage.setItem('examStarted', 'true');
                    localStorage.setItem('examRefreshCount', '0');
                    
                    enterFullscreen();
                    document.getElementById("startButtonArea").style.display = "none";
                    document.getElementById("examContent").style.display = "block";
                    
                    if (initializeExamTimer()) {
                        preventBackButton();
                        startWebcamCapture();
                        
                        // Start sending activity pings
                        pingInterval = setInterval(sendActivityPing, 20000);
                        sendActivityPing(); // Send initial ping
                    } else {
                        // Revert if initialization failed
                        document.getElementById("startButtonArea").style.display = "block";
                        document.getElementById("examContent").style.display = "none";
                        localStorage.removeItem('examStarted');
                    }
                });
            }
            
            // Question navigation event listeners
            document.querySelectorAll('.question-nav-item').forEach(item => {
                item.addEventListener('click', function(e) {
                    e.preventDefault();
                    const type = this.getAttribute('data-question-type');
                    const index = parseInt(this.getAttribute('data-question-index'));
                    showQuestion(type, index);
                });
            });
            
            // Next question buttons
            document.querySelectorAll('.next-question-btn').forEach(button => {
                button.addEventListener('click', nextQuestion);
            });
            
            // Previous question buttons
            document.querySelectorAll('.prev-question-btn').forEach(button => {
                button.addEventListener('click', prevQuestion);
            });
            
            // MCQ option selection
            document.querySelectorAll('.option-label').forEach(label => {
                label.addEventListener('click', function() {
                    // Clear selected state for all options in the same question
                    const questionCard = this.closest('.question-card');
                    questionCard.querySelectorAll('.option-label').forEach(opt => {
                        opt.classList.remove('selected');
                    });
                    
                    // Apply selected state to this option
                    this.classList.add('selected');
                    
                    // Update answered status
                    updateAnsweredStatus();
                });
            });
            
            // Review button
            document.getElementById('reviewBtn').addEventListener('click', function() {
                updateAnsweredStatus();
                $('#reviewModal').modal('show');
            });
            
            // Submit from review modal
            document.getElementById('submitFromReview').addEventListener('click', function() {
                $('#reviewModal').modal('hide');
                submitExam("manual");
            });
            
            // Submit test button
            document.getElementById('submitTestBtn').addEventListener('click', function() {
                submitExam("manual");
            });
            
            // Review modal question navigation
            document.querySelectorAll('.review-list li').forEach(item => {
                item.addEventListener('click', function() {
                    const type = this.getAttribute('data-question-type');
                    const index = parseInt(this.getAttribute('data-question-index'));
                    $('#reviewModal').modal('hide');
                    showQuestion(type, index);
                });
            });
        });

        // Event listeners for integrity monitoring
        document.addEventListener('fullscreenchange', handleFullscreenChange);
        document.addEventListener('webkitfullscreenchange', handleFullscreenChange); // Safari
        document.addEventListener('mozfullscreenchange', handleFullscreenChange); // Firefox
        document.addEventListener('MSFullscreenChange', handleFullscreenChange); // IE/Edge
        document.addEventListener('visibilitychange', handleTabChange);
        window.addEventListener('blur', handleFocusChange);
        window.addEventListener('focus', handleFocusChange);

        // Prevent copy/paste
        document.addEventListener('copy', (e) => {
            if (localStorage.getItem('examStarted') == "true") {
                e.preventDefault();
                copyAttemptCount++;
                totalViolations++;
                sendIntegrityUpdate("copyAttempts");
                updateStatus("Copy attempt detected");
                updateUI();
                checkAndSubmitTest();
            }
        });

        document.addEventListener('paste', (e) => {
            if (localStorage.getItem('examStarted') == "true") {
                e.preventDefault();
                pasteAttemptCount++;
                totalViolations++;
                sendIntegrityUpdate("pasteAttempts");
                updateStatus("Paste attempt detected");
                updateUI();
                checkAndSubmitTest();
            }
        });

        // Detect resize events (potential DevTools)
        window.addEventListener('resize', () => {
            if (localStorage.getItem('examStarted') == "true") {
                const currentTime = Date.now();
                // Check if we're within the cooldown period
                if (currentTime - lastResizeTime < RESIZE_COOLDOWN) {
                    // Count this as another attempt within the same period
                    resizeAttempts++;
                    
                    // Check if max attempts exceeded
                    if (resizeAttempts >= MAX_RESIZE_ATTEMPTS) {
                        // Only show notification and count as violation if not due to Mac-specific events
                        if (Math.abs(window.innerHeight - window.screen.height) > 100) {
                            showNotification(`DevTools detected! Your exam is being monitored.`, 'error');
                            
                            // Show the violation modal and submit exam after delay
                            const modalOverlay = showViolationModal();
                            setTimeout(() => {
                                submitExam("resize_violations");
                            }, 5000);
                        }
                    }
                } else {
                    // First resize attempt in a new period
                    resizeAttempts = 1;
                    if(resizeAttempts > 1) {
                        showNotification(`Window resize detected. This is being monitored.`);
                    }
                }
                
                // Update the timestamp
                lastResizeTime = currentTime;
                
                // Check if total violations are too high
                checkAndSubmitTest();
            }
        });

        // Handle beforeunload event
        window.addEventListener('beforeunload', function(e) {
            if (localStorage.getItem('examStarted') == "true") {
                if (pingInterval) {
                    clearInterval(pingInterval);
                    
                    // Send final ping with status=inactive
                    sendActivityPing();
                }
                
                if (localStorage.getItem('examSubmitting') === 'true') {
                    return;
                }
                
               
                e.preventDefault();
                e.returnValue = '';
                return '';
            }
        });


        document.addEventListener('click', () => {
            if (!document.fullscreenElement && localStorage.getItem('examStarted') == "true") {
                enterFullscreen();
                updateStatus("Fullscreen mode ensured after click");
            }
        });
    </script>
</body>
</html>
            