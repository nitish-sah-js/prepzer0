<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Exam Integrity Monitoring - Example Usage</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            margin: 0;
            padding: 20px;
            background-color: #f5f7fb;
            color: #333;
        }
        
        .container {
            max-width: 800px;
            margin: 0 auto;
            background-color: #fff;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
        }
        
        h1 {
            text-align: center;
            color: #4361ee;
            margin-bottom: 30px;
        }
        
        h2 {
            color: #2b2d42;
            border-bottom: 1px solid #eee;
            padding-bottom: 10px;
            margin-top: 30px;
        }
        
        .btn {
            display: inline-block;
            background-color: #4361ee;
            color: #fff;
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            margin-right: 10px;
            margin-bottom: 10px;
        }
        
        .btn:hover {
            background-color: #3344c7;
        }
        
        .btn-success {
            background-color: #2dc653;
        }
        
        .btn-success:hover {
            background-color: #26a645;
        }
        
        .btn-danger {
            background-color: #ef476f;
        }
        
        .btn-danger:hover {
            background-color: #d3305b;
        }
        
        .status-panel {
            background-color: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 5px;
            padding: 15px;
            margin: 20px 0;
        }
        
        .status-item {
            display: flex;
            justify-content: space-between;
            padding: 8px 0;
            border-bottom: 1px solid #eee;
        }
        
        .status-item:last-child {
            border-bottom: none;
        }
        
        .status-label {
            font-weight: bold;
        }
        
        .status-value {
            background-color: #e9ecef;
            padding: 2px 8px;
            border-radius: 3px;
        }
        
        #lastEvent {
            font-weight: bold;
            color: #ef476f;
        }
        
        #totalViolations {
            font-weight: bold;
            color: #ef476f;
            font-size: 18px;
        }
        
        .footer {
            text-align: center;
            margin-top: 50px;
            color: #8d99ae;
            font-size: 14px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Exam Integrity Monitoring System</h1>
        
        <p>This is an example implementation of the Exam Integrity Monitoring System. It demonstrates how to integrate the monitoring capabilities into your exam application.</p>
        
        <div id="startExamArea">
            <h2>Start Exam</h2>
            <p>Click the button below to simulate starting an exam with integrity monitoring.</p>
            <button id="startExamBtn" class="btn btn-success">Start Exam with Monitoring</button>
        </div>
        
        <div id="examContent" style="display:none">
            <h2>Exam in Progress</h2>
            <p>Your exam is now being monitored for integrity violations. Try the following to see the monitoring in action:</p>
            <ul>
                <li>Switch to another tab</li>
                <li>Move your mouse outside the browser window</li>
                <li>Press F12 or try to open developer tools</li>
                <li>Try to copy or paste content</li>
                <li>Exit fullscreen mode</li>
            </ul>
            
            <div class="status-panel" id="integrityPanel">
                <h3>Integrity Monitor Status</h3>
                <div class="status-item">
                    <span class="status-label">Tab Changes Detected:</span>
                    <span class="status-value" id="tabChangeCount">0</span>
                </div>
                <div class="status-item">
                    <span class="status-label">Mouse Left Workspace:</span>
                    <span class="status-value" id="mouseOutCount">0</span>
                </div>
                <div class="status-item">
                    <span class="status-label">Fullscreen Exit Attempts:</span>
                    <span class="status-value" id="fullscreenExitCount">0</span>
                </div>
                <div class="status-item">
                    <span class="status-label">Copy Attempts:</span>
                    <span class="status-value" id="copyAttemptCount">0</span>
                </div>
                <div class="status-item">
                    <span class="status-label">Paste Attempts:</span>
                    <span class="status-value" id="pasteAttemptCount">0</span>
                </div>
                <div class="status-item">
                    <span class="status-label">Focus Changes Detected:</span>
                    <span class="status-value" id="focusChangeCount">0</span>
                </div>
                <div class="status-item">
                    <span class="status-label">Refresh Violations:</span>
                    <span class="status-value" id="refreshViolationCount">0</span>
                </div>
                <div class="status-item">
                    <span class="status-label">Last Event:</span>
                    <span class="status-value" id="lastEvent">N/A</span>
                </div>
                <div class="status-item">
                    <span class="status-label">Total Integrity Violations:</span>
                    <span class="status-value" id="totalViolations">0</span>
                </div>
            </div>
            
            <div>
                <button id="simulateViolationBtn" class="btn">Simulate Violation</button>
                <button id="endExamBtn" class="btn btn-danger">End Exam</button>
            </div>
        </div>
        
        <div id="examCompletedArea" style="display:none">
            <h2>Exam Completed</h2>
            <p>The exam has been completed and integrity monitoring has been stopped.</p>
            <button id="restartBtn" class="btn">Restart Demo</button>
        </div>
        
        <div class="footer">
            <p>Â© 2025 Exam Integrity Monitoring System</p>
        </div>
    </div>
    
    <!-- Hidden Canvas for Webcam Capture -->
    <canvas id="canvas" style="display: none;" width="320" height="240"></canvas>
    
    <!-- Load the Integrity Monitoring System script -->
    <script src="integrity-monitor.js"></script>
    
    <script>
        // Configuration and initialization
        document.addEventListener('DOMContentLoaded', function() {
            // DOM elements
            const startExamBtn = document.getElementById('startExamBtn');
            const simulateViolationBtn = document.getElementById('simulateViolationBtn');
            const endExamBtn = document.getElementById('endExamBtn');
            const restartBtn = document.getElementById('restartBtn');
            const startExamArea = document.getElementById('startExamArea');
            const examContent = document.getElementById('examContent');
            const examCompletedArea = document.getElementById('examCompletedArea');
            
            // Mock exam data (for demonstration)
            const mockExamData = {
                examId: 'demo-exam-123',
                userId: 'user-456',
                duration: 60 // 60 minutes
            };
            
            // Store for the integrity monitor instance
            let integrityMonitor = null;
            
            // Initialize the exam
            startExamBtn.addEventListener('click', function() {
                // Hide start area, show exam content
                startExamArea.style.display = 'none';
                examContent.style.display = 'block';
                
                // Initialize integrity monitoring
                integrityMonitor = initIntegrityMonitoring({
                    examId: mockExamData.examId,
                    userId: mockExamData.userId,
                    apiEndpoint: '/api/update-integrity', // Replace with your API endpoint
                    pingEndpoint: '/api/activity-ping',   // Replace with your API endpoint
                    webcamEndpoint: '/api/save-image',    // Replace with your API endpoint
                    enableWebcam: false, // Set to true to enable webcam (requires user permission)
                    autoEnterFullscreen: true,
                    maxViolations: 3,
                    onViolation: function(reason) {
                        console.log(`Violation threshold reached: ${reason}`);
                        endExam('violation');
                    }
                });
                
                // For demonstration, we'll mock the API endpoints
                mockAPIEndpoints();
            });
            
            // Simulate a violation
            simulateViolationBtn.addEventListener('click', function() {
                // Create a custom event to simulate tab change
                const fakeEvent = new Event('visibilitychange');
                
                // Temporarily override the document.hidden property
                Object.defineProperty(document, 'hidden', {
                    configurable: true,
                    get: function() { return true; }
                });
                
                // Dispatch the event
                document.dispatchEvent(fakeEvent);
                
                // Reset the document.hidden property
                Object.defineProperty(document, 'hidden', {
                    configurable: true,
                    get: function() { return false; }
                });
                
                // Show notification
                showNotification('Violation simulated successfully!', 'success');
            });
            
            // End exam button
            endExamBtn.addEventListener('click', function() {
                endExam('manual');
            });
            
            // Restart demo button
            restartBtn.addEventListener('click', function() {
                examCompletedArea.style.display = 'none';
                startExamArea.style.display = 'block';
                
                // Reset UI counters
                document.getElementById('tabChangeCount').textContent = '0';
                document.getElementById('mouseOutCount').textContent = '0';
                document.getElementById('fullscreenExitCount').textContent = '0';
                document.getElementById('copyAttemptCount').textContent = '0';
                document.getElementById('pasteAttemptCount').textContent = '0';
                document.getElementById('focusChangeCount').textContent = '0';
                document.getElementById('refreshViolationCount').textContent = '0';
                document.getElementById('totalViolations').textContent = '0';
                document.getElementById('lastEvent').textContent = 'N/A';
            });
            
            // Function to end the exam
            function endExam(reason = 'manual') {
                // Stop integrity monitoring
                if (integrityMonitor) {
                    integrityMonitor.stopMonitoring();
                }
                
                // Update UI
                examContent.style.display = 'none';
                examCompletedArea.style.display = 'block';
                
                // Log reason
                console.log(`Exam ended: ${reason}`);
                
                // In a real application, you would submit the form to the server
                // For this demo, we'll just show a notification
                showNotification(`Exam ended: ${reason}`, 'success');
            }
            
            // Mock API endpoints for demonstration
            function mockAPIEndpoints() {
                // Override fetch to mock API responses
                const originalFetch = window.fetch;
                window.fetch = function(url, options) {
                    // Check if this is a mock endpoint
                    if (url.includes('/api/')) {
                        console.log(`Mock API call to ${url}`, options);
                        
                        return new Promise((resolve) => {
                            // Simulate network delay
                            setTimeout(() => {
                                resolve({
                                    ok: true,
                                    json: () => Promise.resolve({ success: true, message: 'Mock API response' })
                                });
                            }, 200);
                        });
                    }
                    
                    // Otherwise, use the original fetch
                    return originalFetch.apply(this, arguments);
                };
            }
        });
    </script>
</body>
</html>